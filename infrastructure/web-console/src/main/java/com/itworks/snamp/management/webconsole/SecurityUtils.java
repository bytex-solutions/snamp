package com.itworks.snamp.management.webconsole;

import org.eclipse.jetty.jaas.JAASLoginService;
import org.eclipse.jetty.jaas.spi.LdapLoginModule;
import org.eclipse.jetty.server.UserIdentity;

import javax.ws.rs.WebApplicationException;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.SecurityContext;
import java.util.Arrays;

/**
 * @author Roman Sakno
 * @version 1.0
 * @since 1.0
 */
public final class SecurityUtils {
    private SecurityUtils(){

    }

    public static final String ADMIN_ROLE = "admin";
    public static final String USER_ROLE = "user";

    public static JAASLoginService createJaasLoginServiceForOsgi(final ClassLoader osgiClassLoader){
        return new JAASLoginService(){
            @Override
            public UserIdentity login(final String username, final Object credentials) {
                final ClassLoader loader = Thread.currentThread().getContextClassLoader();
                Thread.currentThread().setContextClassLoader(osgiClassLoader);
                try{
                    return super.login(username, credentials);
                }
                finally {
                    Thread.currentThread().setContextClassLoader(loader);
                }
            }
        };
    }

    //this method is not used by this bundle but required for correct Import-Package
    //header generated by maven-bundle-plugin. This plugin adds org.eclipse.jetty.jaas.spi.*
    //package that is required by LoginContext factory.
    @SuppressWarnings("UnusedDeclaration")
    public static String convertCredentialJettyToLdap(final String encryptedPassword){
        return LdapLoginModule.convertCredentialLdapToJetty(encryptedPassword);
    }

    public static void checkRoles(final SecurityContext context, final String... roles) throws WebApplicationException{
        if(context == null) return;
        for(final String r: roles)
            if(context.isUserInRole(r)) return;
        throw new WebApplicationException(new SecurityException(String.format("User %s is not in %s roles", context.getUserPrincipal().getName(), Arrays.toString(roles))), Response.Status.FORBIDDEN);
    }

    public static void adminRequired(final SecurityContext context) throws WebApplicationException{
        checkRoles(context, ADMIN_ROLE);
    }

    public static void wellKnownRoleRequired(final SecurityContext context){
        checkRoles(context, ADMIN_ROLE, USER_ROLE);
    }
}
