<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>snamp</artifactId>
        <groupId>com.itworks.snamp</groupId>
        <version>1.0.0</version>
        <relativePath>../../pom.xml</relativePath>
    </parent>
    <modelVersion>4.0.0</modelVersion>
    <artifactId>hawtio-console</artifactId>
    <packaging>war</packaging>
    <name>SNAMP Management Console</name>
    <version>1.0.0</version>
    <description>Provides hawtio extension for managing SNAMP software</description>
    <properties>
        <hawtio.version>1.4.47</hawtio.version>
        <jolokia.version>1.2.3</jolokia.version>
        <servlet-api-version>2.5</servlet-api-version>
        <maven-antrun-plugin-version>1.7</maven-antrun-plugin-version>
        <maven-resources-plugin-version>2.6</maven-resources-plugin-version>

        <!-- see https://github.com/hawtio/hawtio/blob/master/hawtio-plugin-examples/groovy-shell-plugin/pom.xml -->
        <!-- filtered plugin properties, we don't define plugin-scripts here
          as we build that dynamically using maven-antrun-plugin below. -->
        <!-- plugin-context is what context this plugin will handle requests on
          in the application server -->
        <plugin-context>/snamp-shell-plugin</plugin-context>

        <!-- plugin-name is the name of our plugin, affects the name used for
          the plugin's mbean -->
        <plugin-name>hawtio Snamp Management Console</plugin-name>

        <!-- plugin-domain is currently unused, we just define it to an empty
          string -->
        <plugin-domain />

        <!-- this lets this plugin deploy nicely into karaf, these get used
          for the ImportPackage directive for maven-bundle-plugin -->
        <!--<fuse.osgi.import>
            javax.servlet,
            io.hawt.web.plugin,
            com.google.*,
            com.itworks.snamp.internal.*,
            com.itworks.snamp.core.*,
            com.itworks.snamp.concurrent.*
        </fuse.osgi.import>-->

        <webapp-dir>${project.artifactId}-${project.version}</webapp-dir>
        <webapp-outdir>${basedir}/target/${webapp-dir}</webapp-outdir>
        <war-plugin-version>2.1.1</war-plugin-version>

    </properties>
    <build>
        <plugins>
            <plugin>
                <artifactId>maven-antrun-plugin</artifactId>
                <version>${maven-antrun-plugin-version}</version>
                <executions>

                    <execution>
                        <!-- we run this early in the build process before
                          maven-resources-plugin is run.  We're exporting the
                          plugin-scripts property from here, so we need to
                          use maven-antrun-plugin 1.6 or up -->
                        <id>generate-sources</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <target>
                                <echo>Building plugin javascript file list</echo>
                                <!-- javascript-files will contain all of the javascript in
                                  our project -->
                                <fileset id="javascript-files" dir="${basedir}/src/main/webapp">
                                    <include name="**/*.js" />
                                </fileset>
                                <!-- we need to strip out the top level path which is
                                   our source directory and be sure to change the directory
                                   separators to forward slashes -->
                                <pathconvert pathsep="," dirsep="/" property="plugin-scripts" refid="javascript-files">
                                    <map from="${basedir}/src/main/webapp/" to="" />
                                </pathconvert>
                                <echo>Files: ${plugin-scripts}</echo>

                                <echo>Copying log4j.properties</echo>
                                <copy file="src/main/resources/log4j.properties" todir="target/classes" />

                            </target>
                            <!-- this exports plugin-scripts to the maven build, without
                              this line ${plugin-scripts} in the web.xml file won't be
                              replaced -->
                            <exportAntProperties>true</exportAntProperties>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <artifactId>maven-resources-plugin</artifactId>
                <version>${maven-resources-plugin-version}</version>
                <executions>
                    <execution>
                        <!-- defining this maven plugin in the same phase as the
                          maven-antrun-plugin but *after* we've configured the
                          maven-antrun-plugin ensures we filter resources *after*
                          we've discovered the plugin .js files. -->
                        <id>copy-resources</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>resources</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.felix</groupId>
                <artifactId>maven-bundle-plugin</artifactId>
                <extensions>true</extensions>
                <executions>
                    <execution>
                        <id>bundle-manifest</id>
                        <phase>process-classes</phase>
                        <goals>
                            <goal>manifest</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <manifestLocation>${webapp-outdir}/META-INF</manifestLocation>
                    <supportedProjectTypes>
                        <supportedProjectType>jar</supportedProjectType>
                        <supportedProjectType>bundle</supportedProjectType>
                        <supportedProjectType>war</supportedProjectType>
                    </supportedProjectTypes>
                    <instructions>
                        <Webapp-Context>${plugin-context}</Webapp-Context>
                        <Web-ContextPath>${plugin-context}</Web-ContextPath>

                        <Embed-Directory>WEB-INF/lib</Embed-Directory>
                        <Embed-Dependency>*;scope=compile|runtime</Embed-Dependency>
                        <Embed-Transitive>true</Embed-Transitive>

                        <Export-Package>com.itworks.snamp.management.webconsole</Export-Package>
                        <!--<Import-Package>${fuse.osgi.import}</Import-Package>-->

                        <Bundle-ClassPath>.,WEB-INF/classes</Bundle-ClassPath>

                        <Bundle-Activator>com.itworks.snamp.management.webconsole.impl.WebConsoleActivator</Bundle-Activator>
                        <Bundle-SymbolicName>com.itworks.snamp.management.webconsole</Bundle-SymbolicName>
                        <Implementation-Title>SNAMP Hawtio Additional Module</Implementation-Title>
                        <Implementation-Version>${project.version}</Implementation-Version>
                    </instructions>
                </configuration>
            </plugin>

            <!-- We define the maven-war-plugin here and make sure it uses
              the manifest file generated by the maven-bundle-plugin.  We
              also ensure it picks up our filtered web.xml and not the one
              in src/main/resources -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <version>${war-plugin-version}</version>
                <configuration>
                    <outputFileNameMapping>@{artifactId}@-@{baseVersion}@@{dashClassifier?}@.@{extension}@</outputFileNameMapping>
                    <packagingExcludes>**/classes/OSGI-INF/**</packagingExcludes>
                    <failOnMissingWebXml>false</failOnMissingWebXml>
                    <archive>
                        <manifestFile>${webapp-outdir}/META-INF/MANIFEST.MF</manifestFile>
                    </archive>
                    <webResources>
                        <resource>
                            <filtering>true</filtering>
                            <directory>src/main/resources</directory>
                            <includes>
                                <include>**/*.*</include>
                            </includes>
                            <excludes>
                                <exclude>log4j.properties</exclude>
                            </excludes>
                        </resource>
                    </webResources>
                </configuration>
            </plugin>
        </plugins>
    </build>
    <dependencies>
        <!-- we only need to embed this dependency in the war, this contains
        a nice helper class that our plugin can use to export it's plugin
        mbean -->
        <dependency>
            <groupId>io.hawt</groupId>
            <artifactId>hawtio-plugin-mbean</artifactId>
            <version>${hawtio.version}</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.jolokia</groupId>
            <artifactId>jolokia-core</artifactId>
            <version>1.2.3</version>
            <scope>provided</scope>
        </dependency>
        <!-- servlet API is provided by the container -->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>servlet-api</artifactId>
            <version>${servlet-api-version}</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <scope>provided</scope>
            <groupId>com.itworks.snamp</groupId>
            <artifactId>framework</artifactId>
            <version>1.0.0</version>
        </dependency>
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>18.0</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <scope>provided</scope>
            <groupId>org.osgi</groupId>
            <artifactId>org.osgi.core</artifactId>
            <version>4.3.1</version>
        </dependency>
        <dependency>
            <scope>provided</scope>
            <groupId>org.osgi</groupId>
            <artifactId>org.osgi.compendium</artifactId>
            <version>4.3.1</version>
        </dependency>
        <!-- lets mark dependencies from the WAR as provided to avoid jetty:run adding duplicates -->
        <dependency>
            <groupId>com.itworks.snamp</groupId>
            <artifactId>management</artifactId>
            <version>1.0.0</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.11</version>
            <scope>test</scope>
        </dependency>
    </dependencies>
</project>