{"version":3,"file":"2.chunk.js","sources":["webpack:///./src/app/charts/templates/css/dashboard.css","webpack:///./src/app/charts/charts.dashboard.ts","webpack:///./src/app/charts/charts.empty.dashboard.ts","webpack:///./src/app/charts/charts.modules.ts","webpack:///./src/app/charts/charts.template.ts","webpack:///./src/app/charts/templates/css/dashboard.css?ce8c","webpack:///./src/app/charts/templates/dashboard.html","webpack:///./src/app/charts/templates/empty.html","webpack:///./src/app/charts/templates/template.html","webpack:///./src/app/controls/nggrid/components/NgGridPlaceholder.ts","webpack:///./src/app/controls/nggrid/directives/NgGrid.ts","webpack:///./src/app/controls/nggrid/directives/NgGridItem.ts","webpack:///./src/app/controls/nggrid/main.ts","webpack:///./src/app/controls/nggrid/modules/NgGrid.module.ts"],"sourcesContent":["exports = module.exports = require(\"./../../../../../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \".thumbnail.with-caption {\\r\\n    display: inline-block;\\r\\n    background: #f5f5f5;\\r\\n}\\r\\n.thumbnail.with-caption p {\\r\\n    margin: 0;\\r\\n    padding-top: 0.5em;\\r\\n    text-align: center;\\r\\n    font-size: large;\\r\\n}\\r\\n.thumbnail.with-caption small:before {\\r\\n    content: '\\\\2014   \\\\A0';\\r\\n}\\r\\n.thumbnail {\\r\\n    height: auto;\\r\\n    margin: 10px;\\r\\n    max-height: 190px;\\r\\n}\\r\\n.thumbnail.with-caption small {\\r\\n    width: 100%;\\r\\n    text-align: right;\\r\\n    display: inline-block;\\r\\n    color: #999;\\r\\n}\\r\\n\\r\\nselect.form-control:not([size]):not([multiple]) {\\r\\n    height: auto;\\r\\n    cursor: pointer;\\r\\n}\\r\\n\\r\\n.chartMenuImage {\\r\\n  position: fixed;\\r\\n  right: 80px;\\r\\n  top: 50%;\\r\\n  margin-top: -9em !important;\\r\\n  z-index: 3;\\r\\n}\\r\\n\\r\\n#chartMenu {\\r\\n  background: #536980;\\r\\n  color: rgba(255,255,255,0.95);\\r\\n  position: fixed;\\r\\n  right: 0;\\r\\n  top: 50%;\\r\\n  margin-top: -10em !important;\\r\\n  list-style-type: none;\\r\\n  z-index: 3;\\r\\n  padding: 9px 0 9px 9px;\\r\\n  border-top-left-radius: 5px;\\r\\n  border-bottom-left-radius: 5px;\\r\\n}\\r\\n\\r\\n#chartMenu li {\\r\\n    cursor: pointer;\\r\\n    margin-bottom: 15px;\\r\\n    margin-right: 5px;\\r\\n}\\r\\n\\r\\n#chartMenu li i {\\r\\n    padding: 7px;\\r\\n    border-radius: 5px;\\r\\n    font-size: 1.5em;\\r\\n}\\r\\n\\r\\n#chartMenu li:hover i {\\r\\n    background: #1ABB9C;\\r\\n}\\r\\n\\r\\n#chartMenu li:last-child {\\r\\n    margin-bottom: 0;\\r\\n}\\r\\n\\r\\n.jumbotron {\\r\\n    padding: 15px !important;\\r\\n}\\r\\n\\r\\n.jumbotron p {\\r\\n    font-size: 17px !important;\\r\\n}\\r\\n\\r\\n.grid {\\r\\n\\ttransform-origin: top center;\\r\\n\\ttransition: transform 0.5s;\\r\\n\\tposition: relative;\\r\\n}\\r\\n\\r\\n.grid-item {\\r\\n\\tbackground-color: #ffffff;\\r\\n\\t-webkit-transition: width 0.25s, height 0.25s, transform 0.5s;\\r\\n\\t-moz-transition: width 0.25s, height 0.25s, transform 0.5s;\\r\\n\\t-o-transition: width 0.25s, height 0.25s, transform 0.5s;\\r\\n\\ttransition: width 0.25s, height 0.25s, transform 0.5s;\\r\\n\\toverflow: hidden;\\r\\n\\tposition: absolute;\\r\\n\\tbox-shadow: 3px 3px 3px rgba(0,0,0,0.4);\\r\\n\\tborder: 1px solid rgb(42, 63, 84);\\r\\n    border-radius: 5px;\\r\\n}\\r\\n\\r\\n.grid-item:active, .grid-item.moving {\\r\\n\\tz-index: 2;\\r\\n\\t-webkit-transition: none;\\r\\n\\t-moz-transition: none;\\r\\n\\t-o-transition: none;\\r\\n\\ttransition: none;\\r\\n}\\r\\n\\r\\n.grid-placeholder {\\r\\n\\tbackground-color: rgba(0, 0, 0, 0.3);\\r\\n}\\r\\n\\r\\n.grid-item.moving {\\r\\n    z-index: z-index + 1;\\r\\n}\\r\\n\\r\\n.placeholder {\\r\\n    position: absolute;\\r\\n}\\r\\n\\r\\n.nvd3.nv-pie.nv-chart-donut1 .nv-pie-title {\\r\\n    opacity: 0.4;\\r\\n    fill: rgba(224, 116, 76, 0.91);\\r\\n}\\r\\n\\r\\n.x_title h2 {\\r\\n    font-size: inherit !important;\\r\\n    color: black;\\r\\n    display: inline;\\r\\n    max-width: calc(100% - 65px);\\r\\n}\\r\\n\\r\\n.x_title h5 {\\r\\n    display: inline;\\r\\n    margin-left: 15px;\\r\\n}\\r\\n\\r\\n.x_title {\\r\\n    border-bottom: 2px solid #E6E9ED;\\r\\n    padding: 0 0 7px 0 !important;\\r\\n    margin-bottom: 0 !important;\\r\\n    font-style: italic;\\r\\n}\\r\\n\\r\\n.panel_toolbox > li >a {\\r\\n    display: inline;\\r\\n}\\r\\n\\r\\nul.panel_toolbox i.fa-pause-circle-o {\\r\\n    color:#ffa3a3;\\r\\n}\\r\\n\\r\\nul.panel_toolbox i.fa-play-circle-o {\\r\\n    color:#639863;\\r\\n}\\r\\n\\r\\n.tableWrapper {\\r\\n    position: relative;\\r\\n    height: 100%;\\r\\n    overflow: hidden;\\r\\n}\", \"\"]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-loader!./src/app/charts/templates/css/dashboard.css\n// module id = ./node_modules/css-loader/index.js!./src/app/charts/templates/css/dashboard.css\n// module chunks = 2","import { Component, ViewContainerRef, ChangeDetectorRef } from '@angular/core';\r\nimport { ApiClient, REST } from '../services/app.restClient';\r\nimport { Response } from '@angular/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { Overlay } from 'angular2-modal';\r\nimport { AttributeInformation } from './model/attribute';\r\nimport { ChartService } from '../services/app.chartService';\r\nimport { Factory } from './model/objectFactory';\r\nimport { AbstractChart } from './model/abstract.chart';\r\nimport { PanelOfAttributeValues } from \"./model/charts/panel.attributes.values\";\r\nimport { NgGridConfig, NgGridItemEvent } from '../controls/nggrid/main';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { ResourceGroupHealthStatusChart } from \"./model/charts/resource.group.health.status\";\r\nimport { SeriesBasedChart, DescriptionIdClass } from \"./model/abstract.line.based.chart\";\r\n\r\nimport 'rxjs/add/operator/publishLast';\r\nimport 'rxjs/add/operator/cache';\r\nimport 'rxjs/add/observable/forkJoin';\r\nimport 'rxjs/add/observable/from';\r\nimport 'rxjs/add/observable/of';\r\n\r\nimport 'smartwizard';\r\nimport 'select2';\r\nimport { ScalingRateChart } from \"./model/scaling.rate.chart\";\r\nimport {ChartOfAttributeValues} from \"./model/abstract.chart.attributes.values\";\r\nimport {TwoDimensionalChart} from \"./model/two.dimensional.chart\";\r\nimport {AttributeValueAxis} from \"./model/axis/attribute.value.axis\";\r\nimport {TwoDimensionalChartOfAttributeValues} from \"./model/abstract.2d.chart.attributes.values\";\r\n\r\n@Component({\r\n    moduleId: module.id,\r\n    template: require('./templates/dashboard.html'),\r\n    styles: [ require('./templates/css/dashboard.css') ]\r\n})\r\nexport class Dashboard {\r\n\r\n    private timerId:any = undefined;\r\n\r\n    private components:Observable<string[]>;\r\n    private selectedComponent:string = \"\";\r\n\r\n    private metrics:Observable<AttributeInformation[]>;\r\n    private selectedMetric:AttributeInformation;\r\n\r\n    private instances:Observable<string[]>;\r\n    private selectedInstances:string[] = [];\r\n    private allInstances:string[] = [];\r\n    private selectedAllInstances:boolean = true;\r\n    private selectedRateMetrics:string[] = [];\r\n\r\n    private selectedChartType:string = \"\";\r\n\r\n    private chartName:string = \"newChart\";\r\n\r\n    private _charts:AbstractChart[] = [];\r\n\r\n    private groupName:string = \"\";\r\n\r\n    private intervals:DescriptionIdClass[] = SeriesBasedChart.generateIntervals();\r\n    private rateIntervals:DescriptionIdClass[] = SeriesBasedChart.generateRateIntervals();\r\n    private rateMetrics:DescriptionIdClass[] = ScalingRateChart.prepareRareMetrics();\r\n\r\n    private timeInterval:DescriptionIdClass = undefined;\r\n    private rateInterval:DescriptionIdClass = undefined;\r\n\r\n    private static select2Id:string = \"#instancesSelect\";\r\n    private static chartModalId:string = \"#addChartModal\";\r\n    private static wizardId:string = \"#smartwizardForChart\";\r\n    private static rateMetricSelect2Id:string = \"#rateMetricSelect\";\r\n\r\n    private currentChart:AbstractChart = undefined;\r\n\r\n    private gridConfig: NgGridConfig = <NgGridConfig> {\r\n        'margins': [10],\r\n        'draggable': true,\r\n        'resizable': true,\r\n        'max_cols': 50,\r\n        'max_rows': 0,\r\n        'visible_cols': 0,\r\n        'visible_rows': 0,\r\n        'min_cols': 1,\r\n        'min_rows': 1,\r\n        'min_width': 10,\r\n        'min_height': 10,\r\n        'col_width': 20,\r\n        'row_height': 20,\r\n        'cascade': 'up',\r\n        'fix_to_grid': true  ,\r\n        'auto_style': true,\r\n        'auto_resize': true,\r\n        'maintain_ratio': false,\r\n        'prefer_new': false,\r\n        'zoom_on_drag': false,\r\n        'limit_to_screen': true\r\n    };\r\n\r\n\r\n    constructor(private http: ApiClient,\r\n                overlay: Overlay,\r\n                vcRef: ViewContainerRef,\r\n                private _chartService:ChartService,\r\n                private cd: ChangeDetectorRef,\r\n                private route: ActivatedRoute) {\r\n\r\n        overlay.defaultViewContainer = vcRef;\r\n        this.timeInterval = this.intervals[0];\r\n        this.rateInterval = this.rateIntervals[0];\r\n    }\r\n\r\n    appendChartClicked(type:string) {\r\n        this.selectedChartType = type;\r\n        this.cd.detectChanges(); // draw the modal html\r\n        this.initNewChart();\r\n    }\r\n\r\n    private initNewChart():void {\r\n\r\n        // set all elements to the initial state\r\n        this.selectedAllInstances = true;\r\n        this.allInstances = [];\r\n        this.selectedInstances = [];\r\n        this.selectedMetric = undefined;\r\n        this.selectedComponent = \"\";\r\n        this.timeInterval = this.intervals[0];\r\n        this.selectedRateMetrics = [];\r\n        this.rateInterval = this.rateIntervals[0];\r\n        this.currentChart = undefined;\r\n\r\n        // fill components and selected component\r\n        this.ngOnInit();\r\n\r\n        // init modal components and show modal itself\r\n        this.initModal();\r\n    }\r\n\r\n    modifyChart(chart:AbstractChart):void {\r\n        // make this chart as current (for further saving it, redrawing and switching button to \"save the chart\")\r\n        this.currentChart = chart;\r\n\r\n        // prefill instances from the existing chart\r\n        if (chart instanceof ChartOfAttributeValues && chart.resources != undefined && chart.resources.length > 0) {\r\n            this.selectedAllInstances = false;\r\n            this.selectedInstances = chart.resources;\r\n        } else {\r\n            this.selectedAllInstances = true;\r\n            this.selectedInstances = [];\r\n        }\r\n\r\n        // fill the group (I used property check because some charts have 'group' property defined in different places - fix@todo)\r\n        if (chart['group'] != undefined && chart['group'].length > 0) {\r\n            this.selectedComponent = chart['group'];\r\n        } else {\r\n            this.selectedComponent = \"\";\r\n        }\r\n\r\n        // fill the rate metric and rate intervals from the chart\r\n        if (chart instanceof ScalingRateChart) {\r\n            this.selectedRateMetrics =  chart.metrics;\r\n            this.rateInterval = this.rateIntervals.filter(element => element.additionalId == chart.interval)[0];\r\n        } else {\r\n            this.selectedRateMetrics = [];\r\n            this.rateInterval = this.intervals[0];\r\n        }\r\n\r\n        // fill the time interval if the chart belongs to series based charts\r\n        if (chart instanceof SeriesBasedChart) {\r\n            this.timeInterval = this.rateIntervals.filter(element => element.id == chart.preferences[\"interval\"])[0];\r\n        } else {\r\n            this.timeInterval = this.intervals[0];\r\n        }\r\n\r\n        // fill the selected metric if the chart has metric in one of its axes\r\n        if (chart instanceof TwoDimensionalChartOfAttributeValues) {\r\n            this.selectedMetric = chart.getSourceAttribute();\r\n        } else {\r\n            this.selectedMetric = undefined;\r\n        }\r\n\r\n        // make sure the front end has received the changes\r\n        this.cd.detectChanges();\r\n\r\n        // init modal components and show the modal\r\n        this.initModal();\r\n    }\r\n\r\n    private initModal():void {\r\n        // reset wizard\r\n        $(Dashboard.wizardId).off(\"showStep\");\r\n        $(Dashboard.wizardId).smartWizard(\"reset\");\r\n        this.initWizard();\r\n\r\n        if ($(Dashboard.select2Id).data('select2')) {\r\n            $(Dashboard.select2Id).select2(\"destroy\");\r\n        }\r\n\r\n        // reset rate metric select2 component\r\n        let _thisReference = this;\r\n        if ($(Dashboard.rateMetricSelect2Id).data('select2')) {\r\n            $(Dashboard.rateMetricSelect2Id).select2(\"destroy\");\r\n        }\r\n        $(Dashboard.rateMetricSelect2Id).select2({\r\n            placeholder: \"Select rate metrics from the dropdown\",\r\n            width: '100%',\r\n            allowClear: true\r\n        });\r\n        $(Dashboard.rateMetricSelect2Id).on('change', (e) => {\r\n            _thisReference.onRateMetricSelect($(e.target).val());\r\n        });\r\n\r\n        // open the modal\r\n        $(Dashboard.chartModalId).modal(\"show\");\r\n    }\r\n\r\n    private updateChartName():void {\r\n        this.chartName = this.selectedChartType + \".\" +\r\n            (this.selectedComponent != \"\" ? this.selectedComponent  + \".\" : \"\") +\r\n            ((this.selectedMetric != undefined) ? this.selectedMetric.name : \"\") + \"_\" +\r\n            this._charts.length;\r\n    }\r\n\r\n    ngOnInit():void {\r\n        this.components = this.http.get(REST.GROUPS_WEB_API)\r\n            .map((res:Response) => { return <string[]>res.json()})\r\n            .publishLast().refCount(); // http://stackoverflow.com/questions/36271899/what-is-the-correct-way-to-share-the-result-of-an-angular-2-http-network-call-in\r\n        this.components.subscribe((data:string[]) => {\r\n            if (data && data.length > 0) {\r\n                this.selectedComponent = data[0];\r\n                // load instances as well - if we autoselect a component\r\n                this.instances = this.http.get(REST.GROUPS_RESOURCE_BY_COMPONENT_NAME(this.selectedComponent))\r\n                    .map((res:Response) => { return <string[]>res.json()}).publishLast().refCount();\r\n                this.instances.subscribe((data:string[]) => { this.allInstances = data});\r\n            } else {\r\n                this.selectedComponent = \"\";\r\n                this.instances = this.http.get(REST.GROUPS_RESOURCES)\r\n                    .map((res:Response) => { return <string[]>res.json()}).publishLast().refCount();\r\n                this.instances.subscribe((data:string[]) => { this.allInstances = data});\r\n            }\r\n        });\r\n    }\r\n\r\n    ngAfterViewInit():void {\r\n        let _thisReference:any = this;\r\n        this.route.params\r\n            .map(params => params['groupName'])\r\n            .subscribe((gn) => {\r\n                this.groupName = gn;\r\n                this._charts = this._chartService.getChartsByGroupName(this.groupName);\r\n                this.cd.detectChanges();\r\n                for (let i = 0; i < this._charts.length; i++) {\r\n                    this._charts[i].draw();\r\n                }\r\n                this.timerId = setInterval(function(){\r\n                    _thisReference._chartService.receiveChartDataForGroupName(gn);\r\n                }, 1500);\r\n            });\r\n    }\r\n\r\n    private initWizard():void {\r\n        let _thisReference:any = this;\r\n        let _hidden:number[] =  _thisReference.getHiddenSteps();\r\n\r\n        $(Dashboard.wizardId).smartWizard({\r\n            theme: 'arrows',\r\n            hiddenSteps: _hidden,\r\n            useURLhash: false,\r\n            showStepURLhash: false,\r\n            transitionEffect: 'fade'\r\n        });\r\n\r\n        let _elements:any = $(\".nav.nav-tabs.step-anchor\").find(\"li\");\r\n        for (let i = 0; i < _elements.length; i++) {\r\n            if (_hidden.indexOf(i) >= 0) {\r\n                $(_elements[i]).addClass(\"hidden\");\r\n            } else {\r\n                $(_elements[i]).removeClass(\"hidden\");\r\n            }\r\n        }\r\n\r\n        $(Dashboard.wizardId).on(\"showStep\", function(e, anchorObject, stepNumber, stepDirection) {\r\n            _thisReference.cd.detectChanges();\r\n            if (stepNumber == 3 && _thisReference.isNewChart()) {\r\n                _thisReference.updateChartName();\r\n            } else if (stepNumber == 2 && stepDirection == \"forward\") {\r\n                _thisReference.loadMetricsOnInstancesSelected();\r\n            } else if (stepNumber == 1) {\r\n                if (stepDirection == \"forward\" && _thisReference.isNewChart()) {\r\n                    _thisReference.selectedAllInstances = true;\r\n                    _thisReference.selectedInstances = [];\r\n                }\r\n                _thisReference.triggerShowInstances(_thisReference.selectedAllInstances);\r\n            }\r\n        });\r\n    }\r\n\r\n    onComponentSelect(event:any):void {\r\n        let _endpoint:string = event == \"\" ? REST.GROUPS_RESOURCES : REST.GROUPS_RESOURCE_BY_COMPONENT_NAME(event);\r\n        this.instances = this.http.get(_endpoint)\r\n            .map((res:Response) => { return <string[]>res.json()})\r\n            .publishLast()\r\n            .refCount();\r\n        this.instances.subscribe((data:string[]) => { this.allInstances = data});\r\n    }\r\n\r\n    private onInstanceSelect(event):void {\r\n        this.selectedInstances = event;\r\n    }\r\n\r\n    private onRateMetricSelect(event):void {\r\n        this.selectedRateMetrics = event;\r\n    }\r\n\r\n    private loadMetricsOnInstancesSelected():void {\r\n        $('#overlay').fadeIn();\r\n        let _instanceForSearchMetrics:string = ((this.selectedAllInstances) ? this.allInstances[0] : this.selectedInstances[0]);\r\n        let _obsComponents = this.selectedComponent == \"\" ? Observable.of([]) : this.http.get(REST.CHART_METRICS_BY_COMPONENT(this.selectedComponent))\r\n            .map((res:Response) => {\r\n                let _data:any = res.json();\r\n                let _values:AttributeInformation[] = [];\r\n                for (let i in _data) {\r\n                    _values.push(new AttributeInformation(_data[i]));\r\n                }\r\n                return _values;\r\n            }).catch((res:Response) => Observable.of([])).cache();\r\n\r\n        let _obsInstances = this.http.get(REST.CHART_METRICS_BY_INSTANCE(_instanceForSearchMetrics))\r\n            .map((res:Response) => {\r\n                let _data:any = res.json();\r\n                let _values:AttributeInformation[] = [];\r\n                for (let i in _data) {\r\n                    _values.push(new AttributeInformation(_data[i]));\r\n                }\r\n                return _values;\r\n            }).catch((res:Response) => Observable.of([])).cache();\r\n\r\n        this.metrics = Observable.forkJoin([_obsComponents, _obsInstances])\r\n            .map((_data) => {\r\n                let _returnData:AttributeInformation[] = [];\r\n                // if one of input arrays is empty - return another one\r\n                if (_data[1].length == 0 && _data[0].length > 0) {\r\n                    return _data[0];\r\n                }\r\n                if (_data[0].length == 0 && _data[1].length > 0) {\r\n                    return _data[1];\r\n                }\r\n                for (let i = 0; i < _data[0].length; i++) {\r\n                    let _currentValue:AttributeInformation = _data[0][i];\r\n                    for (let j = 0; j < _data[1].length; j++) {\r\n                        if (_currentValue.name == _data[1][j].name) {\r\n                            if (_currentValue.description == undefined) {\r\n                                _currentValue.description = _data[1][j].description;\r\n                            }\r\n                            if (_currentValue.type == undefined) {\r\n                                _currentValue.type = _data[1][j].type;\r\n                            }\r\n                            if (_currentValue.unitOfMeasurement == undefined) {\r\n                                _currentValue.unitOfMeasurement = _data[1][j].unitOfMeasurement;\r\n                            }\r\n                        }\r\n                    }\r\n                    _returnData.push(_currentValue);\r\n                }\r\n                return _returnData;\r\n            });\r\n\r\n        // set auto selected first metric if the array is not empty\r\n        this.metrics.subscribe((data:AttributeInformation[]) => {\r\n            if (data && data.length > 0) {\r\n                this.selectedMetric = data[0];\r\n            }\r\n        });\r\n        $('#overlay').fadeOut();\r\n    }\r\n\r\n    triggerShowInstances(event:any):void {\r\n        let _select:any = $(Dashboard.select2Id);\r\n        let _thisReference:any = this;\r\n        if (event == false) {\r\n            _select.select2({\r\n                placeholder: \"Select instances from the dropdown\",\r\n                allowClear: true\r\n            });\r\n            _select.on('change', (e) => {\r\n                _thisReference.onInstanceSelect($(e.target).val()); // no native actions on the selec2 componentс\r\n            });\r\n            _select.fadeIn(\"fast\");\r\n        } else {\r\n            if (_select.data('select2')) {\r\n                _select.fadeOut(\"fast\", function(){\r\n                    _select.select2(\"destroy\");\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    addChartToDashboard():void {\r\n        let _instances:string[] = ((this.selectedAllInstances) ? this.allInstances : this.selectedInstances);\r\n        let chart:AbstractChart = Factory.create2dChart(this.selectedChartType, this.chartName, this.groupName, this.selectedComponent,\r\n            _instances, this.selectedMetric);\r\n\r\n        // if this is a line chart - add time interval\r\n        if (chart instanceof SeriesBasedChart) {\r\n            chart.preferences[\"interval\"] = this.timeInterval.id;\r\n        }\r\n        if (chart instanceof ScalingRateChart) {\r\n            chart.metrics = this.selectedRateMetrics;\r\n            chart.interval = this.rateInterval.additionalId;\r\n        }\r\n        this._chartService.newChart(chart);\r\n        this._charts = this._chartService.getChartsByGroupName(this.groupName);\r\n        $(Dashboard.chartModalId).modal(\"hide\");\r\n        this.cd.detectChanges();\r\n        let _thisReference:any = this;\r\n        setTimeout(function() {\r\n            chart.draw();\r\n            _thisReference._chartService.saveDashboard();\r\n        }, 400);\r\n    }\r\n\r\n    saveChart():void {\r\n        this._chartService.modifyChart(this.currentChart);\r\n        this.cd.detectChanges();\r\n        this.currentChart.draw();\r\n    }\r\n\r\n    onChangeStop(index: number, event: NgGridItemEvent): void {\r\n        if (index != undefined && this._charts[index] != undefined) {\r\n            this._charts[index].preferences[\"gridcfg\"] = event;\r\n            this._chartService.saveDashboard();\r\n        }\r\n    }\r\n\r\n    removeChart(chartName:string):void {\r\n        this._chartService.removeChart(chartName);\r\n        this._charts = this._chartService.getChartsByGroupName(this.groupName);\r\n    }\r\n\r\n    ngOnDestroy():void {\r\n        clearInterval(this.timerId);\r\n    }\r\n\r\n    isInstanceSelected(instance:string):boolean {\r\n        return (this.selectedInstances.indexOf(instance) >= 0);\r\n    }\r\n\r\n    toggleDrawingChart(chart:AbstractChart):void {\r\n        chart.toggleUpdate();\r\n        $('#toggleDraw' + chart.id + ' i').attr('class', chart.updateStopped ? 'fa fa-play-circle-o' : 'fa fa-pause-circle-o');\r\n    }\r\n\r\n    isSvgType(chart:AbstractChart):boolean {\r\n        return chart instanceof SeriesBasedChart || chart instanceof ScalingRateChart;\r\n    }\r\n\r\n    isDivType(chart:AbstractChart):boolean {\r\n        return chart instanceof PanelOfAttributeValues || chart instanceof ResourceGroupHealthStatusChart;\r\n    }\r\n\r\n    isCanvasType(chart:AbstractChart):boolean {\r\n        return !this.isDivType(chart) && !this.isSvgType(chart);\r\n    }\r\n\r\n    isRateMetricSelected(metric:string):boolean {\r\n        return this.selectedRateMetrics.find(value => (value == metric)) != undefined;\r\n    }\r\n\r\n    isNewChart():boolean {\r\n        return this.currentChart == undefined;\r\n    }\r\n\r\n    private getHiddenSteps():number[] {\r\n        switch (this.selectedChartType) {\r\n            case \"statuses\":\r\n            case \"resources\":\r\n                return [1,2];\r\n            case \"scaleIn\":\r\n            case \"scaleOut\":\r\n                return [1];\r\n            default:\r\n                return [];\r\n        }\r\n    }\r\n}\r\n\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/charts/charts.dashboard.ts","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  template: require('./templates/empty.html'),\r\n})\r\nexport class EmptyDashboard {}\r\n\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/charts/charts.empty.dashboard.ts","import { NgModule }      from '@angular/core';\r\nimport { CommonModule }  from '@angular/common';\r\nimport { ApiClient }     from '../services/app.restClient';\r\nimport { TooltipModule } from 'ng2-tooltip';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { HttpModule } from '@angular/http';\r\nimport { PanelComponent } from '../controls/panel/panel.component';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { ModalModule } from 'angular2-modal';\r\nimport { VexModalModule } from 'angular2-modal/plugins/vex';\r\nimport { NgGridModule } from '../controls/nggrid/modules/NgGrid.module';\r\nimport { Dashboard } from './charts.dashboard';\r\nimport { CommonSnampUtilsModule } from '../app.module';\r\n\r\nimport { TemplateView } from './charts.template';\r\nimport { EmptyDashboard } from './charts.empty.dashboard';\r\n\r\nconst PROVIDERS:any =  [\r\n  ApiClient\r\n];\r\n\r\n@NgModule({\r\n   imports: [\r\n      CommonModule,\r\n      TooltipModule,\r\n      FormsModule,\r\n      ModalModule.forRoot(),\r\n      VexModalModule,\r\n      HttpModule,\r\n      CommonSnampUtilsModule,\r\n      NgGridModule,\r\n      RouterModule.forChild([{\r\n          path: '', component: TemplateView, children: [\r\n              { path: '', component: EmptyDashboard },\r\n              { path: ':groupName', component: Dashboard }\r\n          ]\r\n       }])\r\n    ],\r\n    declarations: [ Dashboard, EmptyDashboard, TemplateView ],\r\n    providers:    PROVIDERS\r\n})\r\nexport class DashboardModule {}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/charts/charts.modules.ts","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  template: require('./templates/template.html'),\r\n})\r\nexport class TemplateView {}\r\n\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/charts/charts.template.ts","\n        var result = require(\"!!../../../../../node_modules/css-loader/index.js!./dashboard.css\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/charts/templates/css/dashboard.css\n// module id = ./src/app/charts/templates/css/dashboard.css\n// module chunks = 2","module.exports = \"<!-- Modal for entity appending -->\\r\\n<div class=\\\"modal fade\\\" id=\\\"addChartModal\\\" role=\\\"dialog\\\" aria-labelledby=\\\"addChartLabel\\\" *ngIf=\\\"selectedChartType != ''\\\">\\r\\n  <div class=\\\"modal-dialog modal-xlg modal-lg\\\" role=\\\"document\\\">\\r\\n    <div class=\\\"modal-content\\\">\\r\\n      <div class=\\\"modal-header\\\">\\r\\n        <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\" aria-label=\\\"Close\\\"><span aria-hidden=\\\"true\\\">&times;</span></button>\\r\\n        <h4 class=\\\"modal-title leftAlign\\\" id=\\\"addChartLabel\\\">Visualization wizard</h4>\\r\\n      </div>\\r\\n      <br/>\\r\\n      <div class=\\\"modal-body\\\">\\r\\n        <div id=\\\"smartwizardForChart\\\" style=\\\"height: 95%\\\">\\r\\n          <ul>\\r\\n            <li>\\r\\n              <a [attr.href]=\\\"'#component'\\\">\\r\\n                Group<br />\\r\\n                <small>Select group</small>\\r\\n              </a>\\r\\n            </li>\\r\\n            <li>\\r\\n              <a [attr.href]=\\\"'#instances'\\\">\\r\\n                Resources<br />\\r\\n                <small>Mark resources</small>\\r\\n              </a>\\r\\n            </li>\\r\\n            <li>\\r\\n              <a [attr.href]=\\\"'#metric'\\\">\\r\\n                Metric<br />\\r\\n                <small>Choose metric</small>\\r\\n              </a>\\r\\n            </li>\\r\\n            <li>\\r\\n              <a [attr.href]=\\\"'#save'\\\">\\r\\n                Save<br />\\r\\n                <small>Add to dashboard</small>\\r\\n              </a>\\r\\n            </li>\\r\\n          </ul>\\r\\n\\r\\n          <div style=\\\"height:100%\\\">\\r\\n            <div id=\\\"component\\\" class=\\\"row\\\" style=\\\"margin-top: 100px;\\\">\\r\\n              <div class=\\\"item form-group\\\">\\r\\n                <label\\r\\n                        class=\\\"control-label col-md-3 col-sm-3 col-xs-12\\\"\\r\\n                        for=\\\"componentSelect\\\"\\r\\n                        style=\\\"margin-top: 7px;\\\">\\r\\n                  Group\\r\\n                </label>\\r\\n                <div class=\\\"col-md-6 col-sm-6 col-xs-12\\\">\\r\\n                  <select class=\\\"form-control\\\" [(ngModel)]=\\\"selectedComponent\\\" (ngModelChange)=\\\"onComponentSelect($event)\\\" id=\\\"componentSelect\\\">\\r\\n                    <option value=\\\"\\\" *ngIf=\\\"selectedChartType != 'statuses' && selectedChartType != 'scaleIn' && selectedChartType != 'scaleOut'\\\">NO GROUP</option>\\r\\n                    <option *ngFor=\\\"let component of components | async\\\" [ngValue]=\\\"component\\\">{{component}}</option>\\r\\n                  </select>\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div id=\\\"instances\\\" class=\\\"row\\\" style=\\\"margin-top: 100px;\\\">\\r\\n              <div class=\\\"col-md-12 col-sm-12 col-xs-12 text-center\\\" *ngIf=\\\"(instances | async) == undefined\\\">\\r\\n                <strong>No resources are found - cannot proceed</strong>\\r\\n              </div>\\r\\n\\r\\n              <div class=\\\"item form-group\\\" *ngIf=\\\"instances | async\\\">\\r\\n                <label\\r\\n                        class=\\\"control-label col-md-3 col-sm-3 col-xs-12\\\"\\r\\n                        for=\\\"instancesSelect\\\"\\r\\n                        style=\\\"margin-top: 7px;\\\">\\r\\n                  Resources\\r\\n                </label>\\r\\n\\r\\n                <div class=\\\"col-md-6 col-sm-6 col-xs-12\\\" >\\r\\n                  Select all\\r\\n                  <ui-switch\\r\\n                          [(ngModel)]=\\\"selectedAllInstances\\\"\\r\\n                          (change)=\\\"triggerShowInstances($event)\\\"\\r\\n                          [size]=\\\"'small'\\\">\\r\\n                  </ui-switch>\\r\\n                  <br/>\\r\\n                  <select class=\\\"select2_multiple form-control\\\" id=\\\"instancesSelect\\\" style=\\\"display: none;\\\" multiple=\\\"multiple\\\">\\r\\n                    <option *ngFor=\\\"let instance of instances | async\\\" [attr.selected]=\\\"isInstanceSelected(instance) ? true : null\\\">{{instance}}</option>\\r\\n                  </select>\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div id=\\\"metric\\\" class=\\\"row\\\" style=\\\"margin-top: 10px;\\\">\\r\\n              <div *ngIf=\\\"selectedChartType != 'scaleIn' && selectedChartType != 'scaleOut'\\\">\\r\\n                <div class=\\\"col-md-12 col-sm-12 col-xs-12 text-center\\\" style=\\\"margin-top:100px\\\" *ngIf=\\\"(metrics | async) == undefined || (metrics | async).length == 0\\\">\\r\\n                  <strong>No metrics are found - cannot proceed</strong>\\r\\n                </div>\\r\\n                <div  *ngIf=\\\"(metrics | async) != undefined && (metrics | async).length > 0\\\">\\r\\n                <div class=\\\"bs-example\\\" data-example-id=\\\"simple-jumbotron\\\" *ngIf=\\\"selectedMetric != undefined\\\">\\r\\n                  <div class=\\\"jumbotron\\\">\\r\\n                    <p>\\r\\n                      <strong>Name: </strong>{{selectedMetric.name}}\\r\\n                    </p>\\r\\n                    <p *ngIf=\\\"selectedMetric.type != undefined && selectedMetric.type.length > 0\\\">\\r\\n                      <strong>Type: </strong>{{selectedMetric.type}}\\r\\n                    </p>\\r\\n                    <p *ngIf=\\\"selectedMetric.unitOfMeasurement != undefined && selectedMetric.unitOfMeasurement.length > 0\\\">\\r\\n                      <strong>Unit of measurement: </strong>{{selectedMetric.unitOfMeasurement}}\\r\\n                    </p>\\r\\n                    <p *ngIf=\\\"selectedMetric.description != undefined && selectedMetric.description.length > 0\\\">\\r\\n                      <strong>Description: </strong>{{selectedMetric.description}}\\r\\n                    </p>\\r\\n                  </div>\\r\\n                </div>\\r\\n                <div class=\\\"item form-group\\\">\\r\\n                  <label\\r\\n                          class=\\\"control-label col-md-3 col-sm-3 col-xs-12\\\"\\r\\n                          for=\\\"metricSelect\\\"\\r\\n                          style=\\\"margin-top: 7px;\\\">\\r\\n                    Select metric <span class=\\\"required\\\">*</span>\\r\\n                  </label>\\r\\n                  <div class=\\\"col-md-6 col-sm-6 col-xs-12\\\">\\r\\n                    <select class=\\\"form-control\\\" [(ngModel)]=\\\"selectedMetric\\\" id=\\\"metricSelect\\\">\\r\\n                      <option [tooltip]=\\\"metric.type\\\" *ngFor=\\\"let metric of metrics | async\\\" [ngValue]=\\\"metric\\\">{{metric.name}}</option>\\r\\n                    </select>\\r\\n                  </div>\\r\\n                </div>\\r\\n              </div>\\r\\n              </div>\\r\\n              <div *ngIf=\\\"selectedChartType == 'scaleIn' || selectedChartType == 'scaleOut'\\\" style=\\\"margin-top:100px\\\">\\r\\n                <div class=\\\"item form-group\\\">\\r\\n                  <label\\r\\n                          class=\\\"control-label col-md-3 col-sm-3 col-xs-12\\\"\\r\\n                          for=\\\"rateMetricSelect\\\"\\r\\n                          style=\\\"margin-top: 7px;\\\">\\r\\n                    Select rate metrics (multiple selection) <span class=\\\"required\\\">*</span>\\r\\n                  </label>\\r\\n                  <div class=\\\"col-md-6 col-sm-6 col-xs-12\\\">\\r\\n                    <select class=\\\"select2_multiple form-control\\\" id=\\\"rateMetricSelect\\\"  multiple=\\\"multiple\\\">\\r\\n                      <option *ngFor=\\\"let rateMetric of rateMetrics\\\" [attr.selected]=\\\"isRateMetricSelected(rateMetric.id) ? true : null\\\">{{rateMetric.id}}</option>\\r\\n                    </select>\\r\\n                  </div>\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div id=\\\"save\\\" style=\\\"margin-top: 40px;\\\">\\r\\n\\r\\n              <div class=\\\"row\\\" *ngIf=\\\"selectedChartType == 'line' || selectedChartType == 'resources' || selectedChartType == 'scaleIn' || selectedChartType == 'scaleOut'\\\">\\r\\n                <div class=\\\"item form-group col-md-offset-3\\\">\\r\\n                  <label\\r\\n                          class=\\\"control-label col-md-3 col-sm-3 col-xs-12\\\"\\r\\n                          for=\\\"lineChartIntervalSelect\\\"\\r\\n                          style=\\\"margin-top: 7px;\\\">\\r\\n                    Select time interval <span class=\\\"required\\\">*</span>\\r\\n                  </label>\\r\\n                  <div class=\\\"col-md-6 col-sm-6 col-xs-12\\\">\\r\\n                    <select class=\\\"form-control\\\" [(ngModel)]=\\\"timeInterval\\\" id=\\\"lineChartIntervalSelect\\\">\\r\\n                      <option *ngFor=\\\"let interval of intervals\\\" [ngValue]=\\\"interval\\\">{{interval.description}}</option>\\r\\n                    </select>\\r\\n                  </div>\\r\\n                </div>\\r\\n              </div>\\r\\n\\r\\n              <div class=\\\"row\\\" *ngIf=\\\"selectedChartType == 'scaleIn' || selectedChartType == 'scaleOut'\\\" style=\\\"margin-top: 15px;\\\">\\r\\n                <div class=\\\"item form-group col-md-offset-3\\\" >\\r\\n                  <label\\r\\n                          class=\\\"control-label col-md-3 col-sm-3 col-xs-12\\\"\\r\\n                          for=\\\"rateIntervalSelect\\\"\\r\\n                          style=\\\"margin-top: 7px;\\\">\\r\\n                    Select rate interval <span class=\\\"required\\\">*</span>\\r\\n                  </label>\\r\\n                  <div class=\\\"col-md-6 col-sm-6 col-xs-12\\\">\\r\\n                    <select class=\\\"form-control\\\" [(ngModel)]=\\\"rateInterval\\\" id=\\\"rateIntervalSelect\\\">\\r\\n                      <option *ngFor=\\\"let interval of rateIntervals\\\" [ngValue]=\\\"interval\\\">{{interval.description}}</option>\\r\\n                    </select>\\r\\n                  </div>\\r\\n                </div>\\r\\n              </div>\\r\\n\\r\\n              <br/>\\r\\n\\r\\n              <div class=\\\"row\\\">\\r\\n                <div class=\\\"item form-group col-md-offset-3\\\">\\r\\n                  <label\\r\\n                          class=\\\"control-label col-md-3 col-sm-3 col-xs-12\\\"\\r\\n                          style=\\\"margin-top: 7px;\\\"\\r\\n                          for=\\\"chartNameInput\\\">\\r\\n                    Chart name <span class=\\\"required\\\">*</span>\\r\\n                  </label>\\r\\n                  <div class=\\\"col-md-6 col-sm-6 col-xs-12\\\">\\r\\n                    <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"chartNameInput\\\" placeholder=\\\"Chart name\\\" [(ngModel)]=\\\"chartName\\\" [disabled]=\\\"!isNewChart()\\\">\\r\\n                  </div>\\r\\n                </div>\\r\\n              </div>\\r\\n\\r\\n              <div class=\\\"row\\\" style=\\\"margin-top: 15px\\\">\\r\\n                <button\\r\\n                        *ngIf=\\\"isNewChart()\\\"\\r\\n                        type=\\\"button\\\"\\r\\n                        class=\\\"btn btn-primary col-md-4 col-md-offset-4\\\"\\r\\n                        (click)=\\\"addChartToDashboard()\\\">\\r\\n                  Append to dashboard\\r\\n                </button>\\r\\n\\r\\n                <button\\r\\n                        *ngIf=\\\"!isNewChart()\\\"\\r\\n                        type=\\\"button\\\"\\r\\n                        class=\\\"btn btn-primary col-md-4 col-md-offset-4\\\"\\r\\n                        (click)=\\\"saveChart()\\\">\\r\\n                  Save the chart\\r\\n                </button>\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\\r\\n<img src=\\\"/snamp/assets/img/add.png\\\" *ngIf=\\\"!_charts || _charts.length == 0\\\" class=\\\"chartMenuImage\\\"/>\\r\\n<ul id=\\\"chartMenu\\\">\\r\\n  <li [tooltip]=\\\"'Pie chart'\\\" (click)=\\\"appendChartClicked('doughnut')\\\"><i class=\\\"fa fa-pie-chart\\\" aria-hidden=\\\"true\\\"></i></li>\\r\\n  <li [tooltip]=\\\"'Horizontal bar chart'\\\" (click)=\\\"appendChartClicked('horizontalBar')\\\"><i class=\\\"fa fa-align-left \\\" aria-hidden=\\\"true\\\"></i></li>\\r\\n  <li [tooltip]=\\\"'Vertical bar chart'\\\" (click)=\\\"appendChartClicked('bar')\\\"><i class=\\\"fa fa-bar-chart\\\" aria-hidden=\\\"true\\\"></i></li>\\r\\n  <li [tooltip]=\\\"'Simple line chart'\\\" (click)=\\\"appendChartClicked('line')\\\"><i class=\\\"fa fa-line-chart\\\" aria-hidden=\\\"true\\\"></i></li>\\r\\n  <li [tooltip]=\\\"'Panel with values'\\\" (click)=\\\"appendChartClicked('panel')\\\"><i class=\\\"fa fa-columns\\\" aria-hidden=\\\"true\\\"></i></li>\\r\\n  <li [tooltip]=\\\"'Resource group health status'\\\" (click)=\\\"appendChartClicked('statuses')\\\"><i class=\\\"fa fa-lightbulb-o\\\" aria-hidden=\\\"true\\\"></i></li>\\r\\n  <li [tooltip]=\\\"'Resources count in a group'\\\" (click)=\\\"appendChartClicked('resources')\\\"><i class=\\\"fa fa-sitemap\\\" aria-hidden=\\\"true\\\"></i></li>\\r\\n  <li [tooltip]=\\\"'Rate of downscale'\\\" (click)=\\\"appendChartClicked('scaleIn')\\\"><i class=\\\"fa fa-arrow-circle-down\\\" aria-hidden=\\\"true\\\"></i></li>\\r\\n  <li [tooltip]=\\\"'Rate of upscale'\\\" (click)=\\\"appendChartClicked('scaleOut')\\\"><i class=\\\"fa fa-arrow-circle-up\\\" aria-hidden=\\\"true\\\"></i></li>\\r\\n</ul>\\r\\n\\r\\n<div class=\\\"right_col\\\" role=\\\"main\\\" style=\\\"min-height: 949px;\\\">\\r\\n  <div class=\\\"\\\">\\r\\n    <div class=\\\"page-title\\\">\\r\\n      <div class=\\\"title_left\\\">\\r\\n        <h3>{{groupName}}</h3>\\r\\n      </div>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"clearfix\\\"></div>\\r\\n\\r\\n    <div class=\\\"row\\\" style=\\\"margin-top: 30px\\\">\\r\\n\\r\\n      <div class='container col-md-12' [ngGrid]=\\\"gridConfig\\\"  style=\\\"min-height: 900px; width: calc(100% - 45px) !important;\\\">\\r\\n\\r\\n          <div class=\\\"x_panel\\\"\\r\\n               *ngFor=\\\"let chart of _charts; let i = index\\\"\\r\\n               [(ngGridItem)]=\\\"chart.preferences['gridcfg']\\\"\\r\\n               (onChangeStop)=\\\"onChangeStop(i, $event)\\\"\\r\\n               [attr.chartPanelId]=\\\"chart.id\\\">\\r\\n\\r\\n              <div class=\\\"x_title title handle\\\">\\r\\n                <h2>{{chart.name}}</h2>\\r\\n                <h5 *ngIf=\\\"chart.updateStopped\\\">(Paused at {{chart.pausedTime | date:'dd/MM/y HH:mm:ss'}})</h5>\\r\\n                <ul class=\\\"nav navbar-right panel_toolbox\\\">\\r\\n                  <li>\\r\\n                    <a (click)=\\\"modifyChart(chart)\\\"><i class=\\\"fa fa-wrench\\\"></i></a>\\r\\n                    <a [attr.id]=\\\"'toggleDraw' + chart.id\\\" class=\\\"toggle-link\\\" (click)=\\\"toggleDrawingChart(chart)\\\"><i class=\\\"fa fa-pause-circle-o\\\"></i></a>\\r\\n                    <a class=\\\"close-link\\\" (click)=\\\"removeChart(chart.name)\\\"><i class=\\\"fa fa-close\\\"></i></a>\\r\\n                  </li>\\r\\n                </ul>\\r\\n                <div class=\\\"clearfix\\\"></div>\\r\\n              </div>\\r\\n              <div *ngIf=\\\"isSvgType(chart)\\\"\\r\\n                      class=\\\"x_content\\\"\\r\\n                      style=\\\"position: relative; width: 100%; height: calc(100% - 10px) !important;\\\">\\r\\n                <svg [attr.id]=\\\"chart.id\\\"></svg>\\r\\n              </div>\\r\\n              <div *ngIf=\\\"isCanvasType(chart)\\\"\\r\\n                   class=\\\"x_content\\\"\\r\\n                   style=\\\"position: relative; width: 100%; height: calc(100% - 30px) !important;\\\">\\r\\n                <canvas [attr.id]=\\\"chart.id\\\" height=\\\"80\\\"></canvas>\\r\\n              </div>\\r\\n              <div *ngIf=\\\"isDivType(chart)\\\"\\r\\n                 class=\\\"x_content\\\"\\r\\n                 style=\\\"position: relative; width: 100%; height: calc(100% - 30px) !important;\\\">\\r\\n                  <div [attr.id]=\\\"chart.id\\\" class=\\\"tableWrapper\\\"></div>\\r\\n               </div>\\r\\n            </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/charts/templates/dashboard.html\n// module id = ./src/app/charts/templates/dashboard.html\n// module chunks = 2","module.exports = \"<h5>There are no active dashboards - you can create one with the corresponding menu item</h5>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/charts/templates/empty.html\n// module id = ./src/app/charts/templates/empty.html\n// module chunks = 2","module.exports = \"<router-outlet></router-outlet>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/charts/templates/template.html\n// module id = ./src/app/charts/templates/template.html\n// module chunks = 2","import { NgGrid } from '../directives/NgGrid';\r\nimport { NgGridItem } from '../directives/NgGridItem';\r\nimport { NgGridItemPosition, NgGridItemSize } from '../interfaces/INgGrid';\r\nimport { Component, Directive, ElementRef, Renderer, EventEmitter, Host, ViewEncapsulation, Type, ComponentRef, KeyValueDiffer, KeyValueDiffers, OnInit, OnDestroy, DoCheck, ViewContainerRef, Output } from '@angular/core';\r\n\r\n@Component({\r\n\tselector: 'ng-grid-placeholder',\r\n\ttemplate: ''\r\n})\r\nexport class NgGridPlaceholder implements OnInit {\r\n\tprivate _size: NgGridItemSize;\r\n\tprivate _position: NgGridItemPosition;\r\n\tprivate _ngGrid: NgGrid;\r\n\tprivate _cascadeMode: string;\r\n\r\n\tconstructor(private _ngEl: ElementRef, private _renderer: Renderer) { }\r\n\r\n\tpublic registerGrid(ngGrid: NgGrid) {\r\n\t\tthis._ngGrid = ngGrid;\r\n\t}\r\n\r\n\tpublic ngOnInit(): void {\r\n\t\tthis._renderer.setElementClass(this._ngEl.nativeElement, 'grid-placeholder', true);\r\n\t\tif (this._ngGrid.autoStyle) this._renderer.setElementStyle(this._ngEl.nativeElement, 'position', 'absolute');\r\n\t}\r\n\r\n\tpublic setSize(newSize: NgGridItemSize): void {\r\n\t\tthis._size = newSize;\r\n\t\tthis._recalculateDimensions();\r\n\t}\r\n\r\n\tpublic setGridPosition(newPosition: NgGridItemPosition): void {\r\n\t\tthis._position = newPosition;\r\n\t\tthis._recalculatePosition();\r\n\t}\r\n\r\n\tpublic setCascadeMode(cascade: string): void {\r\n\t\tthis._cascadeMode = cascade;\r\n\t\tswitch (cascade) {\r\n\t\t\tcase 'up':\r\n\t\t\tcase 'left':\r\n\t\t\tdefault:\r\n\t\t\t\tthis._renderer.setElementStyle(this._ngEl.nativeElement, 'left', '0px');\r\n\t\t\t\tthis._renderer.setElementStyle(this._ngEl.nativeElement, 'top', '0px');\r\n\t\t\t\tthis._renderer.setElementStyle(this._ngEl.nativeElement, 'right', null);\r\n\t\t\t\tthis._renderer.setElementStyle(this._ngEl.nativeElement, 'bottom', null);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'right':\r\n\t\t\t\tthis._renderer.setElementStyle(this._ngEl.nativeElement, 'right', '0px');\r\n\t\t\t\tthis._renderer.setElementStyle(this._ngEl.nativeElement, 'top', '0px');\r\n\t\t\t\tthis._renderer.setElementStyle(this._ngEl.nativeElement, 'left', null);\r\n\t\t\t\tthis._renderer.setElementStyle(this._ngEl.nativeElement, 'bottom', null);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'down':\r\n\t\t\t\tthis._renderer.setElementStyle(this._ngEl.nativeElement, 'left', '0px');\r\n\t\t\t\tthis._renderer.setElementStyle(this._ngEl.nativeElement, 'bottom', '0px');\r\n\t\t\t\tthis._renderer.setElementStyle(this._ngEl.nativeElement, 'right', null);\r\n\t\t\t\tthis._renderer.setElementStyle(this._ngEl.nativeElement, 'top', null);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\t//\tPrivate methods\r\n\tprivate _setDimensions(w: number, h: number): void {\r\n\t\tthis._renderer.setElementStyle(this._ngEl.nativeElement, 'width', w + 'px');\r\n\t\tthis._renderer.setElementStyle(this._ngEl.nativeElement, 'height', h + 'px');\r\n\t}\r\n\r\n\tprivate _setPosition(x: number, y: number): void {\r\n\t\tswitch (this._cascadeMode) {\r\n\t\t\tcase 'up':\r\n\t\t\tcase 'left':\r\n\t\t\tdefault:\r\n\t\t\t\tthis._renderer.setElementStyle(this._ngEl.nativeElement, 'transform', 'translate(' + x + 'px, ' + y + 'px)');\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'right':\r\n\t\t\t\tthis._renderer.setElementStyle(this._ngEl.nativeElement, 'transform', 'translate(' + -x + 'px, ' + y + 'px)');\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'down':\r\n\t\t\t\tthis._renderer.setElementStyle(this._ngEl.nativeElement, 'transform', 'translate(' + x + 'px, ' + -y + 'px)');\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate _recalculatePosition(): void {\r\n\t\tconst x: number = (this._ngGrid.colWidth + this._ngGrid.marginLeft + this._ngGrid.marginRight) * (this._position.col - 1) + this._ngGrid.marginLeft;\r\n\t\tconst y: number = (this._ngGrid.rowHeight + this._ngGrid.marginTop + this._ngGrid.marginBottom) * (this._position.row - 1) + this._ngGrid.marginTop;\r\n\t\tthis._setPosition(x, y);\r\n\t}\r\n\r\n\tprivate _recalculateDimensions(): void {\r\n\t\tconst w: number = (this._ngGrid.colWidth * this._size.x) + ((this._ngGrid.marginLeft + this._ngGrid.marginRight) * (this._size.x - 1));\r\n\t\tconst h: number = (this._ngGrid.rowHeight * this._size.y) + ((this._ngGrid.marginTop + this._ngGrid.marginBottom) * (this._size.y - 1));\r\n\t\tthis._setDimensions(w, h);\r\n\t}\r\n}\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/controls/nggrid/components/NgGridPlaceholder.ts","import { Component, Directive, ElementRef, Renderer, EventEmitter, ComponentFactoryResolver, Host, ViewEncapsulation, Type, ComponentRef, KeyValueDiffer, KeyValueDiffers, OnInit, OnDestroy, DoCheck, ViewContainerRef, Output } from '@angular/core';\r\nimport { NgGridConfig, NgGridItemEvent, NgGridItemPosition, NgGridItemSize, NgGridRawPosition, NgGridItemDimensions } from '../interfaces/INgGrid';\r\nimport { NgGridItem } from './NgGridItem';\r\nimport { NgGridPlaceholder } from '../components/NgGridPlaceholder';\r\n\r\n@Directive({\r\n\tselector: '[ngGrid]',\r\n\tinputs: ['config: ngGrid'],\r\n\thost: {\r\n\t\t'(mousedown)': 'mouseDownEventHandler($event)',\r\n\t\t'(mousemove)': 'mouseMoveEventHandler($event)',\r\n\t\t'(mouseup)': 'mouseUpEventHandler($event)',\r\n\t\t'(touchstart)': 'mouseDownEventHandler($event)',\r\n\t\t'(touchmove)': 'mouseMoveEventHandler($event)',\r\n\t\t'(touchend)': 'mouseUpEventHandler($event)',\r\n\t\t'(window:resize)': 'resizeEventHandler($event)',\r\n\t\t'(document:mousemove)': 'mouseMoveEventHandler($event)',\r\n\t\t'(document:mouseup)': 'mouseUpEventHandler($event)'\r\n\t},\r\n})\r\nexport class NgGrid implements OnInit, DoCheck, OnDestroy {\r\n\t//\tEvent Emitters\r\n\t@Output() public onDragStart: EventEmitter<NgGridItem> = new EventEmitter<NgGridItem>();\r\n\t@Output() public onDrag: EventEmitter<NgGridItem> = new EventEmitter<NgGridItem>();\r\n\t@Output() public onDragStop: EventEmitter<NgGridItem> = new EventEmitter<NgGridItem>();\r\n\t@Output() public onResizeStart: EventEmitter<NgGridItem> = new EventEmitter<NgGridItem>();\r\n\t@Output() public onResize: EventEmitter<NgGridItem> = new EventEmitter<NgGridItem>();\r\n\t@Output() public onResizeStop: EventEmitter<NgGridItem> = new EventEmitter<NgGridItem>();\r\n\t@Output() public onItemChange: EventEmitter<Array<NgGridItemEvent>> = new EventEmitter<Array<NgGridItemEvent>>();\r\n\r\n\t//\tPublic variables\r\n\tpublic colWidth: number = 250;\r\n\tpublic rowHeight: number = 250;\r\n\tpublic minCols: number = 1;\r\n\tpublic minRows: number = 1;\r\n\tpublic marginTop: number = 10;\r\n\tpublic marginRight: number = 10;\r\n\tpublic marginBottom: number = 10;\r\n\tpublic marginLeft: number = 10;\r\n\tpublic isDragging: boolean = false;\r\n\tpublic isResizing: boolean = false;\r\n\tpublic autoStyle: boolean = true;\r\n\tpublic resizeEnable: boolean = true;\r\n\tpublic dragEnable: boolean = true;\r\n\tpublic cascade: string = 'up';\r\n\tpublic minWidth: number = 100;\r\n\tpublic minHeight: number = 100;\r\n\r\n\t//\tPrivate variables\r\n\tprivate _items: Array<NgGridItem> = [];\r\n\tprivate _draggingItem: NgGridItem = null;\r\n\tprivate _resizingItem: NgGridItem = null;\r\n\tprivate _resizeDirection: string = null;\r\n\tprivate _itemGrid: { [key: number]: { [key: number]: NgGridItem } } = {};//{ 1: { 1: null } };\r\n\tprivate _containerWidth: number;\r\n\tprivate _containerHeight: number;\r\n\tprivate _maxCols: number = 0;\r\n\tprivate _maxRows: number = 0;\r\n\tprivate _visibleCols: number = 0;\r\n\tprivate _visibleRows: number = 0;\r\n\tprivate _setWidth: number = 250;\r\n\tprivate _setHeight: number = 250;\r\n\tprivate _posOffset: NgGridRawPosition = null;\r\n\tprivate _adding: boolean = false;\r\n\tprivate _placeholderRef: ComponentRef<NgGridPlaceholder> = null;\r\n\tprivate _fixToGrid: boolean = false;\r\n\tprivate _autoResize: boolean = false;\r\n\tprivate _differ: KeyValueDiffer;\r\n\tprivate _destroyed: boolean = false;\r\n\tprivate _maintainRatio: boolean = false;\r\n\tprivate _aspectRatio: number;\r\n\tprivate _preferNew: boolean = false;\r\n\tprivate _zoomOnDrag: boolean = false;\r\n\tprivate _limitToScreen: boolean = false;\r\n\tprivate _curMaxRow: number = 0;\r\n\tprivate _curMaxCol: number = 0;\r\n\tprivate _dragReady: boolean = false;\r\n\tprivate _resizeReady: boolean = false;\r\n\r\n\t//\tDefault config\r\n\tprivate static CONST_DEFAULT_CONFIG: NgGridConfig = {\r\n\t\tmargins: [10],\r\n\t\tdraggable: true,\r\n\t\tresizable: true,\r\n\t\tmax_cols: 0,\r\n\t\tmax_rows: 0,\r\n\t\tvisible_cols: 0,\r\n\t\tvisible_rows: 0,\r\n\t\tcol_width: 250,\r\n\t\trow_height: 250,\r\n\t\tcascade: 'up',\r\n\t\tmin_width: 100,\r\n\t\tmin_height: 100,\r\n\t\tfix_to_grid: false,\r\n\t\tauto_style: true,\r\n\t\tauto_resize: false,\r\n\t\tmaintain_ratio: false,\r\n\t\tprefer_new: false,\r\n\t\tzoom_on_drag: false\r\n\t};\r\n\tprivate _config = NgGrid.CONST_DEFAULT_CONFIG;\r\n\r\n\t//\t[ng-grid] attribute handler\r\n\tset config(v: NgGridConfig) {\r\n\t\tthis.setConfig(v);\r\n\r\n\t\tif (this._differ == null && v != null) {\r\n\t\t\tthis._differ = this._differs.find(this._config).create(null);\r\n\t\t}\r\n\t}\r\n\r\n\t//\tConstructor\r\n\tconstructor(private _differs: KeyValueDiffers,\r\n\t\t\t\tprivate _ngEl: ElementRef,\r\n\t\t\t\tprivate _renderer: Renderer,\r\n\t\t\t\tprivate componentFactoryResolver: ComponentFactoryResolver,\r\n\t\t\t\tprivate _containerRef: ViewContainerRef) {}\r\n\r\n\t//\tPublic methods\r\n\tpublic ngOnInit(): void {\r\n\t\tthis._renderer.setElementClass(this._ngEl.nativeElement, 'grid', true);\r\n\t\tif (this.autoStyle) this._renderer.setElementStyle(this._ngEl.nativeElement, 'position', 'relative');\r\n\t\tthis.setConfig(this._config);\r\n\t}\r\n\r\n\tpublic ngOnDestroy(): void {\r\n\t\tthis._destroyed = true;\r\n\t}\r\n\r\n\tpublic setConfig(config: NgGridConfig): void {\r\n\t\tthis._config = config;\r\n\r\n\t\tvar maxColRowChanged = false;\r\n\t\tfor (var x in config) {\r\n\t\t\tvar val = config[x];\r\n\t\t\tvar intVal = !val ? 0 : parseInt(val);\r\n\r\n\t\t\tswitch (x) {\r\n\t\t\t\tcase 'margins':\r\n\t\t\t\t\tthis.setMargins(val);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'col_width':\r\n\t\t\t\t\tthis.colWidth = Math.max(intVal, 1);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'row_height':\r\n\t\t\t\t\tthis.rowHeight = Math.max(intVal, 1);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'auto_style':\r\n\t\t\t\t\tthis.autoStyle = val ? true : false;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'auto_resize':\r\n\t\t\t\t\tthis._autoResize = val ? true : false;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'draggable':\r\n\t\t\t\t\tthis.dragEnable = val ? true : false;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'resizable':\r\n\t\t\t\t\tthis.resizeEnable = val ? true : false;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'max_rows':\r\n\t\t\t\t\tmaxColRowChanged = maxColRowChanged || this._maxRows != intVal;\r\n\t\t\t\t\tthis._maxRows = intVal < 0 ? 0 : intVal;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'max_cols':\r\n\t\t\t\t\tmaxColRowChanged = maxColRowChanged || this._maxCols != intVal;\r\n\t\t\t\t\tthis._maxCols = intVal < 0 ? 0 : intVal;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'visible_rows':\r\n\t\t\t\t\tthis._visibleRows = Math.max(intVal, 0);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'visible_cols':\r\n\t\t\t\t\tthis._visibleCols = Math.max(intVal, 0);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'min_rows':\r\n\t\t\t\t\tthis.minRows = Math.max(intVal, 1);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'min_cols':\r\n\t\t\t\t\tthis.minCols = Math.max(intVal, 1);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'min_height':\r\n\t\t\t\t\tthis.minHeight = Math.max(intVal, 1);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'min_width':\r\n\t\t\t\t\tthis.minWidth = Math.max(intVal, 1);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'zoom_on_drag':\r\n\t\t\t\t\tthis._zoomOnDrag = val ? true : false;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'cascade':\r\n\t\t\t\t\tif (this.cascade != val) {\r\n\t\t\t\t\t\tthis.cascade = val;\r\n\t\t\t\t\t\tthis._cascadeGrid();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'fix_to_grid':\r\n\t\t\t\t\tthis._fixToGrid = val ? true : false;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'maintain_ratio':\r\n\t\t\t\t\tthis._maintainRatio = val ? true : false;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'prefer_new':\r\n\t\t\t\t\tthis._preferNew = val ? true : false;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'limit_to_screen':\r\n\t\t\t\t\tthis._limitToScreen = val ? true : false;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this._maintainRatio) {\r\n\t\t\tif (this.colWidth && this.rowHeight) {\r\n\t\t\t\tthis._aspectRatio = this.colWidth / this.rowHeight;\r\n\t\t\t} else {\r\n\t\t\t\tthis._maintainRatio = false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (maxColRowChanged) {\r\n\t\t\tif (this._maxCols > 0 && this._maxRows > 0) {\t//\tCan't have both, prioritise on cascade\r\n\t\t\t\tswitch (this.cascade) {\r\n\t\t\t\t\tcase 'left':\r\n\t\t\t\t\tcase 'right':\r\n\t\t\t\t\t\tthis._maxCols = 0;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'up':\r\n\t\t\t\t\tcase 'down':\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tthis._maxRows = 0;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfor (let item of this._items) {\r\n\t\t\t\tvar pos = item.getGridPosition();\r\n\t\t\t\tvar dims = item.getSize();\r\n\r\n\t\t\t\tthis._removeFromGrid(item);\r\n\r\n\t\t\t\tif (this._maxCols > 0 && dims.x > this._maxCols) {\r\n\t\t\t\t\tdims.x = this._maxCols;\r\n\t\t\t\t\titem.setSize(dims);\r\n\t\t\t\t} else if (this._maxRows > 0 && dims.y > this._maxRows) {\r\n\t\t\t\t\tdims.y = this._maxRows;\r\n\t\t\t\t\titem.setSize(dims);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this._hasGridCollision(pos, dims) || !this._isWithinBounds(pos, dims)) {\r\n\t\t\t\t\tvar newPosition = this._fixGridPosition(pos, dims);\r\n\t\t\t\t\titem.setGridPosition(newPosition);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis._addToGrid(item);\r\n\t\t\t}\r\n\r\n\t\t\tthis._cascadeGrid();\r\n\t\t}\r\n\r\n\t\tthis._calculateRowHeight();\r\n\t\tthis._calculateColWidth();\r\n\r\n\t\tvar maxWidth = this._maxCols * this.colWidth;\r\n\t\tvar maxHeight = this._maxRows * this.rowHeight;\r\n\r\n\t\tif (maxWidth > 0 && this.minWidth > maxWidth) this.minWidth = 0.75 * this.colWidth;\r\n\t\tif (maxHeight > 0 && this.minHeight > maxHeight) this.minHeight = 0.75 * this.rowHeight;\r\n\r\n\t\tif (this.minWidth > this.colWidth) this.minCols = Math.max(this.minCols, Math.ceil(this.minWidth / this.colWidth));\r\n\t\tif (this.minHeight > this.rowHeight) this.minRows = Math.max(this.minRows, Math.ceil(this.minHeight / this.rowHeight));\r\n\r\n\t\tif (this._maxCols > 0 && this.minCols > this._maxCols) this.minCols = 1;\r\n\t\tif (this._maxRows > 0 && this.minRows > this._maxRows) this.minRows = 1;\r\n\r\n\t\tthis._updateRatio();\r\n\r\n\t\tfor (let item of this._items) {\r\n\t\t\tthis._removeFromGrid(item);\r\n\t\t\titem.setCascadeMode(this.cascade);\r\n\t\t}\r\n\r\n\t\tthis._updateLimit();\r\n\r\n\t\tfor (let item of this._items) {\r\n\t\t\titem.recalculateSelf();\r\n\t\t\tthis._addToGrid(item);\r\n\t\t}\r\n\r\n\t\tthis._cascadeGrid();\r\n\t\tthis._updateSize();\r\n\t}\r\n\r\n\tpublic getItemPosition(index: number): NgGridItemPosition {\r\n\t\treturn this._items[index].getGridPosition();\r\n\t}\r\n\r\n\tpublic getItemSize(index: number): NgGridItemSize {\r\n\t\treturn this._items[index].getSize();\r\n\t}\r\n\r\n\tpublic ngDoCheck(): boolean {\r\n\t\tif (this._differ != null) {\r\n\t\t\tvar changes = this._differ.diff(this._config);\r\n\r\n\t\t\tif (changes != null) {\r\n\t\t\t\tthis._applyChanges(changes);\r\n\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n\tpublic setMargins(margins: Array<string>): void {\r\n\t\tthis.marginTop = Math.max(parseInt(margins[0]), 0);\r\n\t\tthis.marginRight = margins.length >= 2 ? Math.max(parseInt(margins[1]), 0) : this.marginTop;\r\n\t\tthis.marginBottom = margins.length >= 3 ? Math.max(parseInt(margins[2]), 0) : this.marginTop;\r\n\t\tthis.marginBottom = margins.length >= 3 ? Math.max(parseInt(margins[2]), 0) : this.marginTop;\r\n\t\tthis.marginLeft = margins.length >= 4 ? Math.max(parseInt(margins[3]), 0) : this.marginRight;\r\n\t}\r\n\r\n\tpublic enableDrag(): void {\r\n\t\tthis.dragEnable = true;\r\n\t}\r\n\r\n\tpublic disableDrag(): void {\r\n\t\tthis.dragEnable = false;\r\n\t}\r\n\r\n\tpublic enableResize(): void {\r\n\t\tthis.resizeEnable = true;\r\n\t}\r\n\r\n\tpublic disableResize(): void {\r\n\t\tthis.resizeEnable = false;\r\n\t}\r\n\r\n\tpublic addItem(ngItem: NgGridItem): void {\r\n\t\tngItem.setCascadeMode(this.cascade);\r\n\t\tif (!this._preferNew) {\r\n\t\t\tvar newPos = this._fixGridPosition(ngItem.getGridPosition(), ngItem.getSize());\r\n\t\t\tngItem.savePosition(newPos);\r\n\t\t}\r\n\t\tthis._items.push(ngItem);\r\n\t\tthis._addToGrid(ngItem);\r\n\t\tngItem.recalculateSelf();\r\n\t\tngItem.onCascadeEvent();\r\n\t\tthis._emitOnItemChange();\r\n\t}\r\n\r\n\tpublic removeItem(ngItem: NgGridItem): void {\r\n\t\tthis._removeFromGrid(ngItem);\r\n\r\n\t\tfor (let x: number = 0; x < this._items.length; x++) {\r\n\t\t\tif (this._items[x] == ngItem) {\r\n\t\t\t\tthis._items.splice(x, 1);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this._destroyed) return;\r\n\r\n\t\tthis._cascadeGrid();\r\n\t\tthis._updateSize();\r\n\t\tthis._items.forEach((item: NgGridItem) => item.recalculateSelf());\r\n\t\tthis._emitOnItemChange();\r\n\t}\r\n\r\n\tpublic updateItem(ngItem: NgGridItem): void {\r\n\t\tthis._removeFromGrid(ngItem);\r\n\t\tthis._addToGrid(ngItem);\r\n\t\tthis._cascadeGrid();\r\n\t\tthis._updateSize();\r\n\t\tngItem.onCascadeEvent();\r\n\t}\r\n\r\n\tpublic triggerCascade(): void {\r\n\t\tthis._cascadeGrid(null, null, false);\r\n\t}\r\n\r\n\tpublic resizeEventHandler(e: any): void {\r\n\t\tthis._calculateColWidth();\r\n\t\tthis._calculateRowHeight();\r\n\r\n\t\tthis._updateRatio();\r\n\r\n\t\tfor (let item of this._items) {\r\n\t\t\tthis._removeFromGrid(item);\r\n\t\t}\r\n\r\n\t\tthis._updateLimit();\r\n\r\n\t\tfor (let item of this._items) {\r\n\t\t\tthis._addToGrid(item);\r\n\t\t\titem.recalculateSelf();\r\n\t\t}\r\n\r\n\t\tthis._updateSize();\r\n\t}\r\n\r\n\tpublic mouseDownEventHandler(e: MouseEvent): boolean {\r\n\t\tvar mousePos = this._getMousePosition(e);\r\n\t\tvar item = this._getItemFromPosition(mousePos);\r\n\r\n\t\tif (item != null) {\r\n\t\t\tif (this.resizeEnable && item.canResize(e)) {\r\n\t\t\t\tthis._resizeReady = true;\r\n\t\t\t} else if (this.dragEnable && item.canDrag(e)) {\r\n\t\t\t\tthis._dragReady = true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\tpublic mouseUpEventHandler(e: any): boolean {\r\n\t\tif (this.isDragging) {\r\n\t\t\tthis._dragStop(e);\r\n\t\t\treturn false;\r\n\t\t} else if (this.isResizing) {\r\n\t\t\tthis._resizeStop(e);\r\n\t\t\treturn false;\r\n\t\t} else if (this._dragReady || this._resizeReady) {\r\n\t\t\tthis._dragReady = false;\r\n\t\t\tthis._resizeReady = false;\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\tpublic mouseMoveEventHandler(e: any): boolean {\r\n\t\tif (this._resizeReady) {\r\n\t\t\tthis._resizeStart(e);\r\n\t\t\treturn false;\r\n\t\t} else if (this._dragReady) {\r\n\t\t\tthis._dragStart(e);\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (this.isDragging) {\r\n\t\t\tthis._drag(e);\r\n\t\t\treturn false;\r\n\t\t} else if (this.isResizing) {\r\n\t\t\tthis._resize(e);\r\n\t\t\treturn false;\r\n\t\t} else {\r\n\t\t\tvar mousePos = this._getMousePosition(e);\r\n\t\t\tvar item = this._getItemFromPosition(mousePos);\r\n\r\n\t\t\tif (item) {\r\n\t\t\t\titem.onMouseMove(e);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\t//\tPrivate methods\r\n\tprivate _calculateColWidth(): void {\r\n\t\tif (this._autoResize) {\r\n\t\t\tif (this._maxCols > 0 || this._visibleCols > 0) {\r\n\t\t\t\tvar maxCols = this._maxCols > 0 ? this._maxCols : this._visibleCols;\r\n\t\t\t\tvar maxWidth: number = this._ngEl.nativeElement.getBoundingClientRect().width;\r\n\r\n\t\t\t\tvar colWidth: number = Math.floor(maxWidth / maxCols);\r\n\t\t\t\tcolWidth -= (this.marginLeft + this.marginRight);\r\n\t\t\t\tif (colWidth > 0) this.colWidth = colWidth;\r\n\r\n\t\t\t\tif (this.colWidth < this.minWidth || this.minCols > this._config.min_cols) {\r\n\t\t\t\t\tthis.minCols = Math.max(this._config.min_cols, Math.ceil(this.minWidth / this.colWidth));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprivate _calculateRowHeight(): void {\r\n\t\tif (this._autoResize) {\r\n\t\t\tif (this._maxRows > 0 || this._visibleRows > 0) {\r\n\t\t\t\tvar maxRows = this._maxRows > 0 ? this._maxRows : this._visibleRows;\r\n\t\t\t\tvar maxHeight: number = window.innerHeight - this.marginTop - this.marginBottom;\r\n\r\n\t\t\t\tvar rowHeight: number = Math.max(Math.floor(maxHeight / maxRows), this.minHeight);\r\n\t\t\t\trowHeight -= (this.marginTop + this.marginBottom);\r\n\t\t\t\tif (rowHeight > 0) this.rowHeight = rowHeight;\r\n\r\n\t\t\t\tif (this.rowHeight < this.minHeight || this.minRows > this._config.min_rows) {\r\n\t\t\t\t\tthis.minRows = Math.max(this._config.min_rows, Math.ceil(this.minHeight / this.rowHeight));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprivate _updateRatio(): void {\r\n\t\tif (this._autoResize && this._maintainRatio) {\r\n\t\t\tif (this._maxCols > 0 && this._visibleRows <= 0) {\r\n\t\t\t\tthis.rowHeight = this.colWidth / this._aspectRatio;\r\n\t\t\t} else if (this._maxRows > 0 && this._visibleCols <= 0) {\r\n\t\t\t\tthis.colWidth = this._aspectRatio * this.rowHeight;\r\n\t\t\t} else if (this._maxCols == 0 && this._maxRows == 0) {\r\n\t\t\t\tif (this._visibleCols > 0) {\r\n\t\t\t\t\tthis.rowHeight = this.colWidth / this._aspectRatio;\r\n\t\t\t\t} else if (this._visibleRows > 0) {\r\n\t\t\t\t\tthis.colWidth = this._aspectRatio * this.rowHeight;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprivate _updateLimit(): void {\r\n\t\tif (!this._autoResize && this._limitToScreen) {\r\n\t\t\tthis._limitGrid(this._getContainerColumns());\r\n\t\t}\r\n\t}\r\n\r\n\tprivate _applyChanges(changes: any): void {\r\n\t\tchanges.forEachAddedItem((record: any) => { this._config[record.key] = record.currentValue; });\r\n\t\tchanges.forEachChangedItem((record: any) => { this._config[record.key] = record.currentValue; });\r\n\t\tchanges.forEachRemovedItem((record: any) => { delete this._config[record.key]; });\r\n\r\n\t\tthis.setConfig(this._config);\r\n\t}\r\n\r\n\tprivate _resizeStart(e: any): void {\r\n\t\tif (this.resizeEnable) {\r\n            var mousePos = this._getMousePosition(e);\r\n            var item = this._getItemFromPosition(mousePos);\r\n\r\n            if (item) {\r\n                item.startMoving();\r\n                this._resizingItem = item;\r\n                this._resizeDirection = item.canResize(e);\r\n                this._removeFromGrid(item);\r\n                this._createPlaceholder(item);\r\n                this.isResizing = true;\r\n                this._resizeReady = false;\r\n                this.onResizeStart.emit(item);\r\n                item.onResizeStartEvent();\r\n            }\r\n        }\r\n\t}\r\n\r\n\tprivate _dragStart(e: any): void {\r\n\t\tif (this.dragEnable) {\r\n\t\t\tvar mousePos = this._getMousePosition(e);\r\n\t\t\tvar item = this._getItemFromPosition(mousePos);\r\n\t\t\tvar itemPos = item.getPosition();\r\n\t\t\tvar pOffset = { 'left': (mousePos.left - itemPos.left), 'top': (mousePos.top - itemPos.top) }\r\n\r\n\t\t\titem.startMoving();\r\n\t\t\tthis._draggingItem = item;\r\n\t\t\tthis._posOffset = pOffset;\r\n\t\t\tthis._removeFromGrid(item);\r\n\t\t\tthis._createPlaceholder(item);\r\n\t\t\tthis.isDragging = true;\r\n\t\t\tthis._dragReady = false;\r\n\r\n\t\t\tthis.onDragStart.emit(item);\r\n\t\t\titem.onDragStartEvent();\r\n\r\n\t\t\tif (this._zoomOnDrag) {\r\n\t\t\t\tthis._zoomOut();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprivate _zoomOut(): void {\r\n\t\tthis._renderer.setElementStyle(this._ngEl.nativeElement, 'transform', 'scale(0.5, 0.5)');\r\n\t}\r\n\r\n\tprivate _resetZoom(): void {\r\n\t\tthis._renderer.setElementStyle(this._ngEl.nativeElement, 'transform', '');\r\n\t}\r\n\r\n\tprivate _drag(e: any): void {\r\n\t\tif (this.isDragging) {\r\n\t\t\tif (window.getSelection) {\r\n\t\t\t\tif (window.getSelection().empty) {\r\n\t\t\t\t\twindow.getSelection().empty();\r\n\t\t\t\t} else if (window.getSelection().removeAllRanges) {\r\n\t\t\t\t\twindow.getSelection().removeAllRanges();\r\n\t\t\t\t}\r\n\t\t\t} else if ((<any>document).selection) {\r\n\t\t\t\t(<any>document).selection.empty();\r\n\t\t\t}\r\n\r\n\t\t\tvar mousePos = this._getMousePosition(e);\r\n\t\t\tvar newL = (mousePos.left - this._posOffset.left);\r\n\t\t\tvar newT = (mousePos.top - this._posOffset.top);\r\n\r\n\t\t\tvar itemPos = this._draggingItem.getGridPosition();\r\n\t\t\tvar gridPos = this._calculateGridPosition(newL, newT);\r\n\t\t\tvar dims = this._draggingItem.getSize();\r\n\r\n\t\t\tif (!this._isWithinBoundsX(gridPos, dims))\r\n\t\t\t\tgridPos.col = this._maxCols - (dims.x - 1);\r\n\r\n\t\t\tif (!this._isWithinBoundsY(gridPos, dims))\r\n\t\t\t\tgridPos.row = this._maxRows - (dims.y - 1);\r\n\r\n\t\t\tif (!this._autoResize && this._limitToScreen) {\r\n\t\t\t\tif ((gridPos.col + dims.x - 1) > this._getContainerColumns()) {\r\n\t\t\t\t\tgridPos.col = this._getContainerColumns() - (dims.x - 1);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (gridPos.col != itemPos.col || gridPos.row != itemPos.row) {\r\n\t\t\t\tthis._draggingItem.setGridPosition(gridPos, this._fixToGrid);\r\n\t\t\t\tthis._placeholderRef.instance.setGridPosition(gridPos);\r\n\r\n\t\t\t\tif (['up', 'down', 'left', 'right'].indexOf(this.cascade) >= 0) {\r\n\t\t\t\t\tthis._fixGridCollisions(gridPos, dims, true);\r\n\t\t\t\t\tthis._cascadeGrid(gridPos, dims);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (!this._fixToGrid) {\r\n\t\t\t\tthis._draggingItem.setPosition(newL, newT);\r\n\t\t\t}\r\n\r\n\t\t\tthis.onDrag.emit(this._draggingItem);\r\n\t\t\tthis._draggingItem.onDragEvent();\r\n\t\t}\r\n\t}\r\n\r\n\tprivate _resize(e: any): void {\r\n\t\tif (this.isResizing) {\r\n\t\t\tif (window.getSelection) {\r\n\t\t\t\tif (window.getSelection().empty) {\r\n\t\t\t\t\twindow.getSelection().empty();\r\n\t\t\t\t} else if (window.getSelection().removeAllRanges) {\r\n\t\t\t\t\twindow.getSelection().removeAllRanges();\r\n\t\t\t\t}\r\n\t\t\t} else if ((<any>document).selection) {\r\n\t\t\t\t(<any>document).selection.empty();\r\n\t\t\t}\r\n\r\n\t\t\tvar mousePos = this._getMousePosition(e);\r\n\t\t\tvar itemPos = this._resizingItem.getPosition();\r\n\t\t\tvar itemDims = this._resizingItem.getDimensions();\r\n\t\t\tvar newW = this._resizeDirection == 'height' ? itemDims.width : (mousePos.left - itemPos.left + 10);\r\n\t\t\tvar newH = this._resizeDirection == 'width' ? itemDims.height : (mousePos.top - itemPos.top + 10);\r\n\r\n\t\t\tif (newW < this.minWidth)\r\n\t\t\t\tnewW = this.minWidth;\r\n\t\t\tif (newH < this.minHeight)\r\n\t\t\t\tnewH = this.minHeight;\r\n\t\t\tif (newW < this._resizingItem.minWidth)\r\n\t\t\t\tnewW = this._resizingItem.minWidth;\r\n\t\t\tif (newH < this._resizingItem.minHeight)\r\n\t\t\t\tnewH = this._resizingItem.minHeight;\r\n\r\n\t\t\tvar calcSize = this._calculateGridSize(newW, newH);\r\n\t\t\tvar itemSize = this._resizingItem.getSize();\r\n\t\t\tvar iGridPos = this._resizingItem.getGridPosition();\r\n\r\n\t\t\tif (!this._isWithinBoundsX(iGridPos, calcSize))\r\n\t\t\t\tcalcSize.x = (this._maxCols - iGridPos.col) + 1;\r\n\r\n\t\t\tif (!this._isWithinBoundsY(iGridPos, calcSize))\r\n\t\t\t\tcalcSize.y = (this._maxRows - iGridPos.row) + 1;\r\n\r\n\t\t\tcalcSize = this._resizingItem.fixResize(calcSize);\r\n\r\n\t\t\tif (calcSize.x != itemSize.x || calcSize.y != itemSize.y) {\r\n\t\t\t\tthis._resizingItem.setSize(calcSize, false);\r\n\t\t\t\tthis._placeholderRef.instance.setSize(calcSize);\r\n\r\n\t\t\t\tif (['up', 'down', 'left', 'right'].indexOf(this.cascade) >= 0) {\r\n\t\t\t\t\tthis._fixGridCollisions(iGridPos, calcSize, true);\r\n\t\t\t\t\tthis._cascadeGrid(iGridPos, calcSize);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (!this._fixToGrid)\r\n\t\t\t\tthis._resizingItem.setDimensions(newW, newH);\r\n\r\n\t\t\tvar bigGrid = this._maxGridSize(itemPos.left + newW + (2 * e.movementX), itemPos.top + newH + (2 * e.movementY));\r\n\r\n\t\t\tif (this._resizeDirection == 'height') bigGrid.x = iGridPos.col + itemSize.x;\r\n\t\t\tif (this._resizeDirection == 'width') bigGrid.y = iGridPos.row + itemSize.y;\r\n\r\n\t\t\tthis.onResize.emit(this._resizingItem);\r\n\t\t\tthis._resizingItem.onResizeEvent();\r\n\t\t}\r\n\t}\r\n\r\n\tprivate _dragStop(e: any): void {\r\n\t\tif (this.isDragging) {\r\n\t\t\tthis.isDragging = false;\r\n\r\n\t\t\tvar itemPos = this._draggingItem.getGridPosition();\r\n\r\n\t\t\tthis._draggingItem.savePosition(itemPos);\r\n\t\t\tthis._addToGrid(this._draggingItem);\r\n\r\n\t\t\tthis._cascadeGrid();\r\n\r\n\t\t\tthis._draggingItem.stopMoving();\r\n\t\t\tthis._draggingItem.onDragStopEvent();\r\n\t\t\tthis.onDragStop.emit(this._draggingItem);\r\n\t\t\tthis._draggingItem = null;\r\n\t\t\tthis._posOffset = null;\r\n\t\t\tthis._placeholderRef.destroy();\r\n\r\n\t\t\tthis._emitOnItemChange();\r\n\r\n\t\t\tif (this._zoomOnDrag) {\r\n\t\t\t\tthis._resetZoom();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprivate _resizeStop(e: any): void {\r\n\t\tif (this.isResizing) {\r\n\t\t\tthis.isResizing = false;\r\n\r\n\t\t\tvar itemDims = this._resizingItem.getSize();\r\n\r\n\t\t\tthis._resizingItem.setSize(itemDims);\r\n\t\t\tthis._addToGrid(this._resizingItem);\r\n\r\n\t\t\tthis._cascadeGrid();\r\n\r\n\t\t\tthis._resizingItem.stopMoving();\r\n\t\t\tthis._resizingItem.onResizeStopEvent();\r\n\t\t\tthis.onResizeStop.emit(this._resizingItem);\r\n\t\t\tthis._resizingItem = null;\r\n\t\t\tthis._resizeDirection = null;\r\n\t\t\tthis._placeholderRef.destroy();\r\n\r\n\t\t\tthis._emitOnItemChange();\r\n\t\t}\r\n\t}\r\n\r\n\tprivate _maxGridSize(w: number, h: number): NgGridItemSize {\r\n\t\tvar sizex = Math.ceil(w / (this.colWidth + this.marginLeft + this.marginRight));\r\n\t\tvar sizey = Math.ceil(h / (this.rowHeight + this.marginTop + this.marginBottom));\r\n\t\treturn { 'x': sizex, 'y': sizey };\r\n\t}\r\n\r\n\tprivate _calculateGridSize(width: number, height: number): NgGridItemSize {\r\n\t\twidth += this.marginLeft + this.marginRight;\r\n\t\theight += this.marginTop + this.marginBottom;\r\n\r\n\t\tvar sizex = Math.max(this.minCols, Math.round(width / (this.colWidth + this.marginLeft + this.marginRight)));\r\n\t\tvar sizey = Math.max(this.minRows, Math.round(height / (this.rowHeight + this.marginTop + this.marginBottom)));\r\n\r\n\t\tif (!this._isWithinBoundsX({ col: 1, row: 1 }, { x: sizex, y: sizey })) sizex = this._maxCols;\r\n\t\tif (!this._isWithinBoundsY({ col: 1, row: 1 }, { x: sizex, y: sizey })) sizey = this._maxRows;\r\n\r\n\t\treturn { 'x': sizex, 'y': sizey };\r\n\t}\r\n\r\n\tprivate _calculateGridPosition(left: number, top: number): NgGridItemPosition {\r\n\t\tvar col = Math.max(1, Math.round(left / (this.colWidth + this.marginLeft + this.marginRight)) + 1);\r\n\t\tvar row = Math.max(1, Math.round(top / (this.rowHeight + this.marginTop + this.marginBottom)) + 1);\r\n\r\n\t\tif (!this._isWithinBoundsX({ col: col, row: row }, { x: 1, y: 1 })) col = this._maxCols;\r\n\t\tif (!this._isWithinBoundsY({ col: col, row: row }, { x: 1, y: 1 })) row = this._maxRows;\r\n\r\n\t\treturn { 'col': col, 'row': row };\r\n\t}\r\n\r\n\tprivate _hasGridCollision(pos: NgGridItemPosition, dims: NgGridItemSize): boolean {\r\n\t\tvar positions = this._getCollisions(pos, dims);\r\n\r\n\t\tif (positions == null || positions.length == 0) return false;\r\n\r\n\t\treturn positions.some((v: NgGridItem) => {\r\n\t\t\treturn !(v === null);\r\n\t\t});\r\n\t}\r\n\r\n\tprivate _getCollisions(pos: NgGridItemPosition, dims: NgGridItemSize): Array<NgGridItem> {\r\n\t\tconst returns: Array<NgGridItem> = [];\r\n\r\n\t\tfor (let j: number = 0; j < dims.y; j++) {\r\n\t\t\tif (this._itemGrid[pos.row + j] != null) {\r\n\t\t\t\tfor (let i: number = 0; i < dims.x; i++) {\r\n\t\t\t\t\tif (this._itemGrid[pos.row + j][pos.col + i] != null) {\r\n\t\t\t\t\t\tconst item: NgGridItem = this._itemGrid[pos.row + j][pos.col + i];\r\n\r\n\t\t\t\t\t\tif (returns.indexOf(item) < 0)\r\n\t\t\t\t\t\t\treturns.push(item);\r\n\r\n\t\t\t\t\t\tconst itemPos: NgGridItemPosition = item.getGridPosition();\r\n\t\t\t\t\t\tconst itemDims: NgGridItemSize = item.getSize();\r\n\r\n\t\t\t\t\t\ti = itemPos.col + itemDims.x - pos.col;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn returns;\r\n\t}\r\n\r\n\tprivate _fixGridCollisions(pos: NgGridItemPosition, dims: NgGridItemSize, shouldSave: boolean = false): void {\r\n\t\twhile (this._hasGridCollision(pos, dims)) {\r\n\t\t\tconst collisions: Array<NgGridItem> = this._getCollisions(pos, dims);\r\n\r\n\t\t\tthis._removeFromGrid(collisions[0]);\r\n\r\n\t\t\tconst itemPos: NgGridItemPosition = collisions[0].getGridPosition();\r\n\t\t\tconst itemDims: NgGridItemSize = collisions[0].getSize();\r\n\r\n\t\t\tswitch (this.cascade) {\r\n\t\t\t\tcase 'up':\r\n\t\t\t\tcase 'down':\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tconst oldRow: number = itemPos.row;\r\n\t\t\t\t\titemPos.row = pos.row + dims.y;\r\n\r\n\t\t\t\t\tif (!this._isWithinBoundsY(itemPos, itemDims)) {\r\n\t\t\t\t\t\titemPos.col = pos.col + dims.x;\r\n\t\t\t\t\t\titemPos.row = oldRow;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'left':\r\n\t\t\t\tcase 'right':\r\n\t\t\t\t\tconst oldCol: number = itemPos.col;\r\n\t\t\t\t\titemPos.col = pos.col + dims.x;\r\n\r\n\t\t\t\t\tif (!this._isWithinBoundsX(itemPos, itemDims)) {\r\n\t\t\t\t\t\titemPos.col = oldCol;\r\n\t\t\t\t\t\titemPos.row = pos.row + dims.y;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tif (shouldSave) {\r\n\t\t\t\tcollisions[0].savePosition(itemPos);\r\n\t\t\t} else {\r\n\t\t\t\tcollisions[0].setGridPosition(itemPos);\r\n\t\t\t}\r\n\r\n\t\t\tthis._fixGridCollisions(itemPos, itemDims, shouldSave);\r\n\t\t\tthis._addToGrid(collisions[0]);\r\n\t\t\tcollisions[0].onCascadeEvent();\r\n\t\t}\r\n\t}\r\n\r\n\tprivate _limitGrid(maxCols: number): void {\r\n\t\tconst items: Array<NgGridItem> = this._items.slice();\r\n\r\n\t\titems.sort((a: NgGridItem, b: NgGridItem) => {\r\n\t\t\tlet aPos: NgGridItemPosition = a.getSavedPosition();\r\n\t\t\tlet bPos: NgGridItemPosition = b.getSavedPosition();\r\n\r\n\t\t\tif (aPos.row == bPos.row) {\r\n\t\t\t\treturn aPos.col == bPos.col ? 0 : (aPos.col < bPos.col ? -1 : 1);\r\n\t\t\t} else {\r\n\t\t\t\treturn aPos.row < bPos.row ? -1 : 1;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tconst columnMax: { [col: number]: number } = {};\r\n\t\tconst largestGap: { [col: number]: number } = {};\r\n\r\n\t\tfor (let i: number = 1; i <= maxCols; i++) {\r\n\t\t\tcolumnMax[i] = 1;\r\n\t\t\tlargestGap[i] = 1;\r\n\t\t}\r\n\r\n\t\tconst curPos: NgGridItemPosition = { col: 1, row: 1 };\r\n\t\tlet currentRow: number = 1;\r\n\r\n\t\tconst willCascade: (item: NgGridItem, col: number) => boolean = (item: NgGridItem, col: number) => {\r\n\t\t\tfor (let i: number = col; i < col + item.sizex; i++) {\r\n\t\t\t\tif (columnMax[i] == currentRow) return true;\r\n\t\t\t}\r\n\r\n\t\t\treturn false;\r\n\t\t};\r\n\r\n\t\tinterface GridBlock {\r\n\t\t\tstart: number;\r\n\t\t\tend: number;\r\n\t\t\tlength: number;\r\n\t\t}\r\n\r\n\t\twhile (items.length > 0) {\r\n\t\t\tconst columns: Array<GridBlock> = [];\r\n\t\t\tlet newBlock: GridBlock = {\r\n\t\t\t\tstart: 1,\r\n\t\t\t\tend: 1,\r\n\t\t\t\tlength: 0,\r\n\t\t\t};\r\n\r\n\t\t\tfor (let col: number = 1; col <= maxCols; col++) {\r\n\t\t\t\tif (columnMax[col] <= currentRow) {\r\n\t\t\t\t\tif (newBlock.length == 0) {\r\n\t\t\t\t\t\tnewBlock.start = col;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tnewBlock.length++;\r\n\t\t\t\t\tnewBlock.end = col + 1;\r\n\t\t\t\t} else if (newBlock.length > 0) {\r\n\t\t\t\t\tcolumns.push(newBlock);\r\n\r\n\t\t\t\t\tnewBlock = {\r\n\t\t\t\t\t\tstart: col,\r\n\t\t\t\t\t\tend: col,\r\n\t\t\t\t\t\tlength: 0,\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (newBlock.length > 0) {\r\n\t\t\t\tcolumns.push(newBlock);\r\n\t\t\t}\r\n\r\n\t\t\tlet tempColumns: Array<number> = columns.map((block: GridBlock) => block.length);\r\n\t\t\tconst currentItems: Array<NgGridItem> = [];\r\n\r\n\t\t\twhile (items.length > 0) {\r\n\t\t\t\tconst item = items[0];\r\n\r\n\t\t\t\tif (item.row > currentRow) break;\r\n\r\n\t\t\t\tlet fits: boolean = false;\r\n\t\t\t\tfor (let x in tempColumns) {\r\n\t\t\t\t\tif (item.sizex <= tempColumns[x]) {\r\n\t\t\t\t\t\ttempColumns[x] -= item.sizex;\r\n\t\t\t\t\t\tfits = true;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t} else if (item.sizex > tempColumns[x]) {\r\n\t\t\t\t\t\ttempColumns[x] = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (fits) {\r\n\t\t\t\t\tcurrentItems.push(items.shift());\r\n\t\t\t\t} else {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (currentItems.length > 0) {\r\n\t\t\t\tconst itemPositions: Array<number> = [];\r\n\t\t\t\tlet lastPosition: number = maxCols;\r\n\r\n\t\t\t\tfor (let i = currentItems.length - 1; i >= 0; i--) {\r\n\t\t\t\t\tlet maxPosition = 1;\r\n\r\n\t\t\t\t\tfor (let j = columns.length - 1; j >= 0; j--) {\r\n\t\t\t\t\t\tif (columns[j].start > lastPosition) continue;\r\n\t\t\t\t\t\tif (columns[j].start > (maxCols - currentItems[i].sizex)) continue;\r\n\t\t\t\t\t\tif (columns[j].length < currentItems[i].sizex) continue;\r\n\t\t\t\t\t\tif (lastPosition < columns[j].end && (lastPosition - columns[j].start) < currentItems[i].sizex) continue;\r\n\r\n\t\t\t\t\t\tmaxPosition = (lastPosition < columns[j].end ? lastPosition : columns[j].end) - currentItems[i].sizex\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\titemPositions[i] = Math.min(maxPosition, currentItems[i].row == currentRow ? currentItems[i].col : 1);\r\n\t\t\t\t\tlastPosition = itemPositions[i];\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet minPosition: number = 1;\r\n\t\t\t\tlet currentItem: number = 0;\r\n\r\n\t\t\t\twhile (currentItems.length > 0) {\r\n\t\t\t\t\tconst item: NgGridItem = currentItems.shift();\r\n\r\n\t\t\t\t\tfor (let j = 0; j < columns.length; j++) {\r\n\t\t\t\t\t\tif (columns[j].length < item.sizex) continue;\r\n\t\t\t\t\t\tif (minPosition > columns[j].end) continue;\r\n\t\t\t\t\t\tif (minPosition > columns[j].start && (columns[j].end - minPosition) < item.sizex) continue;\r\n\t\t\t\t\t\tif (minPosition <  columns[j].start) minPosition = columns[j].start;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\titem.setGridPosition({ col: Math.max(minPosition, itemPositions[currentItem]), row: currentRow });\r\n\r\n\t\t\t\t\tminPosition = item.currentCol + item.sizex;\r\n\t\t\t\t\tcurrentItem++;\r\n\r\n\t\t\t\t\tfor (let i: number = item.currentCol; i < item.currentCol + item.sizex; i++) {\r\n\t\t\t\t\t\tcolumnMax[i] = item.currentRow + item.sizey;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else if (currentItems.length === 0 && columns.length === 1 && columns[0].length >= maxCols) {\t//\tOnly one block, but no items fit. Means the next item is too large\r\n\t\t\t\tconst item: NgGridItem = items.shift();\r\n\r\n\t\t\t\titem.setGridPosition({ col: 1, row: currentRow });\r\n\r\n\t\t\t\tfor (let i: number = item.currentCol; i < item.currentCol + item.sizex; i++) {\r\n\t\t\t\t\tcolumnMax[i] = item.currentRow + item.sizey;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlet newRow: number = 0;\r\n\r\n\t\t\tfor (let x in columnMax) {\r\n\t\t\t\tif (columnMax[x] > currentRow && (newRow == 0 || columnMax[x] < newRow)) {\r\n\t\t\t\t\tnewRow = columnMax[x];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tcurrentRow = newRow <= currentRow ? currentRow + 1 : newRow;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate _cascadeGrid(pos?: NgGridItemPosition, dims?: NgGridItemSize, shouldSave: boolean = true): void {\r\n\t\tif (this._destroyed) return;\r\n\t\tif (pos && !dims) throw new Error('Cannot cascade with only position and not dimensions');\r\n\r\n\t\tif (this.isDragging && this._draggingItem && !pos && !dims) {\r\n\t\t\tpos = this._draggingItem.getGridPosition();\r\n\t\t\tdims = this._draggingItem.getSize();\r\n\t\t} else if (this.isResizing && this._resizingItem && !pos && !dims) {\r\n\t\t\tpos = this._resizingItem.getGridPosition();\r\n\t\t\tdims = this._resizingItem.getSize();\r\n\t\t}\r\n\r\n\t\tswitch (this.cascade) {\r\n\t\t\tcase 'up':\r\n\t\t\tcase 'down':\r\n\t\t\t\tconst lowRow: Array<number> = [0];\r\n\r\n\t\t\t\tfor (let i: number = 1; i <= this._curMaxCol; i++)\r\n\t\t\t\t\tlowRow[i] = 1;\r\n\r\n\t\t\t\tfor (let r: number = 1; r <= this._curMaxRow; r++) {\r\n\t\t\t\t\tif (this._itemGrid[r] == undefined) continue;\r\n\r\n\t\t\t\t\tfor (let c: number = 1; c <= this._curMaxCol; c++) {\r\n\t\t\t\t\t\tif (this._itemGrid[r] == undefined) break;\r\n\t\t\t\t\t\tif (r < lowRow[c]) continue;\r\n\r\n\t\t\t\t\t\tif (this._itemGrid[r][c] != null) {\r\n\t\t\t\t\t\t\tconst item: NgGridItem = this._itemGrid[r][c];\r\n\t\t\t\t\t\t\tif (item.isFixed) continue;\r\n\r\n\t\t\t\t\t\t\tconst itemDims: NgGridItemSize = item.getSize();\r\n\t\t\t\t\t\t\tconst itemPos: NgGridItemPosition = item.getGridPosition();\r\n\r\n\t\t\t\t\t\t\tif (itemPos.col != c || itemPos.row != r) continue;\t//\tIf this is not the element's start\r\n\r\n\t\t\t\t\t\t\tlet lowest: number = lowRow[c];\r\n\r\n\t\t\t\t\t\t\tfor (let i: number = 1; i < itemDims.x; i++) {\r\n\t\t\t\t\t\t\t\tlowest = Math.max(lowRow[(c + i)], lowest);\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif (pos && (c + itemDims.x) > pos.col && c < (pos.col + dims.x)) {          //\tIf our element is in one of the item's columns\r\n\t\t\t\t\t\t\t\tif ((r >= pos.row && r < (pos.row + dims.y)) ||                         //\tIf this row is occupied by our element\r\n\t\t\t\t\t\t\t\t\t((itemDims.y > (pos.row - lowest)) &&                               //\tOr the item can't fit above our element\r\n\t\t\t\t\t\t\t\t\t\t(r >= (pos.row + dims.y) && lowest < (pos.row + dims.y)))) {    //\t\tAnd this row is below our element, but we haven't caught it\r\n\t\t\t\t\t\t\t\t\tlowest = Math.max(lowest, pos.row + dims.y);                        //\tSet the lowest row to be below it\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tconst newPos: NgGridItemPosition = { col: c, row: lowest };\r\n\r\n\t\t\t\t\t\t\tif (lowest != itemPos.row && this._isWithinBoundsY(newPos, itemDims)) {\t//\tIf the item is not already on this row move it up\r\n\t\t\t\t\t\t\t\tthis._removeFromGrid(item);\r\n\r\n\t\t\t\t\t\t\t\tif (shouldSave) {\r\n\t\t\t\t\t\t\t\t\titem.savePosition(newPos);\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\titem.setGridPosition(newPos);\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\titem.onCascadeEvent();\r\n\t\t\t\t\t\t\t\tthis._addToGrid(item);\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tfor (let i: number = 0; i < itemDims.x; i++) {\r\n\t\t\t\t\t\t\t\tlowRow[c + i] = lowest + itemDims.y;\t//\tUpdate the lowest row to be below the item\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'left':\r\n\t\t\tcase 'right':\r\n\t\t\t\tconst lowCol: Array<number> = [0];\r\n\r\n\t\t\t\tfor (let i: number = 1; i <= this._curMaxRow; i++)\r\n\t\t\t\t\tlowCol[i] = 1;\r\n\r\n\t\t\t\tfor (let r: number = 1; r <= this._curMaxRow; r++) {\r\n\t\t\t\t\tif (this._itemGrid[r] == undefined) continue;\r\n\r\n\t\t\t\t\tfor (let c: number = 1; c <= this._curMaxCol; c++) {\r\n\t\t\t\t\t\tif (this._itemGrid[r] == undefined) break;\r\n\t\t\t\t\t\tif (c < lowCol[r]) continue;\r\n\r\n\t\t\t\t\t\tif (this._itemGrid[r][c] != null) {\r\n\t\t\t\t\t\t\tconst item: NgGridItem = this._itemGrid[r][c];\r\n\t\t\t\t\t\t\tconst itemDims: NgGridItemSize = item.getSize();\r\n\t\t\t\t\t\t\tconst itemPos: NgGridItemPosition = item.getGridPosition();\r\n\r\n\t\t\t\t\t\t\tif (itemPos.col != c || itemPos.row != r) continue;\t//\tIf this is not the element's start\r\n\r\n\t\t\t\t\t\t\tlet lowest: number = lowCol[r];\r\n\r\n\t\t\t\t\t\t\tfor (let i: number = 1; i < itemDims.y; i++) {\r\n\t\t\t\t\t\t\t\tlowest = Math.max(lowCol[(r + i)], lowest);\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif (pos && (r + itemDims.y) > pos.row && r < (pos.row + dims.y)) {          //\tIf our element is in one of the item's rows\r\n\t\t\t\t\t\t\t\tif ((c >= pos.col && c < (pos.col + dims.x)) ||                         //\tIf this col is occupied by our element\r\n\t\t\t\t\t\t\t\t\t((itemDims.x > (pos.col - lowest)) &&                               //\tOr the item can't fit above our element\r\n\t\t\t\t\t\t\t\t\t\t(c >= (pos.col + dims.x) && lowest < (pos.col + dims.x)))) {    //\t\tAnd this col is below our element, but we haven't caught it\r\n\t\t\t\t\t\t\t\t\tlowest = Math.max(lowest, pos.col + dims.x);                        //\tSet the lowest col to be below it\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tconst newPos: NgGridItemPosition = { col: lowest, row: r };\r\n\r\n\t\t\t\t\t\t\tif (lowest != itemPos.col && this._isWithinBoundsX(newPos, itemDims)) {\t//\tIf the item is not already on this col move it up\r\n\t\t\t\t\t\t\t\tthis._removeFromGrid(item);\r\n\r\n\t\t\t\t\t\t\t\tif (shouldSave) {\r\n\t\t\t\t\t\t\t\t\titem.savePosition(newPos);\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\titem.setGridPosition(newPos);\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\titem.onCascadeEvent();\r\n\t\t\t\t\t\t\t\tthis._addToGrid(item);\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tfor (let i: number = 0; i < itemDims.y; i++) {\r\n\t\t\t\t\t\t\t\tlowCol[r + i] = lowest + itemDims.x;\t//\tUpdate the lowest col to be below the item\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate _fixGridPosition(pos: NgGridItemPosition, dims: NgGridItemSize): NgGridItemPosition {\r\n\t\twhile (this._hasGridCollision(pos, dims) || !this._isWithinBounds(pos, dims)) {\r\n\t\t\tif (this._hasGridCollision(pos, dims)) {\r\n\t\t\t\tswitch (this.cascade) {\r\n\t\t\t\t\tcase 'up':\r\n\t\t\t\t\tcase 'down':\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tpos.row++;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'left':\r\n\t\t\t\t\tcase 'right':\r\n\t\t\t\t\t\tpos.col++;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\r\n\t\t\tif (!this._isWithinBoundsY(pos, dims)) {\r\n\t\t\t\tpos.col++;\r\n\t\t\t\tpos.row = 1;\r\n\t\t\t}\r\n\t\t\tif (!this._isWithinBoundsX(pos, dims)) {\r\n\t\t\t\tpos.row++;\r\n\t\t\t\tpos.col = 1;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn pos;\r\n\t}\r\n\r\n\tprivate _isWithinBoundsX(pos: NgGridItemPosition, dims: NgGridItemSize) {\r\n\t\treturn (this._maxCols == 0 || (pos.col + dims.x - 1) <= this._maxCols);\r\n\t}\r\n\tprivate _isWithinBoundsY(pos: NgGridItemPosition, dims: NgGridItemSize) {\r\n\t\treturn (this._maxRows == 0 || (pos.row + dims.y - 1) <= this._maxRows);\r\n\t}\r\n\tprivate _isWithinBounds(pos: NgGridItemPosition, dims: NgGridItemSize) {\r\n\t\treturn this._isWithinBoundsX(pos, dims) && this._isWithinBoundsY(pos, dims);\r\n\t}\r\n\r\n\tprivate _addToGrid(item: NgGridItem): void {\r\n\t\tlet pos: NgGridItemPosition = item.getGridPosition();\r\n\t\tconst dims: NgGridItemSize = item.getSize();\r\n\r\n\t\tif (this._hasGridCollision(pos, dims)) {\r\n\t\t\tthis._fixGridCollisions(pos, dims);\r\n\t\t\tpos = item.getGridPosition();\r\n\t\t}\r\n\r\n\t\tfor (let j: number = 0; j < dims.y; j++) {\r\n\t\t\tif (this._itemGrid[pos.row + j] == null) this._itemGrid[pos.row + j] = {};\r\n\r\n\t\t\tfor (let i: number = 0; i < dims.x; i++) {\r\n\t\t\t\tthis._itemGrid[pos.row + j][pos.col + i] = item;\r\n\r\n\t\t\t\tthis._updateSize(pos.col + dims.x - 1, pos.row + dims.y - 1);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprivate _removeFromGrid(item: NgGridItem): void {\r\n\t\tfor (let y in this._itemGrid)\r\n\t\t\tfor (let x in this._itemGrid[y])\r\n\t\t\t\tif (this._itemGrid[y][x] == item)\r\n\t\t\t\t\tdelete this._itemGrid[y][x];\r\n\t}\r\n\r\n\tprivate _updateSize(col?: number, row?: number): void {\r\n\t\tif (this._destroyed) return;\r\n\t\tcol = (col == undefined) ? this._getMaxCol() : col;\r\n\t\trow = (row == undefined) ? this._getMaxRow() : row;\r\n\r\n\t\tlet maxCol: number = Math.max(this._curMaxCol, col);\r\n\t\tlet maxRow: number = Math.max(this._curMaxRow, row);\r\n\r\n\t\tif (maxCol != this._curMaxCol || maxRow != this._curMaxRow) {\r\n\t\t\tthis._curMaxCol = maxCol;\r\n\t\t\tthis._curMaxRow = maxRow;\r\n\t\t}\r\n\r\n\t\tthis._renderer.setElementStyle(this._ngEl.nativeElement, 'width', '100%');//(maxCol * (this.colWidth + this.marginLeft + this.marginRight))+'px');\r\n\t\tthis._renderer.setElementStyle(this._ngEl.nativeElement, 'height', (this._getMaxRow() * (this.rowHeight + this.marginTop + this.marginBottom)) + 'px');\r\n\t}\r\n\r\n\tprivate _getMaxRow(): number {\r\n\t\treturn Math.max.apply(null, this._items.map((item: NgGridItem) => item.getGridPosition().row + item.getSize().y - 1));\r\n\t}\r\n\r\n\tprivate _getMaxCol(): number {\r\n\t\treturn Math.max.apply(null, this._items.map((item: NgGridItem) => item.getGridPosition().col + item.getSize().x - 1));\r\n\t}\r\n\r\n\tprivate _getMousePosition(e: any): NgGridRawPosition {\r\n\t\tif (((<any>window).TouchEvent && e instanceof TouchEvent) || (e.touches || e.changedTouches)) {\r\n\t\t\te = e.touches.length > 0 ? e.touches[0] : e.changedTouches[0];\r\n\t\t}\r\n\r\n\t\tconst refPos: any = this._ngEl.nativeElement.getBoundingClientRect();\r\n\r\n\t\tlet left: number = e.clientX - refPos.left;\r\n\t\tlet top: number = e.clientY - refPos.top;\r\n\r\n\t\tif (this.cascade == 'down') top = refPos.top + refPos.height - e.clientY;\r\n\t\tif (this.cascade == 'right') left = refPos.left + refPos.width - e.clientX;\r\n\r\n\t\tif (this.isDragging && this._zoomOnDrag) {\r\n\t\t\tleft *= 2;\r\n\t\t\ttop *= 2;\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tleft: left,\r\n\t\t\ttop: top\r\n\t\t};\r\n\t}\r\n\r\n\tprivate _getAbsoluteMousePosition(e: any): NgGridRawPosition {\r\n\t\tif (((<any>window).TouchEvent && e instanceof TouchEvent) || (e.touches || e.changedTouches)) {\r\n\t\t\te = e.touches.length > 0 ? e.touches[0] : e.changedTouches[0];\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tleft: e.clientX,\r\n\t\t\ttop: e.clientY\r\n\t\t};\r\n\t}\r\n\r\n\tprivate _getContainerColumns(): number {\r\n\t\tconst maxWidth: number = this._ngEl.nativeElement.getBoundingClientRect().width;\r\n\t\treturn Math.floor(maxWidth / (this.colWidth + this.marginLeft + this.marginRight));\r\n\t}\r\n\r\n\tprivate _getItemFromPosition(position: NgGridRawPosition): NgGridItem {\r\n\t\tfor (let item of this._items) {\r\n\t\t\tconst size: NgGridItemDimensions = item.getDimensions();\r\n\t\t\tconst pos: NgGridRawPosition = item.getPosition();\r\n\r\n\t\t\tif (position.left > (pos.left + this.marginLeft) && position.left < (pos.left + this.marginLeft + size.width) &&\r\n\t\t\t\tposition.top > (pos.top + this.marginTop) && position.top < (pos.top + this.marginTop + size.height)) {\r\n\t\t\t\treturn item;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n\r\n\tprivate _createPlaceholder(item: NgGridItem): void {\r\n\t\tconst pos: NgGridItemPosition = item.getGridPosition();\r\n\t\tconst dims: NgGridItemSize = item.getSize();\r\n\r\n        const factory = this.componentFactoryResolver.resolveComponentFactory(NgGridPlaceholder);\r\n        var componentRef: ComponentRef<NgGridPlaceholder> = item.containerRef.createComponent(factory);\r\n        this._placeholderRef = componentRef;\r\n        const placeholder: NgGridPlaceholder = componentRef.instance;\r\n        placeholder.registerGrid(this);\r\n        placeholder.setCascadeMode(this.cascade);\r\n        placeholder.setGridPosition({ col: pos.col, row: pos.row });\r\n        placeholder.setSize({ x: dims.x, y: dims.y });\r\n\t}\r\n\r\n\tprivate _emitOnItemChange() {\r\n\t\tthis.onItemChange.emit(this._items.map((item: NgGridItem) => item.getEventOutput()));\r\n\t}\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/controls/nggrid/directives/NgGrid.ts","import { NgGrid } from './NgGrid';\r\nimport { NgGridItemConfig, NgGridItemEvent, NgGridItemPosition, NgGridItemSize, NgGridRawPosition, NgGridItemDimensions } from '../interfaces/INgGrid';\r\nimport { Component, Directive, ElementRef, Renderer, EventEmitter, Host, ViewEncapsulation, Type, ComponentRef, KeyValueDiffer, KeyValueDiffers, OnInit, OnDestroy, DoCheck, ViewContainerRef, Output } from '@angular/core';\r\n\r\n@Directive({\r\n\tselector: '[ngGridItem]',\r\n\tinputs: ['config: ngGridItem']\r\n})\r\nexport class NgGridItem implements OnInit, OnDestroy {\r\n\t//\tEvent Emitters\r\n\t@Output() public onItemChange: EventEmitter<NgGridItemEvent> = new EventEmitter<NgGridItemEvent>(false);\r\n\t@Output() public onDragStart: EventEmitter<NgGridItemEvent> = new EventEmitter<NgGridItemEvent>();\r\n\t@Output() public onDrag: EventEmitter<NgGridItemEvent> = new EventEmitter<NgGridItemEvent>();\r\n\t@Output() public onDragStop: EventEmitter<NgGridItemEvent> = new EventEmitter<NgGridItemEvent>();\r\n\t@Output() public onDragAny: EventEmitter<NgGridItemEvent> = new EventEmitter<NgGridItemEvent>();\r\n\t@Output() public onResizeStart: EventEmitter<NgGridItemEvent> = new EventEmitter<NgGridItemEvent>();\r\n\t@Output() public onResize: EventEmitter<NgGridItemEvent> = new EventEmitter<NgGridItemEvent>();\r\n\t@Output() public onResizeStop: EventEmitter<NgGridItemEvent> = new EventEmitter<NgGridItemEvent>();\r\n\t@Output() public onResizeAny: EventEmitter<NgGridItemEvent> = new EventEmitter<NgGridItemEvent>();\r\n\t@Output() public onChangeStart: EventEmitter<NgGridItemEvent> = new EventEmitter<NgGridItemEvent>();\r\n\t@Output() public onChange: EventEmitter<NgGridItemEvent> = new EventEmitter<NgGridItemEvent>();\r\n\t@Output() public onChangeStop: EventEmitter<NgGridItemEvent> = new EventEmitter<NgGridItemEvent>();\r\n\t@Output() public onChangeAny: EventEmitter<NgGridItemEvent> = new EventEmitter<NgGridItemEvent>();\r\n\t@Output() public ngGridItemChange: EventEmitter<NgGridItemConfig> = new EventEmitter<NgGridItemConfig>();\r\n\r\n\t//\tDefault config\r\n\tprivate static CONST_DEFAULT_CONFIG: NgGridItemConfig = {\r\n\t\tcol: 1,\r\n\t\trow: 1,\r\n\t\tsizex: 1,\r\n\t\tsizey: 1,\r\n\t\tdragHandle: null,\r\n\t\tresizeHandle: null,\r\n\t\tfixed: false,\r\n\t\tdraggable: true,\r\n\t\tresizable: true,\r\n\t\tborderSize: 25\r\n\t};\r\n\r\n\tpublic isFixed: boolean = false;\r\n\tpublic isDraggable: boolean = true;\r\n\tpublic isResizable: boolean = true;\r\n\tpublic minWidth: number = 0;\r\n\tpublic minHeight: number = 0;\r\n\r\n\t//\tPrivate variables\r\n\tprivate _payload: any;\r\n\tprivate _position: NgGridItemPosition = { col: 1, row: 1 };\r\n\tprivate _currentPosition: NgGridItemPosition = { col: 1, row: 1 };\r\n\tprivate _size: NgGridItemSize = { x: 1, y: 1 };\r\n\tprivate _config = NgGridItem.CONST_DEFAULT_CONFIG;\r\n\tprivate _dragHandle: string;\r\n\tprivate _resizeHandle: string;\r\n\tprivate _borderSize: number;\r\n\tprivate _elemWidth: number;\r\n\tprivate _elemHeight: number;\r\n\tprivate _elemLeft: number;\r\n\tprivate _elemTop: number;\r\n\tprivate _added: boolean = false;\r\n\tprivate _differ: KeyValueDiffer;\r\n\tprivate _cascadeMode: string;\r\n\tprivate _maxCols: number = 0;\r\n\tprivate _minCols: number = 0;\r\n\tprivate _maxRows: number = 0;\r\n\tprivate _minRows: number = 0;\r\n\r\n\t//\t[ng-grid-item] handler\r\n\tset config(v: NgGridItemConfig) {\r\n\t\tconst defaults = NgGridItem.CONST_DEFAULT_CONFIG;\r\n\r\n\t\tfor (let x in defaults)\r\n\t\t\tif (v[x] == null)\r\n\t\t\t\tv[x] = defaults[x];\r\n\r\n\t\tthis.setConfig(v);\r\n\r\n\t\tif (this._differ == null && v != null) {\r\n\t\t\tthis._differ = this._differs.find(this._config).create(null);\r\n\t\t}\r\n\r\n\t\tif (!this._added) {\r\n\t\t\tthis._added = true;\r\n\t\t\tthis._ngGrid.addItem(this);\r\n\t\t}\r\n\r\n\t\tthis._recalculateDimensions();\r\n\t\tthis._recalculatePosition();\r\n\t}\r\n\r\n\tget sizex(): number {\r\n\t\treturn this._size.x;\r\n\t}\r\n\r\n\tget sizey(): number {\r\n\t\treturn this._size.y;\r\n\t}\r\n\r\n\tget col(): number {\r\n\t\treturn this._position.col;\r\n\t}\r\n\r\n\tget row(): number {\r\n\t\treturn this._position.row;\r\n\t}\r\n\r\n\tget currentCol(): number {\r\n\t\treturn this._currentPosition.col;\r\n\t}\r\n\r\n\tget currentRow(): number {\r\n\t\treturn this._currentPosition.row;\r\n\t}\r\n\r\n\t//\tConstructor\r\n\tconstructor(private _differs: KeyValueDiffers, private _ngEl: ElementRef, private _renderer: Renderer, private _ngGrid: NgGrid, public containerRef: ViewContainerRef) { }\r\n\r\n\tpublic onResizeStartEvent(): void {\r\n\t\tconst event: NgGridItemEvent = this.getEventOutput();\r\n\t\tthis.onResizeStart.emit(event);\r\n\t\tthis.onResizeAny.emit(event);\r\n\t\tthis.onChangeStart.emit(event);\r\n\t\tthis.onChangeAny.emit(event);\r\n\t}\r\n\tpublic onResizeEvent(): void {\r\n\t\tconst event: NgGridItemEvent = this.getEventOutput();\r\n\t\tthis.onResize.emit(event);\r\n\t\tthis.onResizeAny.emit(event);\r\n\t\tthis.onChange.emit(event);\r\n\t\tthis.onChangeAny.emit(event);\r\n\t}\r\n\tpublic onResizeStopEvent(): void {\r\n\t\tconst event: NgGridItemEvent = this.getEventOutput();\r\n\t\tthis.onResizeStop.emit(event);\r\n\t\tthis.onResizeAny.emit(event);\r\n\t\tthis.onChangeStop.emit(event);\r\n\t\tthis.onChangeAny.emit(event);\r\n\r\n\t\tthis._config.sizex = this._size.x;\r\n\t\tthis._config.sizey = this._size.y;\r\n\t\tthis.ngGridItemChange.emit(this._config);\r\n\t}\r\n\tpublic onDragStartEvent(): void {\r\n\t\tconst event: NgGridItemEvent = this.getEventOutput();\r\n\t\tthis.onDragStart.emit(event);\r\n\t\tthis.onDragAny.emit(event);\r\n\t\tthis.onChangeStart.emit(event);\r\n\t\tthis.onChangeAny.emit(event);\r\n\t}\r\n\tpublic onDragEvent(): void {\r\n\t\tconst event: NgGridItemEvent = this.getEventOutput();\r\n\t\tthis.onDrag.emit(event);\r\n\t\tthis.onDragAny.emit(event);\r\n\t\tthis.onChange.emit(event);\r\n\t\tthis.onChangeAny.emit(event);\r\n\t}\r\n\tpublic onDragStopEvent(): void {\r\n\t\tconst event: NgGridItemEvent = this.getEventOutput();\r\n\t\tthis.onDragStop.emit(event);\r\n\t\tthis.onDragAny.emit(event);\r\n\t\tthis.onChangeStop.emit(event);\r\n\t\tthis.onChangeAny.emit(event);\r\n\r\n\t\tthis._config.col = this._position.col;\r\n\t\tthis._config.row = this._position.row;\r\n\t\tthis.ngGridItemChange.emit(this._config);\r\n\t}\r\n\tpublic onCascadeEvent(): void {\r\n\t\tthis._config.sizex = this._size.x;\r\n\t\tthis._config.sizey = this._size.y;\r\n\t\tthis._config.col = this._position.col;\r\n\t\tthis._config.row = this._position.row;\r\n\t\tthis.ngGridItemChange.emit(this._config);\r\n\t}\r\n\r\n\tpublic ngOnInit(): void {\r\n\t\tthis._renderer.setElementClass(this._ngEl.nativeElement, 'grid-item', true);\r\n\t\tif (this._ngGrid.autoStyle) this._renderer.setElementStyle(this._ngEl.nativeElement, 'position', 'absolute');\r\n\t\tthis._recalculateDimensions();\r\n\t\tthis._recalculatePosition();\r\n\r\n\t\tif (!this._added) {\r\n\t\t\tthis._added = true;\r\n\t\t\tthis._ngGrid.addItem(this);\r\n\t\t}\r\n\t}\r\n\r\n\t//\tPublic methods\r\n\tpublic canDrag(e: any): boolean {\r\n\t\tif (!this.isDraggable) return false;\r\n\r\n\t\tif (this._dragHandle) {\r\n\t\t\treturn this.findHandle(this._dragHandle, e.target);\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\tpublic findHandle(handleSelector: string, startElement: HTMLElement): boolean {\r\n\t\tlet targetElem: any = startElement;\r\n\r\n\t\twhile (targetElem && targetElem != this._ngEl.nativeElement) {\r\n\t\t\tif (this.elementMatches(targetElem, handleSelector)) return true;\r\n\r\n\t\t\ttargetElem = targetElem.parentElement;\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n\tpublic canResize(e: any): string {\r\n\t\tif (!this.isResizable) return null;\r\n\r\n\t\tif (this._resizeHandle) {\r\n\t\t\treturn this.findHandle(this._resizeHandle, e.target) ? 'both' : null;\r\n\t\t}\r\n\r\n\t\tconst mousePos: NgGridRawPosition = this._getMousePosition(e);\r\n\r\n\t\tif (mousePos.left < this._elemWidth && mousePos.left > this._elemWidth - this._borderSize\r\n\t\t\t&& mousePos.top < this._elemHeight && mousePos.top > this._elemHeight - this._borderSize) {\r\n\t\t\treturn 'both';\r\n\t\t} else if (mousePos.left < this._elemWidth && mousePos.left > this._elemWidth - this._borderSize) {\r\n\t\t\treturn 'width';\r\n\t\t} else if (mousePos.top < this._elemHeight && mousePos.top > this._elemHeight - this._borderSize) {\r\n\t\t\treturn 'height';\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n\r\n\tpublic onMouseMove(e: any): void {\r\n\t\tif (this._ngGrid.autoStyle) {\r\n\t\t\tif (this._ngGrid.resizeEnable && !this._resizeHandle && this.isResizable) {\r\n\t\t\t\tconst mousePos: NgGridRawPosition = this._getMousePosition(e);\r\n\r\n\t\t\t\tif (mousePos.left < this._elemWidth && mousePos.left > this._elemWidth - this._borderSize\r\n\t\t\t\t\t&& mousePos.top < this._elemHeight && mousePos.top > this._elemHeight - this._borderSize) {\r\n\t\t\t\t\tthis._renderer.setElementStyle(this._ngEl.nativeElement, 'cursor', 'nwse-resize');\r\n\t\t\t\t} else if (mousePos.left < this._elemWidth && mousePos.left > this._elemWidth - this._borderSize) {\r\n\t\t\t\t\tthis._renderer.setElementStyle(this._ngEl.nativeElement, 'cursor', 'ew-resize');\r\n\t\t\t\t} else if (mousePos.top < this._elemHeight && mousePos.top > this._elemHeight - this._borderSize) {\r\n\t\t\t\t\tthis._renderer.setElementStyle(this._ngEl.nativeElement, 'cursor', 'ns-resize');\r\n\t\t\t\t} else if (this._ngGrid.dragEnable && this.canDrag(e)) {\r\n\t\t\t\t\tthis._renderer.setElementStyle(this._ngEl.nativeElement, 'cursor', 'move');\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis._renderer.setElementStyle(this._ngEl.nativeElement, 'cursor', 'default');\r\n\t\t\t\t}\r\n\t\t\t} else if (this._ngGrid.resizeEnable && this.canResize(e)) {\r\n\t\t\t\tthis._renderer.setElementStyle(this._ngEl.nativeElement, 'cursor', 'nwse-resize');\r\n\t\t\t} else if (this._ngGrid.dragEnable && this.canDrag(e)) {\r\n\t\t\t\tthis._renderer.setElementStyle(this._ngEl.nativeElement, 'cursor', 'move');\r\n\t\t\t} else {\r\n\t\t\t\tthis._renderer.setElementStyle(this._ngEl.nativeElement, 'cursor', 'default');\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tpublic ngOnDestroy(): void {\r\n\t\tif (this._added) this._ngGrid.removeItem(this);\r\n\t}\r\n\r\n\t//\tGetters\r\n\tpublic getElement(): ElementRef {\r\n\t\treturn this._ngEl;\r\n\t}\r\n\r\n\tpublic getDragHandle(): string {\r\n\t\treturn this._dragHandle;\r\n\t}\r\n\r\n\tpublic getResizeHandle(): string {\r\n\t\treturn this._resizeHandle;\r\n\t}\r\n\r\n\tpublic getDimensions(): NgGridItemDimensions {\r\n\t\treturn { 'width': this._elemWidth, 'height': this._elemHeight };\r\n\t}\r\n\r\n\tpublic getSize(): NgGridItemSize {\r\n\t\treturn this._size;\r\n\t}\r\n\r\n\tpublic getPosition(): NgGridRawPosition {\r\n\t\treturn { 'left': this._elemLeft, 'top': this._elemTop };\r\n\t}\r\n\r\n\tpublic getGridPosition(): NgGridItemPosition {\r\n\t\treturn this._currentPosition;\r\n\t}\r\n\r\n\tpublic getSavedPosition(): NgGridItemPosition {\r\n\t\treturn this._position;\r\n\t}\r\n\r\n\t//\tSetters\r\n\tpublic setConfig(config: NgGridItemConfig): void {\r\n\t\tthis._config = config;\r\n\r\n\t\tthis._payload = config.payload;\r\n\t\tthis._position.col = this._currentPosition.col = config.col ? config.col : NgGridItem.CONST_DEFAULT_CONFIG.col;\r\n\t\tthis._position.row = this._currentPosition.row = config.row ? config.row : NgGridItem.CONST_DEFAULT_CONFIG.row;\r\n\t\tthis._size.x = config.sizex ? config.sizex : NgGridItem.CONST_DEFAULT_CONFIG.sizex;\r\n\t\tthis._size.y = config.sizey ? config.sizey : NgGridItem.CONST_DEFAULT_CONFIG.sizey;\r\n\t\tthis._dragHandle = config.dragHandle;\r\n\t\tthis._resizeHandle = config.resizeHandle;\r\n\t\tthis._borderSize = config.borderSize;\r\n\t\tthis.isDraggable = config.draggable ? true : false;\r\n\t\tthis.isResizable = config.resizable ? true : false;\r\n\t\tthis.isFixed = config.fixed ? true : false;\r\n\r\n\t\tthis._maxCols = !isNaN(config.maxCols) && isFinite(config.maxCols) ? config.maxCols : 0;\r\n\t\tthis._minCols = !isNaN(config.minCols) && isFinite(config.minCols) ? config.minCols : 0;\r\n\t\tthis._maxRows = !isNaN(config.maxRows) && isFinite(config.maxRows) ? config.maxRows : 0;\r\n\t\tthis._minRows = !isNaN(config.minRows) && isFinite(config.minRows) ? config.minRows : 0;\r\n\r\n\t\tthis.minWidth = !isNaN(config.minWidth) && isFinite(config.minWidth) ? config.minWidth : 0;\r\n\t\tthis.minHeight = !isNaN(config.minHeight) && isFinite(config.minHeight) ? config.minHeight : 0;\r\n\r\n\t\tif (this._minCols > 0 && this._maxCols > 0 && this._minCols > this._maxCols) this._minCols = 0;\r\n\t\tif (this._minRows > 0 && this._maxRows > 0 && this._minRows > this._maxRows) this._minRows = 0;\r\n\r\n\t\tif (this._added) {\r\n\t\t\tthis._ngGrid.updateItem(this);\r\n\t\t}\r\n\r\n\t\tthis._size = this.fixResize(this._size);\r\n\r\n\t\tthis._recalculatePosition();\r\n\t\tthis._recalculateDimensions();\r\n\t}\r\n\r\n\tpublic ngDoCheck(): boolean {\r\n\t\tif (this._differ != null) {\r\n\t\t\tconst changes: any = this._differ.diff(this._config);\r\n\r\n\t\t\tif (changes != null) {\r\n\t\t\t\tthis._applyChanges(changes);\r\n\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n\tpublic setSize(newSize: NgGridItemSize, update: boolean = true): void {\r\n\t\tnewSize = this.fixResize(newSize);\r\n\t\tthis._size = newSize;\r\n\t\tif (update) this._recalculateDimensions();\r\n\r\n\t\tthis.onItemChange.emit(this.getEventOutput());\r\n\t}\r\n\r\n\tpublic setGridPosition(gridPosition: NgGridItemPosition, update: boolean = true): void {\r\n\t\tthis._currentPosition = gridPosition;\r\n\t\tif (update) this._recalculatePosition();\r\n\r\n\t\tthis.onItemChange.emit(this.getEventOutput());\r\n\t}\r\n\r\n\tpublic savePosition(newPosition: NgGridItemPosition): void {\r\n\t\tthis._position = newPosition;\r\n\t\tthis._currentPosition = newPosition;\r\n\r\n\t\tthis._recalculatePosition();\r\n\r\n\t\tthis.onItemChange.emit(this.getEventOutput());\r\n\t}\r\n\r\n\tpublic getEventOutput(): NgGridItemEvent {\r\n\t\treturn <NgGridItemEvent>{\r\n\t\t\tpayload: this._payload,\r\n\t\t\tcol: this._currentPosition.col,\r\n\t\t\trow: this._currentPosition.row,\r\n\t\t\tsizex: this._size.x,\r\n\t\t\tsizey: this._size.y,\r\n\t\t\twidth: this._elemWidth,\r\n\t\t\theight: this._elemHeight,\r\n\t\t\tleft: this._elemLeft,\r\n\t\t\ttop: this._elemTop\r\n\t\t};\r\n\t}\r\n\r\n\tpublic setPosition(x: number, y: number): void {\r\n\t\tswitch (this._cascadeMode) {\r\n\t\t\tcase 'up':\r\n\t\t\tcase 'left':\r\n\t\t\tdefault:\r\n\t\t\t\tthis._renderer.setElementStyle(this._ngEl.nativeElement, 'transform', 'translate(' + x + 'px, ' + y + 'px)');\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'right':\r\n\t\t\t\tthis._renderer.setElementStyle(this._ngEl.nativeElement, 'transform', 'translate(' + -x + 'px, ' + y + 'px)');\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'down':\r\n\t\t\t\tthis._renderer.setElementStyle(this._ngEl.nativeElement, 'transform', 'translate(' + x + 'px, ' + -y + 'px)');\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tthis._elemLeft = x;\r\n\t\tthis._elemTop = y;\r\n\t}\r\n\r\n\tpublic setCascadeMode(cascade: string): void {\r\n\t\tthis._cascadeMode = cascade;\r\n\t\tswitch (cascade) {\r\n\t\t\tcase 'up':\r\n\t\t\tcase 'left':\r\n\t\t\tdefault:\r\n\t\t\t\tthis._renderer.setElementStyle(this._ngEl.nativeElement, 'left', '0px');\r\n\t\t\t\tthis._renderer.setElementStyle(this._ngEl.nativeElement, 'top', '0px');\r\n\t\t\t\tthis._renderer.setElementStyle(this._ngEl.nativeElement, 'right', null);\r\n\t\t\t\tthis._renderer.setElementStyle(this._ngEl.nativeElement, 'bottom', null);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'right':\r\n\t\t\t\tthis._renderer.setElementStyle(this._ngEl.nativeElement, 'right', '0px');\r\n\t\t\t\tthis._renderer.setElementStyle(this._ngEl.nativeElement, 'top', '0px');\r\n\t\t\t\tthis._renderer.setElementStyle(this._ngEl.nativeElement, 'left', null);\r\n\t\t\t\tthis._renderer.setElementStyle(this._ngEl.nativeElement, 'bottom', null);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'down':\r\n\t\t\t\tthis._renderer.setElementStyle(this._ngEl.nativeElement, 'left', '0px');\r\n\t\t\t\tthis._renderer.setElementStyle(this._ngEl.nativeElement, 'bottom', '0px');\r\n\t\t\t\tthis._renderer.setElementStyle(this._ngEl.nativeElement, 'right', null);\r\n\t\t\t\tthis._renderer.setElementStyle(this._ngEl.nativeElement, 'top', null);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic setDimensions(w: number, h: number): void {\r\n\t\tif (w < this.minWidth) w = this.minWidth;\r\n\t\tif (h < this.minHeight) h = this.minHeight;\r\n\r\n\t\tthis._renderer.setElementStyle(this._ngEl.nativeElement, 'width', w + 'px');\r\n\t\tthis._renderer.setElementStyle(this._ngEl.nativeElement, 'height', h + 'px');\r\n\r\n\t\tthis._elemWidth = w;\r\n\t\tthis._elemHeight = h;\r\n\t}\r\n\r\n\tpublic startMoving(): void {\r\n\t\tthis._renderer.setElementClass(this._ngEl.nativeElement, 'moving', true);\r\n\t\tconst style: any = window.getComputedStyle(this._ngEl.nativeElement);\r\n\t\tif (this._ngGrid.autoStyle) this._renderer.setElementStyle(this._ngEl.nativeElement, 'z-index', (parseInt(style.getPropertyValue('z-index')) + 1).toString());\r\n\t}\r\n\r\n\tpublic stopMoving(): void {\r\n\t\tthis._renderer.setElementClass(this._ngEl.nativeElement, 'moving', false);\r\n\t\tconst style: any = window.getComputedStyle(this._ngEl.nativeElement);\r\n\t\tif (this._ngGrid.autoStyle) this._renderer.setElementStyle(this._ngEl.nativeElement, 'z-index', (parseInt(style.getPropertyValue('z-index')) - 1).toString());\r\n\t}\r\n\r\n\tpublic recalculateSelf(): void {\r\n\t\tthis._recalculatePosition();\r\n\t\tthis._recalculateDimensions();\r\n\t}\r\n\r\n\tpublic fixResize(newSize: NgGridItemSize): NgGridItemSize {\r\n\t\tif (this._maxCols > 0 && newSize.x > this._maxCols) newSize.x = this._maxCols;\r\n\t\tif (this._maxRows > 0 && newSize.y > this._maxRows) newSize.y = this._maxRows;\r\n\r\n\t\tif (this._minCols > 0 && newSize.x < this._minCols) newSize.x = this._minCols;\r\n\t\tif (this._minRows > 0 && newSize.y < this._minRows) newSize.y = this._minRows;\r\n\r\n\t\tconst itemWidth = (newSize.x * this._ngGrid.colWidth) + ((this._ngGrid.marginLeft + this._ngGrid.marginRight) * (newSize.x - 1));\r\n\t\tif (itemWidth < this.minWidth) newSize.x = Math.ceil((this.minWidth + this._ngGrid.marginRight + this._ngGrid.marginLeft) / (this._ngGrid.colWidth + this._ngGrid.marginRight + this._ngGrid.marginLeft));\r\n\r\n\t\tconst itemHeight = (newSize.y * this._ngGrid.rowHeight) + ((this._ngGrid.marginTop + this._ngGrid.marginBottom) * (newSize.y - 1));\r\n\t\tif (itemHeight < this.minHeight) newSize.y = Math.ceil((this.minHeight + this._ngGrid.marginBottom + this._ngGrid.marginTop) / (this._ngGrid.rowHeight + this._ngGrid.marginBottom + this._ngGrid.marginTop));\r\n\r\n\t\treturn newSize;\r\n\t}\r\n\r\n\t//\tPrivate methods\r\n\tprivate elementMatches(element: any, selector: string): boolean {\r\n\t\tif (element.matches) return element.matches(selector);\r\n\t\tif (element.oMatchesSelector) return element.oMatchesSelector(selector);\r\n\t\tif (element.msMatchesSelector) return element.msMatchesSelector(selector);\r\n\t\tif (element.mozMatchesSelector) return element.mozMatchesSelector(selector);\r\n\t\tif (element.webkitMatchesSelector) return element.webkitMatchesSelector(selector);\r\n\r\n\t\tconst matches: any = (element.document || element.ownerDocument).querySelectorAll(selector);\r\n\t\tlet i: number = matches.length;\r\n\t\twhile (--i >= 0 && matches.item(i) !== element) { }\r\n\t\treturn i > -1;\r\n\t}\r\n\r\n\tprivate _recalculatePosition(): void {\r\n\t\tconst x: number = (this._ngGrid.colWidth + this._ngGrid.marginLeft + this._ngGrid.marginRight) * (this._currentPosition.col - 1) + this._ngGrid.marginLeft;\r\n\t\tconst y: number = (this._ngGrid.rowHeight + this._ngGrid.marginTop + this._ngGrid.marginBottom) * (this._currentPosition.row - 1) + this._ngGrid.marginTop;\r\n\r\n\t\tthis.setPosition(x, y);\r\n\t}\r\n\r\n\tprivate _recalculateDimensions(): void {\r\n\t\tif (this._size.x < this._ngGrid.minCols) this._size.x = this._ngGrid.minCols;\r\n\t\tif (this._size.y < this._ngGrid.minRows) this._size.y = this._ngGrid.minRows;\r\n\r\n\t\tconst newWidth: number = (this._ngGrid.colWidth * this._size.x) + ((this._ngGrid.marginLeft + this._ngGrid.marginRight) * (this._size.x - 1));\r\n\t\tconst newHeight: number = (this._ngGrid.rowHeight * this._size.y) + ((this._ngGrid.marginTop + this._ngGrid.marginBottom) * (this._size.y - 1));\r\n\r\n\t\tconst w: number = Math.max(this.minWidth, this._ngGrid.minWidth, newWidth);\r\n\t\tconst h: number = Math.max(this.minHeight, this._ngGrid.minHeight, newHeight);\r\n\r\n\t\tthis.setDimensions(w, h);\r\n\t}\r\n\r\n\tprivate _getMousePosition(e: any): NgGridRawPosition {\r\n\t\tif (e.originalEvent && e.originalEvent.touches) {\r\n\t\t\tconst oe: any = e.originalEvent;\r\n\t\t\te = oe.touches.length ? oe.touches[0] : (oe.changedTouches.length ? oe.changedTouches[0] : e);\r\n\t\t} else if (e.touches) {\r\n\t\t\te = e.touches.length ? e.touches[0] : (e.changedTouches.length ? e.changedTouches[0] : e);\r\n\t\t}\r\n\r\n\r\n\t\tconst refPos: NgGridRawPosition = this._ngEl.nativeElement.getBoundingClientRect();\r\n\r\n\t\treturn {\r\n\t\t\tleft: e.clientX - refPos.left,\r\n\t\t\ttop: e.clientY - refPos.top\r\n\t\t};\r\n\t}\r\n\r\n\tprivate _applyChanges(changes: any): void {\r\n\t\tchanges.forEachAddedItem((record: any) => { this._config[record.key] = record.currentValue; });\r\n\t\tchanges.forEachChangedItem((record: any) => { this._config[record.key] = record.currentValue; });\r\n\t\tchanges.forEachRemovedItem((record: any) => { delete this._config[record.key]; });\r\n\r\n\t\tthis.setConfig(this._config);\r\n\t}\r\n}\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/controls/nggrid/directives/NgGridItem.ts","export * from './directives/NgGrid';\r\nexport * from './directives/NgGridItem';\r\nexport * from './components/NgGridPlaceholder';\r\nexport * from './interfaces/INgGrid';\r\nexport * from './modules/NgGrid.module';\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/controls/nggrid/main.ts","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { NgGrid, NgGridItem, NgGridItemConfig, NgGridItemEvent, NgGridPlaceholder } from '../main';\n\n@NgModule({\n  declarations:     [ NgGrid, NgGridItem, NgGridPlaceholder ],\n  entryComponents:  [ NgGridPlaceholder ],\n  exports:          [ NgGrid, NgGridItem ]\n})\nexport class NgGridModule {}\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/controls/nggrid/modules/NgGrid.module.ts"],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;ACPA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AAOA;AA+DA;AAAA;AAGA;AACA;AACA;AAlvCA;AAAA;AACA;AACA;AACA;AACA;;AAAA;AAgcA;;AAAA;AA/bA;;;;;;;;;;;AClCA;AAMA;AAAA;AAAA;AAJA;AAAA;AACA;AACA;AACA;;AAAA;AACA;AAAA;AAAA;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAsBA;AAAA;AAAA;AApBA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAAA;AACA;AAAA;AAAA;;;;;;;;;;ACzCA;AAMA;AAAA;AAAA;AAJA;AAAA;AACA;AACA;AACA;;AAAA;AACA;AAAA;AAAA;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACRA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;;;ACGA;AAMA;AAMA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAzFA;AAAA;AACA;AACA;AACA;;AAAA;AAuFA;;AAAA;AAtFA;;;;;;;;;;ACTA;AAGA;AAiBA;AA2FA;AACA;AAAA;AACA;AACA;AACA;AACA;AA/FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAuBA;AAgBA;AAbjsCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA7EA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AAvBA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAAA;AA8vCA;;AAAA;AA7vCA;;;;;;;;;;ACpBA;AAEA;AAMA;AAyGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAzGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAgBA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAQA;AAGA;AACA;AACA;AACA;AAkDA;AA/CA;AADA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;;;AAAA;AAEA;AAAA;AACA;AACA;;;AAAA;AAEA;AAAA;AACA;AACA;;;AAAA;AAEA;AAAA;AACA;AACA;;;AAAA;AAEA;AAAA;AACA;AACA;;;AAAA;AAEA;AAAA;AACA;AACA;;;AAAA;AAEA;AAAA;AACA;AACA;;;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAEA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAxfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA3BA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AAnBA;AAAA;AACA;AACA;AACA;;AAAA;AA2gBA;;AAAA;AA1gBA;;;;;;;;;;;;;;;;;;;;;;ACRA;AACA;AACA;AACA;AACA;;;;;;;;;;ACJA;AACA;AAOA;AAAA;AAAA;AALA;AAAA;AACA;AACA;AACA;AACA;;AAAA;AACA;AAAA;AAAA;;;;;","sourceRoot":""}