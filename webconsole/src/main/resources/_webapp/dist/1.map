{"version":3,"file":"1.chunk.js","sources":["webpack:///./src/app/watchers/templates/css/main.css","webpack:///./src/app/watchers/templates/css/prov.css","webpack:///./src/app/watchers/templates/css/statuses.css","webpack:///./src/app/watchers/components/checkers.component.ts","webpack:///./src/app/watchers/components/condition.block.ts","webpack:///./src/app/watchers/components/policies.component.ts","webpack:///./src/app/watchers/components/ptable.component.ts","webpack:///./src/app/watchers/components/templates/checkers.html","webpack:///./src/app/watchers/components/templates/condition.html","webpack:///./src/app/watchers/components/templates/policies.html","webpack:///./src/app/watchers/components/templates/ptable.component.html","webpack:///./src/app/watchers/components/templates/trigger.html","webpack:///./src/app/watchers/components/trigger.component.ts","webpack:///./src/app/watchers/model/colored.checker.ts","webpack:///./src/app/watchers/model/colored.predicate.ts","webpack:///./src/app/watchers/model/constant.attribute.predicate.ts","webpack:///./src/app/watchers/model/entity.ts","webpack:///./src/app/watchers/model/factory.ts","webpack:///./src/app/watchers/model/number.comparator.predicate.ts","webpack:///./src/app/watchers/model/policy/abstract.policy.ts","webpack:///./src/app/watchers/model/policy/abstract.weighted.scaling.policy.ts","webpack:///./src/app/watchers/model/policy/attribute.based.scaling.policy.ts","webpack:///./src/app/watchers/model/policy/health.status.based.scaling.policy.ts","webpack:///./src/app/watchers/model/policy/operational.range.ts","webpack:///./src/app/watchers/model/range.comparator.ts","webpack:///./src/app/watchers/model/scriptlet.data.object.ts","webpack:///./src/app/watchers/model/watcher.ts","webpack:///./src/app/watchers/templates/css/main.css?2840","webpack:///./src/app/watchers/templates/css/prov.css?6957","webpack:///./src/app/watchers/templates/css/statuses.css?0241","webpack:///./src/app/watchers/templates/main.html","webpack:///./src/app/watchers/templates/prov.html","webpack:///./src/app/watchers/templates/statuses.html","webpack:///./src/app/watchers/templates/template.html","webpack:///./src/app/watchers/watchers.dashboard.ts","webpack:///./src/app/watchers/watchers.modules.ts","webpack:///./src/app/watchers/watchers.pipes.ts","webpack:///./src/app/watchers/watchers.prov.ts","webpack:///./src/app/watchers/watchers.template.ts","webpack:///./src/app/watchers/watchers.view.ts"],"sourcesContent":["exports = module.exports = require(\"./../../../../../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \".form-group {\\r\\n    margin-bottom: 10px;\\r\\n    display: flex;\\r\\n}\\r\\n\\r\\n.btn-inline {\\r\\n    display: inline-block;\\r\\n    margin-left: 15px;\\r\\n}\\r\\n\\r\\n.btn-pull-right {\\r\\n    margin-top:20px;\\r\\n    float:right;\\r\\n    margin-right: 20px;\\r\\n}\\r\\n\\r\\n.row-margin-bottom-sm {\\r\\n    margin-bottom: 15px;\\r\\n}\\r\\n\\r\\n.activeTr {\\r\\n    border-left: 2px solid rgb(30, 6, 255) !important;\\r\\n    background-color: #b9c7de;\\r\\n}\\r\\n\\r\\n.img-inline {\\r\\n    display: inline-block;\\r\\n    margin-right: 10px;\\r\\n    padding: 3px;\\r\\n}\\r\\n\\r\\n.clickableTr {\\r\\n    cursor: pointer;\\r\\n}\\r\\n\\r\\n.input-group-addon {\\r\\n    border: 0 !important;\\r\\n    background-color: rgba(0,0,0,0) !important;\\r\\n}\\r\\n\\r\\n.active-tr {\\r\\n    border-left: 2px solid rgb(30, 6, 255) !important;\\r\\n}\", \"\"]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-loader!./src/app/watchers/templates/css/main.css\n// module id = ./node_modules/css-loader/index.js!./src/app/watchers/templates/css/main.css\n// module chunks = 1","exports = module.exports = require(\"./../../../../../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \"\", \"\"]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-loader!./src/app/watchers/templates/css/prov.css\n// module id = ./node_modules/css-loader/index.js!./src/app/watchers/templates/css/prov.css\n// module chunks = 1","exports = module.exports = require(\"./../../../../../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \"/* grid-item\\r\\n------------------------- */\\r\\n\\r\\n.grid-item {\\r\\n  position: relative;\\r\\n  float: left;\\r\\n  width: 123px;\\r\\n  height: 123px;\\r\\n  margin: 10px;\\r\\n  padding: 10px;\\r\\n  background: #888;\\r\\n  color: #262524;\\r\\n}\\r\\n\\r\\n.componentOk {\\r\\n  background: #228B22 !important;\\r\\n}\\r\\n\\r\\n.componentError  {\\r\\n  background: #F08080 !important;\\r\\n}\\r\\n\\r\\n.grid-item > * {\\r\\n  margin: 0;\\r\\n  padding: 0;\\r\\n}\\r\\n\\r\\n.grid-item .name {\\r\\n  position: absolute;\\r\\n\\r\\n  left: 10px;\\r\\n  top: 55px;\\r\\n  text-transform: none;\\r\\n  letter-spacing: 0;\\r\\n  font-weight: normal;\\r\\n}\\r\\n\\r\\n.grid-item .symbol {\\r\\n  position: absolute;\\r\\n  left: 10px;\\r\\n  top: 0px;\\r\\n  font-weight: bold;\\r\\n  color: white;\\r\\n}\\r\\n\\r\\n.grid-item .number {\\r\\n  position: absolute;\\r\\n  right: 8px;\\r\\n  top: 5px;\\r\\n}\\r\\n\\r\\n.grid-item .weight {\\r\\n  position: absolute;\\r\\n  left: 9px;\\r\\n  top: 107px;\\r\\n  font-size: 0.8em;\\r\\n}\\r\\n\\r\\n.grid-item .bundleInfo {\\r\\n  position: absolute;\\r\\n  left: 117px;\\r\\n  top: 117px;\\r\\n  font-size: medium;\\r\\n}\\r\\n\\r\\n.grid-item-link {\\r\\n    display: inline-block;\\r\\n    border: 1px solid #dddddd;\\r\\n    border-radius: 4px;\\r\\n    -webkit-transition: border 0.2s ease-in-out;\\r\\n    -o-transition: border 0.2s ease-in-out;\\r\\n    transition: border 0.2s ease-in-out;\\r\\n    margin: 5px 5px 20px 5px;\\r\\n}\\r\\n\\r\\na.grid-item-link:hover,\\r\\na.grid-item-link:focus,\\r\\na.grid-item-link.active {\\r\\n  border-color: #337ab7;\\r\\n}\", \"\"]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-loader!./src/app/watchers/templates/css/statuses.css\n// module id = ./node_modules/css-loader/index.js!./src/app/watchers/templates/css/statuses.css\n// module chunks = 1","import { Component, Input, OnInit } from '@angular/core';\r\nimport { ScriptletDataObject } from '../model/scriptlet.data.object';\r\n\r\nimport { ColoredAttributePredicate } from '../model/colored.predicate';\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'checkers',\r\n  template: require('./templates/checkers.html'),\r\n  styles: ['.btn-inline { display: inline-block; margin-left: 15px; } .normalspaces {  white-space: normal; }']\r\n})\r\nexport class CheckersComponent {\r\n    @Input() entity:{ [key:string]:ScriptletDataObject; } = {};\r\n    @Input() hideDetails:boolean = false;\r\n}\r\n\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/watchers/components/checkers.component.ts","import { Component, Input, Output, EventEmitter, OnInit } from '@angular/core';\r\nimport { ColoredAttributePredicate } from '../model/colored.predicate';\r\n\r\nimport { ConstantAttributePredicate } from '../model/constant.attribute.predicate';\r\nimport { NumberComparatorPredicate } from '../model/number.comparator.predicate';\r\nimport { IsInRangePredicate } from '../model/range.comparator';\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'coloredCondition',\r\n  template: require('./templates/condition.html')\r\n})\r\nexport class ColoredCondition {\r\n    @Input() entity: ColoredAttributePredicate = undefined;\r\n    @Output() notify: EventEmitter<ColoredAttributePredicate> = new EventEmitter<ColoredAttributePredicate>();\r\n\r\n    entityType: string = \"\";\r\n\r\n    conditionsType:EntityWithDescription[] = EntityWithDescription.generateConditionsTypes();\r\n    constantExpressions:EntityWithDescription[] = EntityWithDescription.generateTrueFalseTypes();\r\n    operators:EntityWithDescription[] = EntityWithDescription.generateOperatorsTypes();\r\n    rangeOperators:EntityWithDescription[] = EntityWithDescription.generateRangeTypes();\r\n\r\n    public isConstantType():boolean {\r\n        return (this.entity instanceof ConstantAttributePredicate);\r\n    }\r\n\r\n    public isOperatorType():boolean {\r\n        return (this.entity instanceof NumberComparatorPredicate);\r\n    }\r\n\r\n    public isRangeType():boolean {\r\n        return (this.entity instanceof IsInRangePredicate);\r\n    }\r\n\r\n    public onTypeChange(event:string):void {\r\n         switch (event) {\r\n             case \"ConstantAttributePredicate\":\r\n                this.entity = new ConstantAttributePredicate();\r\n                break;\r\n             case \"NumberComparatorPredicate\":\r\n                 this.entity = new NumberComparatorPredicate();\r\n                 break;\r\n             case \"IsInRangePredicate\":\r\n                 this.entity = new IsInRangePredicate();\r\n                 break;\r\n             default:\r\n                throw new Error(\"Could not recognize yellow checker type: \" + event);\r\n        }\r\n        this.entityType = event;\r\n        this.notify.emit(this.entity);\r\n    }\r\n\r\n    public onAnyChange():void {\r\n        this.notify.emit(this.entity);\r\n    }\r\n\r\n    ngOnInit():void {\r\n        this.entityType = (this.entity != undefined) ?  this.entity.constructor.name : \"\";\r\n    }\r\n\r\n    ngAfterViewInit():void {\r\n        console.log(\"Entity: \", this.entity, \", entityType: \", this.entityType);\r\n    }\r\n\r\n}\r\n\r\nexport class EntityWithDescription {\r\n    id:any;\r\n    description:string;\r\n\r\n    constructor(id:any, description:string) {\r\n        this.id = id;\r\n        this.description = description;\r\n    }\r\n\r\n    public static generateConditionsTypes():EntityWithDescription[] {\r\n        let _value:EntityWithDescription[] = [];\r\n        _value.push(new EntityWithDescription(\"ConstantAttributePredicate\", \"Boolean constant\"));\r\n        _value.push(new EntityWithDescription(\"NumberComparatorPredicate\", \"Compare with certain value\"));\r\n        _value.push(new EntityWithDescription(\"IsInRangePredicate\", \"Range comparator\"));\r\n        return _value;\r\n    }\r\n\r\n    public static generateTrueFalseTypes():EntityWithDescription[] {\r\n        let _value:EntityWithDescription[] = [];\r\n        _value.push(new EntityWithDescription(true, \"True\"));\r\n        _value.push(new EntityWithDescription(false, \"False\"));\r\n        return _value;\r\n    }\r\n\r\n    public static generateOperatorsTypes():EntityWithDescription[] {\r\n        let _value:EntityWithDescription[] = [];\r\n        _value.push(new EntityWithDescription(\"GREATER_THAN\", \">\"));\r\n        _value.push(new EntityWithDescription(\"GREATER_THAN_OR_EQUAL\", \"≥\"));\r\n        _value.push(new EntityWithDescription(\"LESS_THAN\", \"<\"));\r\n        _value.push(new EntityWithDescription(\"LESS_THAN_OR_EQUAL\", \"≤\"));\r\n        _value.push(new EntityWithDescription(\"EQUAL\", \"=\"));\r\n        _value.push(new EntityWithDescription(\"NOT_EQUAL\", \"≠\"));\r\n        return _value;\r\n    }\r\n\r\n    public static generateRangeTypes():EntityWithDescription[] {\r\n        let _value:EntityWithDescription[] = [];\r\n        _value.push(new EntityWithDescription(false, \">\"));\r\n        _value.push(new EntityWithDescription(true, \"≥\"));\r\n        return _value;\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/watchers/components/condition.block.ts","import { Component, Input, OnInit } from '@angular/core';\r\nimport { ScriptletDataObject } from '../model/scriptlet.data.object';\r\nimport { AbstractPolicy } from \"../model/policy/abstract.policy\";\r\nimport { AttributeBasedScalingPolicy } from \"../model/policy/attribute.based.scaling.policy\";\r\nimport { HealthStatusBasedScalingPolicy } from \"../model/policy/health.status.based.scaling.policy\";\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'policies',\r\n  template: require('./templates/policies.html'),\r\n  styles: ['.btn-inline { display: inline-block; margin-left: 15px; } .normalspaces {  white-space: normal; }']\r\n})\r\nexport class PoliciesComponent {\r\n    @Input() entity:{ [key:string]:ScriptletDataObject; } = {};\r\n    @Input() hideDetails:boolean = false;\r\n\r\n    isAttrType(policy:AbstractPolicy):boolean {\r\n        return policy instanceof AttributeBasedScalingPolicy;\r\n    }\r\n    isHealthStatusType(policy:AbstractPolicy):boolean {\r\n        return policy instanceof HealthStatusBasedScalingPolicy;\r\n    }\r\n}\r\n\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/watchers/components/policies.component.ts","import { Component, Input, OnInit, ViewEncapsulation, ViewChildren, QueryList, ChangeDetectorRef } from '@angular/core';\r\nimport { Entity, KeyValue } from '../../configuration/model/model.entity';\r\nimport { InlineEditComponent } from '../../controls/editor/inline-edit.component';\r\nimport { VEXBuiltInThemes, Modal } from 'angular2-modal/plugins/vex';\r\n\r\n@Component({\r\n    moduleId: module.id,\r\n    selector: 'ptable',\r\n    template: require('./templates/ptable.component.html'),\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class PTable implements OnInit {\r\n    @Input() entity: Entity;\r\n    @ViewChildren(InlineEditComponent) editComponents: QueryList<InlineEditComponent>;\r\n\r\n    constructor(public modal: Modal, private cd: ChangeDetectorRef) {}\r\n\r\n    ngOnInit():void {}\r\n\r\n    checkAndRemoveParameter(parameter:KeyValue):void {\r\n        this.modal.confirm()\r\n            .className(<VEXBuiltInThemes>'default')\r\n            .isBlocking(true)\r\n            .keyboard(27)\r\n            .message(\"Remove parameter \" + parameter.key + \"?\")\r\n            .open()\r\n            .then((resultPromise) => {\r\n                return (<Promise<boolean>>resultPromise.result)\r\n                    .then((response) => {\r\n                        this.entity.removeParameter(parameter.key);\r\n                        return response;\r\n                    })\r\n                    .catch(() =>  false);\r\n            }).catch(() =>  false);\r\n    }\r\n\r\n    addNewParameter():void {\r\n        this.entity.parameters.push(new KeyValue(\"newParamKey\", \"newParamValue\"));\r\n        this.cd.detectChanges();\r\n    }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/watchers/components/ptable.component.ts","module.exports = \"<div>\\r\\n    <dl class=\\\"row\\\" *ngFor=\\\"let entry of entity | keys\\\">\\r\\n\\r\\n        <div class=\\\"modal fade\\\" *ngIf=\\\"!hideDetails\\\" [attr.id]=\\\"'details_' + entry.value.id\\\" tabindex=\\\"-1\\\" role=\\\"dialog\\\" aria-labelledby=\\\"detailsLabel\\\">\\r\\n            <div class=\\\"modal-dialog modal-lg\\\" role=\\\"document\\\">\\r\\n                <div class=\\\"modal-content\\\">\\r\\n                    <div class=\\\"modal-header\\\">\\r\\n                        <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\" aria-label=\\\"Close\\\"><span aria-hidden=\\\"true\\\">&times;</span></button>\\r\\n                        <h4 class=\\\"modal-title leftAlign\\\" id=\\\"detailsLabel\\\">Entity {{entry.value.name}} details</h4>\\r\\n                    </div>\\r\\n                    <br/>\\r\\n                    <div class=\\\"modal-body\\\" *ngIf=\\\"entry.value.object == undefined\\\">\\r\\n                        <pre class=\\\"normalspaces\\\"><code [innerHTML]=\\\"entry.value.script\\\"></code></pre>\\r\\n                    </div>\\r\\n                    <div class=\\\"modal-body\\\" *ngIf=\\\"entry.value.object != undefined\\\">\\r\\n                        <div class=\\\"alert alert-success\\\">\\r\\n                            <strong>Green condition: </strong>\\r\\n                            <div>\\r\\n                                <strong>{{entry.value.object.green.represent()}}</strong>\\r\\n                            </div>\\r\\n                        </div>\\r\\n\\r\\n                        <div class=\\\"alert alert-warning\\\">\\r\\n                            <strong>Yellow condition: </strong>\\r\\n                            <div>\\r\\n                                <strong>{{entry.value.object.yellow.represent()}}</strong>\\r\\n                            </div>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                    <div class=\\\"modal-footer\\\">\\r\\n                        <button type=\\\"button\\\" class=\\\"btn btn-default\\\" data-dismiss=\\\"modal\\\">Close</button>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n        <dt class=\\\"col-sm-3\\\">Attribute:</dt>\\r\\n        <dd class=\\\"col-sm-9\\\">{{entry.key}}</dd>\\r\\n\\r\\n        <dt class=\\\"col-sm-3\\\">Language:</dt>\\r\\n        <dd class=\\\"col-sm-9\\\">{{entry.value.language}}</dd>\\r\\n\\r\\n        <dt class=\\\"col-sm-3\\\">Is url:</dt>\\r\\n        <dd class=\\\"col-sm-9\\\">{{entry.value.isURL}}</dd>\\r\\n\\r\\n        <dt class=\\\"col-sm-3\\\">Script:</dt>\\r\\n        <dd class=\\\"col-sm-9\\\">\\r\\n            <button *ngIf=\\\"!hideDetails\\\"\\r\\n                    class=\\\"center-block btn btn-inline btn-sm\\\"\\r\\n                    data-toggle=\\\"modal\\\"\\r\\n                    [attr.data-target]=\\\"'#details_' + entry.value.id\\\">\\r\\n                <i class=\\\"fa fa-search\\\"></i> Details\\r\\n            </button>\\r\\n        </dd>\\r\\n    </dl>\\r\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/watchers/components/templates/checkers.html\n// module id = ./src/app/watchers/components/templates/checkers.html\n// module chunks = 1","module.exports = \"<div class=\\\"item form-inline\\\" style=\\\"margin-bottom: 15px;\\\">\\r\\n    <label\\r\\n            class=\\\"control-label col-md-3 col-sm-3 col-xs-12\\\"\\r\\n            style=\\\"margin-top: 7px;\\\">\\r\\n        Type of condition <span class=\\\"required\\\">*</span>\\r\\n    </label>\\r\\n    <select class=\\\"form-control\\\" [(ngModel)]=\\\"entityType\\\" (ngModelChange)=\\\"onTypeChange($event)\\\">\\r\\n        <option *ngFor=\\\"let type of conditionsType\\\" [ngValue]=\\\"type.id\\\">{{type.description}}</option>\\r\\n    </select>\\r\\n</div>\\r\\n\\r\\n<div *ngIf=\\\"isConstantType()\\\">\\r\\n    <div class=\\\"item form-inline\\\">\\r\\n        <label\\r\\n                class=\\\"custom-control col-md-3 col-sm-3 col-xs-8\\\"\\r\\n                style=\\\"margin-top: 7px;\\\">\\r\\n            Value is <span class=\\\"required\\\">*</span>\\r\\n        </label>\\r\\n        <select class=\\\"form-control col-md-1 col-sm-1 col-xs-4\\\" [(ngModel)]=\\\"entity.value\\\" (ngModelChange)=\\\"onAnyChange()\\\">\\r\\n            <option *ngFor=\\\"let exp of constantExpressions\\\" [ngValue]=\\\"exp.id\\\">{{exp.description}}</option>\\r\\n        </select>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<div *ngIf=\\\"isOperatorType()\\\">\\r\\n    <div class=\\\"item form-inline\\\">\\r\\n        <label\\r\\n                class=\\\"col-md-2 col-sm-2 col-xs-5\\\"\\r\\n                style=\\\"margin-top: 7px;\\\">\\r\\n            Value\\r\\n        </label>\\r\\n        <select class=\\\"form-control col-md-1 col-sm-1 col-xs-1\\\" [(ngModel)]=\\\"entity.operator\\\" (ngModelChange)=\\\"onAnyChange()\\\">\\r\\n            <option *ngFor=\\\"let operator of operators\\\" [ngValue]=\\\"operator.id\\\">{{operator.description}}</option>\\r\\n        </select>\\r\\n        <input type=\\\"number\\\" class=\\\"form-control col-md-offset-1 col-md-3 col-sm-3 col-xs-6\\\" [(ngModel)]=\\\"entity.value\\\" (ngModelChange)=\\\"onAnyChange()\\\"/>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<div *ngIf=\\\"isRangeType()\\\">\\r\\n    <div class=\\\"item form-inline\\\">\\r\\n        <input type=\\\"number\\\" class=\\\"form-control col-md-2 col-sm-2 col-xs-2\\\" [(ngModel)]=\\\"entity.rangeEnd\\\" (ngModelChange)=\\\"onAnyChange()\\\"/>\\r\\n        <select class=\\\"form-control col-md-1 col-sm-1 col-xs-1\\\" [(ngModel)]=\\\"entity.isRangeEndInclusive\\\" (ngModelChange)=\\\"onAnyChange()\\\">\\r\\n            <option *ngFor=\\\"let operator of rangeOperators\\\" [ngValue]=\\\"operator.id\\\">{{operator.description}}</option>\\r\\n        </select>\\r\\n        <label class=\\\"control-label col-md-1 col-sm-1 col-xs-1\\\" style=\\\"margin-top: 7px;\\\">\\r\\n            value\\r\\n        </label>\\r\\n        <select class=\\\"form-control col-md-1 col-sm-1 col-xs-1\\\" [(ngModel)]=\\\"entity.isRangeStartInclusive\\\" (ngModelChange)=\\\"onAnyChange()\\\">\\r\\n            <option *ngFor=\\\"let operator of rangeOperators\\\" [ngValue]=\\\"operator.id\\\">{{operator.description}}</option>\\r\\n        </select>\\r\\n        <input type=\\\"number\\\" class=\\\"form-control col-md-2 col-sm-2 col-xs-2\\\" [(ngModel)]=\\\"entity.rangeStart\\\" (ngModelChange)=\\\"onAnyChange()\\\"/>\\r\\n    </div>\\r\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/watchers/components/templates/condition.html\n// module id = ./src/app/watchers/components/templates/condition.html\n// module chunks = 1","module.exports = \"<div>\\r\\n    <dl class=\\\"row\\\" *ngFor=\\\"let entry of entity | keys\\\">\\r\\n\\r\\n        <div class=\\\"modal fade\\\" *ngIf=\\\"!hideDetails\\\" [attr.id]=\\\"'details_' + entry.value.id\\\" tabindex=\\\"-1\\\" role=\\\"dialog\\\" aria-labelledby=\\\"detailsLabel\\\">\\r\\n            <div class=\\\"modal-dialog modal-lg\\\" role=\\\"document\\\">\\r\\n                <div class=\\\"modal-content\\\">\\r\\n                    <div class=\\\"modal-header\\\">\\r\\n                        <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\" aria-label=\\\"Close\\\"><span aria-hidden=\\\"true\\\">&times;</span></button>\\r\\n                        <h4 class=\\\"modal-title leftAlign\\\" id=\\\"detailsLabel\\\">Entity {{entry.value.name}} details</h4>\\r\\n                    </div>\\r\\n                    <br/>\\r\\n                    <div class=\\\"modal-body\\\" *ngIf=\\\"entry.value.policyObject == undefined\\\">\\r\\n                        <pre class=\\\"normalspaces\\\"><code [innerHTML]=\\\"entry.value.script\\\"></code></pre>\\r\\n                    </div>\\r\\n                    <div *ngIf=\\\"entry.value.policyObject != undefined\\\">\\r\\n                        <div class=\\\"modal-body\\\" *ngIf=\\\"isAttrType(entry.value.policyObject)\\\">\\r\\n                            <dl class=\\\"row\\\">\\r\\n                                <dt class=\\\"col-sm-3\\\">Attribute name:</dt>\\r\\n                                <dd class=\\\"col-sm-9\\\">{{entry.value.policyObject.attributeName}}</dd>\\r\\n\\r\\n                                <dt class=\\\"col-sm-3\\\">Operational range:</dt>\\r\\n                                <dd class=\\\"col-sm-9\\\">{{entry.value.policyObject.operationalRange.toString()}}</dd>\\r\\n\\r\\n                                <dt class=\\\"col-sm-3\\\">Aggregation:</dt>\\r\\n                                <dd class=\\\"col-sm-9\\\">{{entry.value.policyObject.aggregation}}</dd>\\r\\n\\r\\n                                <dt class=\\\"col-sm-3\\\">Analysis depth:</dt>\\r\\n                                <dd class=\\\"col-sm-9\\\">{{entry.value.policyObject.formatAnalysisDepth()}}</dd>\\r\\n\\r\\n                                <dt class=\\\"col-sm-3\\\">Vote weight:</dt>\\r\\n                                <dd class=\\\"col-sm-9\\\">{{entry.value.policyObject.voteWeight}}</dd>\\r\\n\\r\\n                                <dt class=\\\"col-sm-3\\\">Incremental weight:</dt>\\r\\n                                <dd class=\\\"col-sm-9\\\">{{entry.value.policyObject.incrementalWeight}}</dd>\\r\\n\\r\\n                                <dt class=\\\"col-sm-3\\\">Observation time:</dt>\\r\\n                                <dd class=\\\"col-sm-9\\\">{{entry.value.policyObject.formatObservationTime()}}</dd>\\r\\n                            </dl>\\r\\n                        </div>\\r\\n                        <div class=\\\"modal-body\\\" *ngIf=\\\"isHealthStatusType(entry.value.policyObject)\\\">\\r\\n                            <dl class=\\\"row\\\">\\r\\n                                <dt class=\\\"col-sm-3\\\">Level:</dt>\\r\\n                                <dd class=\\\"col-sm-9\\\">{{entry.value.policyObject.level}}</dd>\\r\\n\\r\\n                                <dt class=\\\"col-sm-3\\\">Vote weight:</dt>\\r\\n                                <dd class=\\\"col-sm-9\\\">{{entry.value.policyObject.voteWeight}}</dd>\\r\\n\\r\\n                                <dt class=\\\"col-sm-3\\\">Incremental weight:</dt>\\r\\n                                <dd class=\\\"col-sm-9\\\">{{entry.value.policyObject.incrementalWeight}}</dd>\\r\\n\\r\\n                                <dt class=\\\"col-sm-3\\\">Observation time:</dt>\\r\\n                                <dd class=\\\"col-sm-9\\\">{{entry.value.policyObject.formatObservationTime()}}</dd>\\r\\n                            </dl>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                    <div class=\\\"modal-footer\\\">\\r\\n                        <button type=\\\"button\\\" class=\\\"btn btn-default\\\" data-dismiss=\\\"modal\\\">Close</button>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n        <dt class=\\\"col-sm-3\\\">Policy type:</dt>\\r\\n        <dd class=\\\"col-sm-9\\\">{{entry.value.getPolicyType()}}</dd>\\r\\n\\r\\n        <dt class=\\\"col-sm-3\\\">Language:</dt>\\r\\n        <dd class=\\\"col-sm-9\\\">{{entry.value.language}}</dd>\\r\\n\\r\\n        <dt class=\\\"col-sm-3\\\">Is url:</dt>\\r\\n        <dd class=\\\"col-sm-9\\\">{{entry.value.isURL}}</dd>\\r\\n\\r\\n        <dt class=\\\"col-sm-3\\\">Script:</dt>\\r\\n        <dd class=\\\"col-sm-9\\\">\\r\\n            <button *ngIf=\\\"!hideDetails\\\"\\r\\n                    class=\\\"center-block btn btn-inline btn-sm\\\"\\r\\n                    data-toggle=\\\"modal\\\"\\r\\n                    [attr.data-target]=\\\"'#details_' + entry.value.id\\\">\\r\\n                <i class=\\\"fa fa-search\\\"></i> Details\\r\\n            </button>\\r\\n        </dd>\\r\\n    </dl>\\r\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/watchers/components/templates/policies.html\n// module id = ./src/app/watchers/components/templates/policies.html\n// module chunks = 1","module.exports = \"<table class=\\\"table\\\" *ngIf=\\\"entity.parameters && entity.parameters.length > 0\\\">\\r\\n    <thead>\\r\\n    <tr>\\r\\n        <th>#</th>\\r\\n        <th>Key</th>\\r\\n        <th>Value</th>\\r\\n    </tr>\\r\\n    </thead>\\r\\n    <tbody>\\r\\n    <tr *ngFor=\\\"let param of entity.parameters\\\">\\r\\n        <td>\\r\\n            <span\\r\\n                class=\\\"glyphicon glyphicon-remove-circle btn btn-xs btn-danger\\\"\\r\\n                (click)=\\\"checkAndRemoveParameter(param)\\\"\\r\\n                aria-hidden=\\\"true\\\">\\r\\n            </span>\\r\\n        </td>\\r\\n        <td>\\r\\n            <inline-edit [(ngModel)]=\\\"param.key\\\"\\r\\n                         [ngModelOptions]=\\\"{standalone: true}\\\">\\r\\n            </inline-edit>\\r\\n        </td>\\r\\n        <td>\\r\\n            <inline-edit [(ngModel)]=\\\"param.value\\\"\\r\\n                         [ngModelOptions]=\\\"{standalone: true}\\\">\\r\\n            </inline-edit>\\r\\n        </td>\\r\\n    </tr>\\r\\n    </tbody>\\r\\n</table>\\r\\n\\r\\n<button\\r\\n        type=\\\"button\\\"\\r\\n        class=\\\"btn btn-primary btn-sm\\\"\\r\\n        (click)=\\\"addNewParameter()\\\">\\r\\n    Add new\\r\\n</button>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/watchers/components/templates/ptable.component.html\n// module id = ./src/app/watchers/components/templates/ptable.component.html\n// module chunks = 1","module.exports = \"<div class=\\\"modal fade\\\" *ngIf=\\\"!hideDetails\\\" [attr.id]=\\\"'details_' + entity.id\\\" tabindex=\\\"-1\\\" role=\\\"dialog\\\" aria-labelledby=\\\"addEntityLabel\\\">\\r\\n    <div class=\\\"modal-dialog modal-lg\\\" role=\\\"document\\\">\\r\\n        <div class=\\\"modal-content\\\">\\r\\n            <div class=\\\"modal-header\\\">\\r\\n                <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\" aria-label=\\\"Close\\\"><span aria-hidden=\\\"true\\\">&times;</span></button>\\r\\n                <h4 class=\\\"modal-title leftAlign\\\" id=\\\"addEntityLabel\\\">Entity {{entity.name}} details</h4>\\r\\n            </div>\\r\\n            <br/>\\r\\n            <div class=\\\"modal-body\\\">\\r\\n                <pre class=\\\"normalspaces\\\"><code [innerHTML]=\\\"entity.script\\\"></code></pre>\\r\\n            </div>\\r\\n            <div class=\\\"modal-footer\\\">\\r\\n                <button type=\\\"button\\\" class=\\\"btn btn-default\\\" data-dismiss=\\\"modal\\\">Close</button>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n\\r\\n<div>\\r\\n    <dl class=\\\"row\\\" *ngIf=\\\"!isEmpty()\\\">\\r\\n        <dt class=\\\"col-sm-5\\\">Language:</dt>\\r\\n        <dd class=\\\"col-sm-7\\\">{{entity.language}}</dd>\\r\\n\\r\\n        <dt class=\\\"col-sm-5\\\">Is url:</dt>\\r\\n        <dd class=\\\"col-sm-7\\\">{{entity.isURL}}</dd>\\r\\n\\r\\n        <dt class=\\\"col-sm-5\\\">Script:</dt>\\r\\n        <dd class=\\\"col-sm-7\\\">\\r\\n            <button *ngIf=\\\"!hideDetails\\\"\\r\\n                    class=\\\"center-block btn btn-inline btn-sm\\\"\\r\\n                    data-toggle=\\\"modal\\\"\\r\\n                    [attr.data-target]=\\\"'#details_' + entity.id\\\">\\r\\n                <i class=\\\"fa fa-search\\\"></i> Details\\r\\n            </button>\\r\\n        </dd>\\r\\n    </dl>\\r\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/watchers/components/templates/trigger.html\n// module id = ./src/app/watchers/components/templates/trigger.html\n// module chunks = 1","import { Component, Input, OnInit } from '@angular/core';\r\nimport { ScriptletDataObject } from '../model/scriptlet.data.object';\r\nimport { isNullOrUndefined } from \"util\";\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: 'trigger',\r\n  template: require('./templates/trigger.html'),\r\n  styles: ['.btn-inline { display: inline-block; margin-left: 15px; } .normalspaces {  white-space: normal; }']\r\n})\r\nexport class TriggerComponent {\r\n    @Input() entity: ScriptletDataObject = undefined;\r\n    @Input() hideDetails:boolean = false;\r\n\r\n    public isEmpty():boolean {\r\n        return (this.entity.language != \"Groovy\" && isNullOrUndefined(this.entity.object))\r\n            || (this.entity.language == \"Groovy\" && (isNullOrUndefined(this.entity.script) || this.entity.script.length < 3));\r\n    }\r\n}\r\n\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/watchers/components/trigger.component.ts","import { ColoredAttributePredicate } from './colored.predicate';\r\n\r\nexport class ColoredAttributeChecker {\r\n    public green:ColoredAttributePredicate = undefined;\r\n    public yellow:ColoredAttributePredicate = undefined;\r\n\r\n    public toJSON():any {\r\n        let _value:any = {};\r\n        _value[\"green\"] = this.green.toJSON();\r\n        _value[\"yellow\"] = this.yellow.toJSON();\r\n        return _value;\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/watchers/model/colored.checker.ts","export abstract class ColoredAttributePredicate {\r\n    public static CONSTANT:string = \"constant\";\r\n    public static COMPARATOR:string = \"comparator\";\r\n    public static RANGE:string = \"isInRange\";\r\n\r\n    public abstract toJSON():any;\r\n    public abstract represent():string;\r\n}\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/watchers/model/colored.predicate.ts","import { ColoredAttributePredicate } from './colored.predicate';\r\n\r\nexport class ConstantAttributePredicate extends ColoredAttributePredicate {\r\n    public type:string = ColoredAttributePredicate.CONSTANT;\r\n    public value:boolean;\r\n\r\n    public toJSON():any {\r\n        let _value:any = {};\r\n        _value[\"@type\"] = this.type;\r\n        _value[\"value\"] = this.value;\r\n        return _value;\r\n    }\r\n\r\n    public represent():string {\r\n        return \"value = \" + (new Boolean(this.value)).toString();\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/watchers/model/constant.attribute.predicate.ts","export abstract class Entity {\r\n    public name:string;\r\n    public guid:string;\r\n    public parameters : KeyValue[] = [];\r\n    constructor(name:string, parameters: { [key:string]:string; }) {\r\n        this.name = name;\r\n        this.guid = Guid.newGuid();\r\n        for (let key in parameters) {\r\n            this.parameters.push(new KeyValue(key, parameters[key]));\r\n        }\r\n    }\r\n\r\n    public getParameter(key:string):KeyValue {\r\n       return KeyValue.getParameterByName(this.parameters, key);\r\n    }\r\n\r\n    public contains(key:string):boolean {\r\n        return this.getParameter(key) != undefined;\r\n    }\r\n\r\n    public removeParameter(key:string) {\r\n        for (let i = 0; i < this.parameters.length; i++) {\r\n            if (this.parameters[i].key == key) {\r\n                this.parameters.splice(i, 1);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    public setParameter(parameter:KeyValue) {\r\n        let found:boolean = false;\r\n        for (let i = 0; i < this.parameters.length; i++) {\r\n          if (this.parameters[i].key == parameter.key) {\r\n            this.parameters[i].value = parameter.value;\r\n            found = true;\r\n            break;\r\n          }\r\n        }\r\n        // if nothing is found - just push it into the array\r\n        if (!found) {\r\n            this.parameters.push(parameter);\r\n        }\r\n    }\r\n\r\n    public clearParameters() {\r\n        this.parameters = [];\r\n    }\r\n\r\n    private decapitalizeFirstLetter(object:string):string {\r\n        return object.charAt(0).toLowerCase() + object.slice(1);\r\n    }\r\n\r\n    // see https://www.stevefenton.co.uk/2013/04/obtaining-a-class-name-at-runtime-in-typescript/\r\n    getName() {\r\n        var funcNameRegex = /function (.{1,})\\(/;\r\n        var results = (funcNameRegex).exec((<any> this).constructor.toString());\r\n        return (results && results.length > 1) ? this.decapitalizeFirstLetter(results[1]) : \"\";\r\n    }\r\n\r\n    public stringifyParameters():any {\r\n        return KeyValue.stringifyParametersStatic(this.parameters);\r\n    }\r\n}\r\n\r\nexport class KeyValue {\r\n    public key:string;\r\n    public value:string;\r\n    constructor(key:string, value:string){\r\n        this.key = key;\r\n        this.value = value;\r\n    };\r\n\r\n    public static getParameterByName(inputParams:KeyValue[], inputName:string):KeyValue {\r\n        let result:KeyValue = undefined;\r\n        if (inputParams != undefined) {\r\n            for (let i = 0; i < inputParams.length; i++) {\r\n                if (inputName === inputParams[i].key) {\r\n                    result = inputParams[i];\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    public static stringifyParametersStatic(value:KeyValue[]): any {\r\n        let returnValue:{ [key:string]:string; } = {};\r\n            value.forEach(function(obj){\r\n                returnValue[obj.key] = obj.value;\r\n            });\r\n        return returnValue;\r\n    }\r\n}\r\n\r\n// http://stackoverflow.com/questions/26501688/a-typescript-guid-class\r\nexport class Guid {\r\n    static newGuid() {\r\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\r\n            var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);\r\n            return v.toString(16);\r\n        });\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/watchers/model/entity.ts","import { Watcher } from './watcher';\r\nimport { ScriptletDataObject } from './scriptlet.data.object';\r\nimport * as moment from 'moment/moment';\r\n\r\nexport class Factory {\r\n\r\n    public static watcherFromJSON(name:string, json:any):Watcher {\r\n        console.log(\"Watcher: \", JSON.stringify(json));\r\n        let _watcher:Watcher = new Watcher(name, json[\"parameters\"]);\r\n        if (json[\"attributeCheckers\"] != undefined && !$.isEmptyObject(json[\"attributeCheckers\"])) {\r\n            for (let key in json[\"attributeCheckers\"]) {\r\n                if (json[\"attributeCheckers\"][key][\"language\"] != undefined\r\n                    && json[\"attributeCheckers\"][key][\"language\"].length > 0) {\r\n                    _watcher.attributeCheckers[key] = ScriptletDataObject.fromJSON(json[\"attributeCheckers\"][key]);\r\n                }\r\n            }\r\n        }\r\n        if (json[\"scalingPolicies\"] != undefined && !$.isEmptyObject(json[\"scalingPolicies\"])) {\r\n            for (let key in json[\"scalingPolicies\"]) {\r\n                if (json[\"scalingPolicies\"][key][\"language\"] != undefined\r\n                    && json[\"scalingPolicies\"][key][\"language\"].length > 0) {\r\n                    _watcher.scalingPolicies[key] = ScriptletDataObject.fromJSON(json[\"scalingPolicies\"][key]);\r\n                }\r\n            }\r\n        }\r\n        if (json[\"trigger\"] != undefined\r\n            && !$.isEmptyObject(json[\"trigger\"])\r\n            && json[\"trigger\"][\"language\"] != undefined\r\n            && json[\"trigger\"][\"language\"].length > 0) {\r\n            _watcher.trigger = ScriptletDataObject.fromJSON(json[\"trigger\"]);\r\n        }\r\n\r\n        if (json[\"connectionStringTemplate\"] != undefined) {\r\n            _watcher.connectionStringTemplate = json[\"connectionStringTemplate\"];\r\n        }\r\n        if (json[\"scalingSize\"] != undefined) {\r\n            _watcher.scalingSize = json[\"scalingSize\"];\r\n        }\r\n        if (json[\"maxClusterSize\"] != undefined) {\r\n            _watcher.maxClusterSize = json[\"maxClusterSize\"];\r\n        }\r\n        if (json[\"minClusterSize\"] != undefined) {\r\n            _watcher.minClusterSize = json[\"minClusterSize\"];\r\n        }\r\n        if (json[\"cooldownTime\"] != undefined) {\r\n            _watcher.cooldownTime =  (!isNaN(parseFloat(json[\"cooldownTime\"])) && isFinite(json[\"cooldownTime\"]))\r\n                ? json[\"cooldownTime\"] :  moment.duration(json[\"cooldownTime\"]).asMilliseconds();\r\n        }\r\n        if (json[\"type\"] != undefined) {\r\n            _watcher.type = json[\"type\"];\r\n        }\r\n        if (json[\"autoScaling\"] != undefined) {\r\n            _watcher.autoScaling = json[\"autoScaling\"];\r\n        }\r\n        return _watcher;\r\n    }\r\n\r\n    public static watchersArrayFromJSON(json:any):Watcher[] {\r\n        let result:Watcher[] = [];\r\n        for (let key in json) {\r\n            result.push(Factory.watcherFromJSON(key, json[key]));\r\n        }\r\n        return result;\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/watchers/model/factory.ts","import { ColoredAttributePredicate } from './colored.predicate';\r\n\r\nexport class NumberComparatorPredicate extends ColoredAttributePredicate {\r\n    public type:string = ColoredAttributePredicate.COMPARATOR;\r\n    public operator:string;\r\n    public value:number;\r\n\r\n    public toJSON():any {\r\n        let _value:any = {};\r\n        _value[\"@type\"] = this.type;\r\n        _value[\"operator\"] = this.operator;\r\n        _value[\"value\"] = this.value;\r\n        return _value;\r\n    }\r\n\r\n    public represent():string {\r\n        let _value:string = \"value \";\r\n        switch (this.operator) {\r\n            case \"GREATER_THAN\":\r\n                _value += \">\";\r\n                break;\r\n            case \"GREATER_THAN_OR_EQUAL\":\r\n                _value += \"≥\";\r\n                break;\r\n            case \"LESS_THAN\":\r\n                _value += \"<\";\r\n                break;\r\n            case \"LESS_THAN_OR_EQUAL\":\r\n                _value += \"≤\";\r\n                break;\r\n            case \"EQUAL\":\r\n                _value += \"=\";\r\n                break;\r\n            case \"NOT_EQUAL\":\r\n                _value += \"≠\";\r\n                break;\r\n            default:\r\n                throw new Error(\"Operator \" + this.operator + \"cannot be recognized\");\r\n        }\r\n        _value += \" \" + this.value;\r\n        return _value;\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/watchers/model/number.comparator.predicate.ts","export abstract class AbstractPolicy {\r\n\r\n    public static getReduceOperations():string[] {\r\n        return [\"MAX\", \"MIN\", \"MEAN\", \"MEDIAN\", \"PERCENTILE_90\", \"PERCENTILE_95\", \"PERCENTILE_97\", \"SUM\"];\r\n    }\r\n    abstract toJSON():any;\r\n\r\n    public getPoliticType():string {\r\n        return \"Groovy policy\";\r\n    }\r\n\r\n    public getPolicyWeight():string {\r\n        return \"N/A\";\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/watchers/model/policy/abstract.policy.ts","import { AbstractPolicy } from \"./abstract.policy\";\r\nimport * as moment from 'moment/moment';\r\n\r\nexport abstract class AbstractWeightedScalingPolicy extends AbstractPolicy {\r\n\r\n    constructor() {\r\n        super();\r\n        this.voteWeight = 0;\r\n        this.observationTime = 0;\r\n        this.incrementalWeight = false;\r\n    }\r\n    private _voteWeight:number;\r\n    private _observationTime:number;\r\n    private _incrementalWeight:boolean;\r\n\r\n    get voteWeight(): number {\r\n        return this._voteWeight;\r\n    }\r\n\r\n    set voteWeight(value: number) {\r\n        this._voteWeight = value;\r\n    }\r\n\r\n    get observationTime(): number {\r\n        return this._observationTime;\r\n    }\r\n\r\n    set observationTime(value: number) {\r\n        this._observationTime = value;\r\n    }\r\n\r\n    get incrementalWeight(): boolean {\r\n        return this._incrementalWeight;\r\n    }\r\n\r\n    set incrementalWeight(value: boolean) {\r\n        this._incrementalWeight = value;\r\n    }\r\n\r\n    formatObservationTime():string {\r\n        return moment.duration({ milliseconds: this.observationTime}).humanize();\r\n    }\r\n\r\n    public getPolicyWeight():string {\r\n        return this.voteWeight.toString();\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/watchers/model/policy/abstract.weighted.scaling.policy.ts","import { AbstractWeightedScalingPolicy } from \"./abstract.weighted.scaling.policy\";\r\nimport * as moment from 'moment/moment';\r\nimport { OpRange } from \"./operational.range\";\r\n\r\nexport class AttributeBasedScalingPolicy extends AbstractWeightedScalingPolicy {\r\n\r\n    private _attributeName:string;\r\n    private _operationalRange:OpRange;\r\n    private _aggregation:string;\r\n    private _analysisDepth:number;\r\n\r\n    constructor() {\r\n        super();\r\n        this.attributeName = \"\";\r\n        this.operationalRange = new OpRange(0, 0);\r\n        this.analysisDepth = 0;\r\n        this.aggregation = \"MAX\";\r\n    }\r\n\r\n    get attributeName(): string {\r\n        return this._attributeName;\r\n    }\r\n\r\n    set attributeName(value: string) {\r\n        this._attributeName = value;\r\n    }\r\n\r\n    get operationalRange(): OpRange {\r\n        return this._operationalRange;\r\n    }\r\n\r\n    set operationalRange(value: OpRange) {\r\n        this._operationalRange = value;\r\n    }\r\n\r\n    get aggregation(): string {\r\n        return this._aggregation;\r\n    }\r\n\r\n    set aggregation(value: string) {\r\n        this._aggregation = value;\r\n    }\r\n\r\n    get analysisDepth(): number {\r\n        return this._analysisDepth;\r\n    }\r\n\r\n    set analysisDepth(value: number) {\r\n        this._analysisDepth = value;\r\n    }\r\n\r\n    formatAnalysisDepth():string {\r\n        return moment.duration({ milliseconds: this.analysisDepth}).humanize();\r\n    }\r\n\r\n    toJSON(): any {\r\n        let _value:any = {};\r\n        _value[\"voteWeight\"] = this.voteWeight;\r\n        _value[\"incrementalWeight\"] = this.incrementalWeight;\r\n        _value[\"observationTime\"] = moment.duration({ milliseconds: this.observationTime}).toISOString();\r\n\r\n        _value[\"attributeName\"] = this.attributeName;\r\n        _value[\"operationalRange\"] = this.operationalRange.toString();\r\n        _value[\"analysisDepth\"] = moment.duration({ milliseconds: this.analysisDepth}).toISOString();\r\n        _value[\"aggregation\"] = this.aggregation;\r\n        return _value;\r\n    }\r\n\r\n    public getPoliticType():string {\r\n        return \"Attribute based scaling policy\";\r\n    }\r\n\r\n}\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/watchers/model/policy/attribute.based.scaling.policy.ts","import { AbstractWeightedScalingPolicy } from \"./abstract.weighted.scaling.policy\";\r\nimport * as moment from 'moment/moment';\r\n\r\nexport class HealthStatusBasedScalingPolicy extends AbstractWeightedScalingPolicy {\r\n\r\n    private _level:string;\r\n\r\n    constructor() {\r\n        super();\r\n        this.level = \"CRITICAL\";\r\n    }\r\n\r\n\r\n    get level(): string {\r\n        return this._level;\r\n    }\r\n\r\n    set level(value: string) {\r\n        this._level = value;\r\n    }\r\n\r\n    toJSON(): any {\r\n        let _value:any = {};\r\n        _value[\"voteWeight\"] = this.voteWeight;\r\n        _value[\"incrementalWeight\"] = this.incrementalWeight;\r\n        _value[\"observationTime\"] = moment.duration({ milliseconds: this.observationTime}).toISOString();\r\n\r\n        _value[\"level\"] = this.level;\r\n        return _value;\r\n    }\r\n\r\n    public getPoliticType():string {\r\n        return \"Health status based scaling policy\";\r\n    }\r\n\r\n\r\n}\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/watchers/model/policy/health.status.based.scaling.policy.ts","import { isNullOrUndefined } from \"util\";\r\n\r\nexport class OpRange {\r\n\r\n    private _begin:number;\r\n    private _end:number;\r\n\r\n    public isBeginInfinite:boolean = false;\r\n    public isEndInfinite:boolean = false;\r\n\r\n    public isBeginIncluding:boolean = true;\r\n    public isEndIncluding:boolean = true;\r\n\r\n    private static DELIMITER:string = \"‥\";\r\n    private static MINUS_INFINITE:string = \"-∞\";\r\n    private static PLUS_INFINITE:string = \"+∞\";\r\n\r\n    constructor(begin?:number, end?:number) {\r\n        if (!isNullOrUndefined(begin)) {\r\n            this.begin = begin;\r\n        }\r\n        if (!isNullOrUndefined(end)) {\r\n            this.end = end;\r\n\r\n        }\r\n    }\r\n\r\n    get begin(): number {\r\n        return this._begin;\r\n    }\r\n\r\n    set begin(value: number) {\r\n        this._begin = value;\r\n    }\r\n\r\n    get end(): number {\r\n        return this._end;\r\n    }\r\n\r\n    set end(value: number) {\r\n        this._end = value;\r\n    }\r\n\r\n    private getLeftBracket():string {\r\n        return (this.isBeginIncluding && !this.isBeginInfinite) ? \"[\" : \"(\";\r\n    }\r\n\r\n    private getRightBracket():string {\r\n        return (this.isEndIncluding && !this.isEndInfinite) ? \"]\" : \")\";\r\n    }\r\n\r\n    private getBeginString():string {\r\n        return this.isBeginInfinite ? OpRange.MINUS_INFINITE : this.begin.toString();\r\n    }\r\n\r\n    private getEndString():string {\r\n        return this.isEndInfinite ? OpRange.PLUS_INFINITE : this.end.toString();\r\n    }\r\n\r\n    public toString():string {\r\n        return this.getLeftBracket() + this.getBeginString() + OpRange.DELIMITER + this.getEndString() + this.getRightBracket();\r\n    }\r\n\r\n    public static fromString(str:string):OpRange {\r\n        let splits:string[] = str.split(OpRange.DELIMITER);\r\n        let _result:OpRange = new OpRange(0.0, 0.0);\r\n\r\n        // begining parsing\r\n        if (splits[0].substr(0,1) == \"[\") {\r\n            _result.isBeginInfinite = false;\r\n            _result.isBeginIncluding = true;\r\n        } else {\r\n            _result.isBeginIncluding = false;\r\n        }\r\n        let beginStr:string = splits[0].substr(1);\r\n        if (beginStr == OpRange.MINUS_INFINITE) {\r\n            _result.isBeginInfinite = true;\r\n        } else {\r\n            _result.begin = Number.parseFloat(beginStr);\r\n        }\r\n\r\n        // ending parse\r\n        if (splits[1].substr(splits[1].length - 2, splits[1].length - 1) == \"]\") {\r\n            _result.isEndInfinite = false;\r\n            _result.isEndIncluding = true;\r\n        } else {\r\n            _result.isEndIncluding = false;\r\n        }\r\n        let endStr:string = splits[1].substr(0, splits[1].length - 2);\r\n        if (endStr == OpRange.PLUS_INFINITE) {\r\n            _result.isEndInfinite = true;\r\n        } else {\r\n            _result.end = Number.parseFloat(endStr);\r\n        }\r\n\r\n        return _result;\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/watchers/model/policy/operational.range.ts","import { ColoredAttributePredicate } from './colored.predicate';\r\n\r\nexport class IsInRangePredicate extends ColoredAttributePredicate {\r\n    public type:string = ColoredAttributePredicate.RANGE;\r\n    public rangeStart:number;\r\n    public rangeEnd:number;\r\n    public isRangeStartInclusive:boolean;\r\n    public isRangeEndInclusive:boolean;\r\n\r\n    public toJSON():any {\r\n        let _value:any = {};\r\n        _value[\"@type\"] = this.type;\r\n        _value[\"rangeStart\"] = this.rangeStart;\r\n        _value[\"rangeEnd\"] = this.rangeEnd;\r\n        _value[\"isRangeStartInclusive\"] = this.rangeStart;\r\n        _value[\"isRangeEndInclusive\"] = this.rangeEnd;\r\n        return _value;\r\n    }\r\n\r\n    public represent():string {\r\n        let _value:string = \"\";\r\n        _value += this.rangeEnd + \" \" + (this.isRangeEndInclusive ? \"≥\": \">\")\r\n            +  \" value \" + (this.isRangeStartInclusive ? \"≥\": \">\") + \" \" + this.rangeStart;\r\n        return _value;\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/watchers/model/range.comparator.ts","import { ColoredAttributePredicate } from './colored.predicate';\r\nimport { ConstantAttributePredicate } from './constant.attribute.predicate';\r\nimport { NumberComparatorPredicate } from './number.comparator.predicate';\r\nimport { IsInRangePredicate } from './range.comparator';\r\nimport { Guid } from './entity';\r\n\r\nimport { ColoredAttributeChecker } from './colored.checker';\r\nimport { Entity } from \"../../configuration/model/model.entity\";\r\nimport { AbstractPolicy } from \"./policy/abstract.policy\";\r\nimport { HealthStatusBasedScalingPolicy } from \"./policy/health.status.based.scaling.policy\";\r\nimport { AttributeBasedScalingPolicy } from \"./policy/attribute.based.scaling.policy\";\r\nimport * as moment from 'moment/moment';\r\nimport { OpRange } from \"./policy/operational.range\";\r\n\r\nexport class ScriptletDataObject extends Entity {\r\n    public language:string;\r\n    public script:string;\r\n    public isURL:boolean;\r\n    public object:ColoredAttributeChecker;\r\n    public policyObject:AbstractPolicy;\r\n    public id:string = Guid.newGuid();\r\n\r\n    constructor(params:any){\r\n        super(\"\", params);\r\n        this.language = \"Groovy\";\r\n        this.script = \"\";\r\n        this.isURL = false;\r\n        this.object = undefined;\r\n        this.policyObject = undefined;\r\n    }\r\n\r\n    public shortScript():string {\r\n        return ((this.script.length > 60) ? this.script.substring(0, 60) + '...' : this.script);\r\n    }\r\n\r\n    // add \"MetricBased\"(AttributeBasedScalingPolicy) and\r\n    public static fromJSON(json:string):ScriptletDataObject {\r\n        console.log(\"Json from data object is: \", json);\r\n        let instance:ScriptletDataObject = new ScriptletDataObject(json[\"parameters\"]);\r\n        if (json[\"language\"] != undefined) {\r\n            instance.language = json[\"language\"];\r\n        }\r\n        if (json[\"script\"] != undefined) {\r\n            instance.script = json[\"script\"];\r\n        }\r\n        if (json[\"isURL\"] != undefined) {\r\n            instance.isURL = (json[\"url\"] == 'true');\r\n        }\r\n        switch(instance.language) {\r\n            case \"Groovy\":\r\n            case \"JavaScript\":\r\n                instance.object = undefined;\r\n                break;\r\n            case \"HealthStatusBased\":\r\n                let _jsonHSB:any = JSON.parse(instance.script);\r\n                instance.policyObject = new HealthStatusBasedScalingPolicy();\r\n                (<HealthStatusBasedScalingPolicy>instance.policyObject).level = _jsonHSB[\"level\"];\r\n                (<HealthStatusBasedScalingPolicy>instance.policyObject).observationTime =\r\n                    (!isNaN(parseFloat(_jsonHSB[\"observationTime\"])) && isFinite(_jsonHSB[\"observationTime\"]))\r\n                        ? _jsonHSB[\"observationTime\"] :  moment.duration(_jsonHSB[\"observationTime\"]).asMilliseconds();\r\n                (<HealthStatusBasedScalingPolicy>instance.policyObject).incrementalWeight = _jsonHSB[\"incrementalWeight\"];\r\n                (<HealthStatusBasedScalingPolicy>instance.policyObject).voteWeight = _jsonHSB[\"voteWeight\"];\r\n                break;\r\n            case \"MetricBased\":\r\n                let _jsonMB:any = JSON.parse(instance.script);\r\n                instance.policyObject = new AttributeBasedScalingPolicy();\r\n                (<AttributeBasedScalingPolicy>instance.policyObject).analysisDepth =\r\n                    (!isNaN(parseFloat(_jsonMB[\"observationTime\"])) && isFinite(_jsonMB[\"observationTime\"]))\r\n                        ? _jsonMB[\"observationTime\"] :  moment.duration(_jsonMB[\"observationTime\"]).asMilliseconds();\r\n                (<AttributeBasedScalingPolicy>instance.policyObject).incrementalWeight = _jsonMB[\"incrementalWeight\"];\r\n                (<AttributeBasedScalingPolicy>instance.policyObject).voteWeight = _jsonMB[\"voteWeight\"];\r\n\r\n                (<AttributeBasedScalingPolicy>instance.policyObject).aggregation = _jsonMB[\"aggregation\"];\r\n                (<AttributeBasedScalingPolicy>instance.policyObject).attributeName = _jsonMB[\"attributeName\"];\r\n                (<AttributeBasedScalingPolicy>instance.policyObject).operationalRange = OpRange.fromString(_jsonMB[\"operationalRange\"]);\r\n                (<AttributeBasedScalingPolicy>instance.policyObject).analysisDepth =\r\n                    (!isNaN(parseFloat(_jsonMB[\"analysisDepth\"])) && isFinite(_jsonMB[\"analysisDepth\"]))\r\n                        ? _jsonMB[\"analysisDepth\"] :  moment.duration(_jsonMB[\"analysisDepth\"]).asMilliseconds();\r\n\r\n                break;\r\n            case \"ColoredAttributeChecker\":\r\n                instance.object = new ColoredAttributeChecker();\r\n                if (instance.script == undefined || instance.script.length < 5) {\r\n                    return instance;\r\n                }\r\n                let _jsonChecker:any = JSON.parse(instance.script);\r\n                let _yellow = _jsonChecker[\"yellow\"];\r\n                switch (_yellow[\"@type\"]) {\r\n                     case ColoredAttributePredicate.CONSTANT:\r\n                        instance.object.yellow = new ConstantAttributePredicate();\r\n                        (<ConstantAttributePredicate>instance.object.yellow).value = _yellow[\"value\"];\r\n                        break;\r\n                     case ColoredAttributePredicate.COMPARATOR:\r\n                         instance.object.yellow = new NumberComparatorPredicate();\r\n                         (<NumberComparatorPredicate>instance.object.yellow).value = _yellow[\"value\"];\r\n                         (<NumberComparatorPredicate>instance.object.yellow).operator = _yellow[\"operator\"];\r\n                         break;\r\n                     case ColoredAttributePredicate.RANGE:\r\n                         instance.object.yellow = new IsInRangePredicate();\r\n                         (<IsInRangePredicate>instance.object.yellow).rangeStart = _yellow[\"rangeStart\"];\r\n                         (<IsInRangePredicate>instance.object.yellow).rangeEnd = _yellow[\"rangeEnd\"];\r\n                         (<IsInRangePredicate>instance.object.yellow).isRangeEndInclusive = _yellow[\"isRangeEndInclusive\"];\r\n                         (<IsInRangePredicate>instance.object.yellow).isRangeStartInclusive = _yellow[\"isRangeStartInclusive\"];\r\n                         break;\r\n                     default:\r\n                        throw new Error(\"Could not recognize yellow checker type: \" + _yellow[\"@type\"]);\r\n                }\r\n\r\n                let _green = _jsonChecker[\"green\"];\r\n                switch (_green[\"@type\"]) {\r\n                     case ColoredAttributePredicate.CONSTANT:\r\n                        instance.object.green = new ConstantAttributePredicate();\r\n                        (<ConstantAttributePredicate>instance.object.green).value = _green[\"value\"];\r\n                        break;\r\n                     case ColoredAttributePredicate.COMPARATOR:\r\n                         instance.object.green = new NumberComparatorPredicate();\r\n                         (<NumberComparatorPredicate>instance.object.green).value = _green[\"value\"];\r\n                         (<NumberComparatorPredicate>instance.object.green).operator = _green[\"operator\"];\r\n                         break;\r\n                     case ColoredAttributePredicate.RANGE:\r\n                         instance.object.green = new IsInRangePredicate();\r\n                         (<IsInRangePredicate>instance.object.green).rangeStart = _green[\"rangeStart\"];\r\n                         (<IsInRangePredicate>instance.object.green).rangeEnd = _green[\"rangeEnd\"];\r\n                         (<IsInRangePredicate>instance.object.green).isRangeEndInclusive = _green[\"isRangeEndInclusive\"];\r\n                         (<IsInRangePredicate>instance.object.green).isRangeStartInclusive = _green[\"isRangeStartInclusive\"];\r\n                         break;\r\n                     default:\r\n                        throw new Error(\"Could not recognize green checker type: \" + _green[\"@type\"]);\r\n                }\r\n                break;\r\n            default:\r\n                throw new Error(\"Cannot recognize language type: \" + instance.language);\r\n        }\r\n        return instance;\r\n    }\r\n\r\n    public toJSON():any {\r\n        let _value:any = {};\r\n        _value[\"language\"] = this.language;\r\n        _value[\"script\"] = this.script;\r\n        _value[\"url\"] = this.isURL;\r\n        _value[\"parameters\"] = this.stringifyParameters();\r\n        if (this.language == \"ColoredAttributeChecker\") {\r\n            if (this.object == undefined) {\r\n                throw new Error(\"Trying to serialize ColoredAttributeChecker instance without the object\");\r\n            } else {\r\n                this.script = JSON.stringify(this.object.toJSON());\r\n            }\r\n        } else if (this.language == \"HealthStatusBased\" || this.language == \"MetricBased\") {\r\n            if (this.policyObject == undefined) {\r\n                throw new Error(\"Trying to serialize \" + this.language + \" instance without the policyObject\");\r\n            } else {\r\n                this.script = JSON.stringify(this.policyObject.toJSON());\r\n            }\r\n        }\r\n        console.log(\"Trying to stringify current scriptlet object: \", _value);\r\n        return _value;\r\n    }\r\n\r\n    public getPolicyType():string {\r\n        return this.policyObject == undefined ? \"Groovy policy\" : this.policyObject.getPoliticType();\r\n    }\r\n\r\n    public getPolicyWeight():string {\r\n        return this.policyObject == undefined ? \"N/A\" : this.policyObject.getPolicyWeight();\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/watchers/model/scriptlet.data.object.ts","import { Entity } from './entity';\r\nimport { ScriptletDataObject } from './scriptlet.data.object';\r\nimport * as moment from 'moment/moment';\r\n\r\nexport class Watcher extends Entity {\r\n\r\n    public attributeCheckers:{ [key:string]:ScriptletDataObject; } = {};\r\n    public trigger:ScriptletDataObject = new ScriptletDataObject({});\r\n    public scalingPolicies:{ [key:string]:ScriptletDataObject; } = {};\r\n    public connectionStringTemplate:string = \"\";\r\n    public scalingSize:number = 0;\r\n    public maxClusterSize:number = 10;\r\n    public minClusterSize:number = 0;\r\n    public cooldownTime:number = 0;\r\n    public type:string = \"default\";\r\n    public autoScaling:boolean = false;\r\n\r\n    public toJSON():any {\r\n        // console.log(\"JSONify the watcher from the watcher class: \", this);\r\n         let _value:any = {};\r\n        _value[\"attributeCheckers\"] = {};\r\n        for (let key in this.attributeCheckers) {\r\n            _value[\"attributeCheckers\"][key] = this.attributeCheckers[key].toJSON();\r\n        }\r\n        _value[\"scalingPolicies\"] = {};\r\n        for (let key in this.scalingPolicies) {\r\n            _value[\"scalingPolicies\"][key] = this.scalingPolicies[key].toJSON();\r\n        }\r\n        _value[\"trigger\"] = this.trigger.toJSON();\r\n        _value[\"parameters\"] = this.stringifyParameters();\r\n        _value[\"connectionStringTemplate\"] = this.connectionStringTemplate;\r\n        _value[\"cooldownTime\"] = moment.duration({ milliseconds: this.cooldownTime}).toISOString();\r\n        _value[\"autoScaling\"] = this.autoScaling;\r\n        _value[\"scalingSize\"] = this.scalingSize;\r\n        _value[\"minClusterSize\"] = this.minClusterSize;\r\n        _value[\"maxClusterSize\"] = this.maxClusterSize;\r\n        _value[\"type\"] = this.type;\r\n        return _value;\r\n    }\r\n\r\n    checkerExists(attributeName:string):boolean {\r\n        return this.attributeCheckers[attributeName] != undefined && this.attributeCheckers[attributeName].script.length > 0 ;\r\n    }\r\n\r\n    checkerTypeForAttributeName(attributeName:string):string {\r\n        return this.checkerExists(attributeName) ? this.attributeCheckers[attributeName].language : \"n/a\";\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/watchers/model/watcher.ts","\n        var result = require(\"!!../../../../../node_modules/css-loader/index.js!./main.css\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/watchers/templates/css/main.css\n// module id = ./src/app/watchers/templates/css/main.css\n// module chunks = 1","\n        var result = require(\"!!../../../../../node_modules/css-loader/index.js!./prov.css\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/watchers/templates/css/prov.css\n// module id = ./src/app/watchers/templates/css/prov.css\n// module chunks = 1","\n        var result = require(\"!!../../../../../node_modules/css-loader/index.js!./statuses.css\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/watchers/templates/css/statuses.css\n// module id = ./src/app/watchers/templates/css/statuses.css\n// module chunks = 1","module.exports = \"<div class=\\\"right_col\\\" role=\\\"main\\\" style=\\\"min-height: 949px;\\\">\\r\\n  <div class=\\\"\\\">\\r\\n    <div class=\\\"page-title\\\">\\r\\n      <div class=\\\"title_left\\\">\\r\\n        <h3>{{getMainHeader()}}</h3>\\r\\n      </div>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"clearfix\\\"></div>\\r\\n\\r\\n\\r\\n    <!-- Modal for edit the trigger for activeWatcher -->\\r\\n    <div class=\\\"modal fade\\\" id=\\\"editTriggerModal\\\" role=\\\"dialog\\\" aria-labelledby=\\\"editTriggerLabel\\\"  *ngIf=\\\"activeWatcher != undefined\\\">\\r\\n      <div class=\\\"modal-dialog modal-xlg modal-lg\\\" role=\\\"document\\\">\\r\\n        <div class=\\\"modal-content\\\">\\r\\n          <div class=\\\"modal-header\\\">\\r\\n            <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\" aria-label=\\\"Close\\\"><span aria-hidden=\\\"true\\\">&times;</span></button>\\r\\n            <h4 class=\\\"modal-title leftAlign\\\" id=\\\"editTriggerLabel\\\">Edit trigger</h4>\\r\\n            <br/>\\r\\n            <div class=\\\"modal-body\\\">\\r\\n              <div id=\\\"smartwizardForTrigger\\\" style=\\\"height: 95%\\\">\\r\\n                <ul>\\r\\n                  <li>\\r\\n                    <a [attr.href]=\\\"'#language'\\\">\\r\\n                      Language<br />\\r\\n                      <small>Select language for trigger</small>\\r\\n                    </a>\\r\\n                  </li>\\r\\n                  <li>\\r\\n                    <a [attr.href]=\\\"'#url'\\\">\\r\\n                      Use url<br />\\r\\n                      <small>Use URL for loading script</small>\\r\\n                    </a>\\r\\n                  </li>\\r\\n                  <li>\\r\\n                    <a [attr.href]=\\\"'#ptable'\\\">\\r\\n                      Parameters<br />\\r\\n                      <small>Append parameters</small>\\r\\n                    </a>\\r\\n                  </li>\\r\\n                  <li>\\r\\n                    <a [attr.href]=\\\"'#script'\\\">\\r\\n                      Script<br />\\r\\n                      <small>Trigger's script</small>\\r\\n                    </a>\\r\\n                  </li>\\r\\n                </ul>\\r\\n\\r\\n                <div style=\\\"height:100%\\\">\\r\\n                  <div id=\\\"language\\\" class=\\\"row\\\" style=\\\"margin-top: 100px;\\\">\\r\\n                    <div class=\\\"item form-group\\\">\\r\\n                      <label\\r\\n                              class=\\\"control-label col-md-3 col-sm-3 col-xs-12\\\"\\r\\n                              for=\\\"languageSelect\\\"\\r\\n                              style=\\\"margin-top: 7px;\\\">\\r\\n                        Language <span class=\\\"required\\\">*</span>\\r\\n                      </label>\\r\\n                      <div class=\\\"col-md-6 col-sm-6 col-xs-12\\\">\\r\\n                        <select class=\\\"form-control\\\" [(ngModel)]=\\\"activeWatcher.trigger.language\\\" id=\\\"languageSelect\\\">\\r\\n                          <option *ngFor=\\\"let language of triggerLanguages\\\" [ngValue]=\\\"language\\\">{{language}}</option>\\r\\n                        </select>\\r\\n                      </div>\\r\\n                    </div>\\r\\n                  </div>\\r\\n\\r\\n                  <div id=\\\"url\\\" class=\\\"row\\\" style=\\\"margin-top: 100px;\\\">\\r\\n                    <div class=\\\"item form-group\\\">\\r\\n                      <label\\r\\n                              class=\\\"control-label col-md-3 col-sm-3 col-xs-12\\\"\\r\\n                              style=\\\"margin-top: 7px;\\\">\\r\\n                        Load script from external URL <span class=\\\"required\\\">*</span>\\r\\n                      </label>\\r\\n\\r\\n                      <div class=\\\"col-md-6 col-sm-6 col-xs-12\\\" >\\r\\n                        <ui-switch\\r\\n                                [(ngModel)]=\\\"activeWatcher.trigger.isURL\\\"\\r\\n                                [size]=\\\"'small'\\\">\\r\\n                        </ui-switch>\\r\\n                      </div>\\r\\n                    </div>\\r\\n                  </div>\\r\\n\\r\\n                  <div id=\\\"ptable\\\" class=\\\"row\\\" style=\\\"margin-top: 30px;\\\">\\r\\n                    <div>\\r\\n                      <ptable [entity]=\\\"activeWatcher.trigger\\\"></ptable>\\r\\n                    </div>\\r\\n                  </div>\\r\\n\\r\\n                  <div id=\\\"script\\\" class=\\\"row\\\" style=\\\"margin-top: 20px;\\\">\\r\\n                    <div *ngIf=\\\"activeWatcher.trigger.isURL\\\">\\r\\n                      <div class=\\\"item form-group\\\">\\r\\n                        <label\\r\\n                                class=\\\"control-label col-md-3 col-sm-3 col-xs-12\\\"\\r\\n                                for=\\\"urlForTrigger\\\"\\r\\n                                style=\\\"margin-top: 7px;\\\">\\r\\n                          Url for script loading <span class=\\\"required\\\">*</span>\\r\\n                        </label>\\r\\n                        <div class=\\\"col-md-6 col-sm-6 col-xs-12\\\">\\r\\n                          <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"urlForTrigger\\\" placeholder=\\\"Input url for script to be loaded from\\\" [(ngModel)]=\\\"activeWatcher.trigger.script\\\"/>\\r\\n                        </div>\\r\\n                      </div>\\r\\n                    </div>\\r\\n                    <div *ngIf=\\\"!activeWatcher.trigger.isURL\\\">\\r\\n                      <div>\\r\\n                        <div class=\\\"row\\\">\\r\\n                          <label\\r\\n                                  class=\\\"control-label col-md-3 col-sm-3 col-xs-12\\\"\\r\\n                                  for=\\\"scriptBodyForTrigger\\\"\\r\\n                                  style=\\\"margin-top: 7px;\\\">\\r\\n                            Script body for the trigger <span class=\\\"required\\\">*</span>\\r\\n                          </label>\\r\\n                        </div>\\r\\n                        <div class=\\\"row\\\">\\r\\n                          <div class=\\\"col-md-12 col-sm-12 col-xs-12\\\">\\r\\n                            <textarea id=\\\"scriptBodyForTrigger\\\" rows=\\\"10\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"activeWatcher.trigger.script\\\"></textarea>\\r\\n                          </div>\\r\\n                        </div>\\r\\n                      </div>\\r\\n                    </div>\\r\\n                    <div class=\\\"col-md-2\\\" style=\\\"float:right; margin-top: 30px;\\\">\\r\\n                      <button class=\\\"btn btn-primary\\\" data-dismiss=\\\"modal\\\" (click)=\\\"saveCurrentTrigger()\\\">Save trigger</button>\\r\\n                    </div>\\r\\n                  </div>\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n\\r\\n    <!-- Modal for edit checkers for activeWatcher -->\\r\\n    <div class=\\\"modal fade\\\" id=\\\"editCheckerModal\\\" role=\\\"dialog\\\" aria-labelledby=\\\"editCheckerLabel\\\" *ngIf=\\\"activeWatcher != undefined\\\">\\r\\n      <div class=\\\"modal-dialog modal-xlg modal-lg\\\" role=\\\"document\\\">\\r\\n        <div class=\\\"modal-content\\\">\\r\\n          <div class=\\\"modal-header\\\">\\r\\n            <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\" aria-label=\\\"Close\\\"><span aria-hidden=\\\"true\\\">&times;</span></button>\\r\\n            <h4 class=\\\"modal-title leftAlign\\\" id=\\\"editCheckerLabel\\\">Edit attribute checkers</h4>\\r\\n            <br/>\\r\\n            <div class=\\\"modal-body\\\">\\r\\n              <div id=\\\"smartwizardForCheckers\\\" style=\\\"height: 95%\\\">\\r\\n                <ul>\\r\\n                  <li>\\r\\n                    <a [attr.href]=\\\"'#checkerTable'\\\">\\r\\n                      Select checker<br />\\r\\n                      <small>Select type of checker</small>\\r\\n                    </a>\\r\\n                  </li>\\r\\n                  <li>\\r\\n                    <a [attr.href]=\\\"'#checkerType'\\\">\\r\\n                      Type<br />\\r\\n                      <small>Select type of checker</small>\\r\\n                    </a>\\r\\n                  </li>\\r\\n                  <li>\\r\\n                    <a [attr.href]=\\\"'#checkerPTable'\\\">\\r\\n                      Parameters<br />\\r\\n                      <small>Set parameters</small>\\r\\n                    </a>\\r\\n                  </li>\\r\\n                  <li>\\r\\n                    <a [attr.href]=\\\"'#checkerBody'\\\">\\r\\n                      Checker's logic<br />\\r\\n                      <small>What action will be performed</small>\\r\\n                    </a>\\r\\n                  </li>\\r\\n                </ul>\\r\\n\\r\\n                <div style=\\\"height:100%\\\">\\r\\n\\r\\n                  <div id=\\\"checkerTable\\\" class=\\\"row\\\" style=\\\"margin-top: 5px;\\\">\\r\\n                    <table class=\\\"table table-hover table-bordered\\\">\\r\\n                      <thead class=\\\"thead-inverse\\\">\\r\\n                      <tr>\\r\\n                        <th>Actions</th>\\r\\n                        <th>Attribute</th>\\r\\n                        <th>Binding</th>\\r\\n                        <th>Checker type</th>\\r\\n                      </tr>\\r\\n                      </thead>\\r\\n                      <tbody>\\r\\n                      <tr *ngFor=\\\"let attribute of attributes\\\" class=\\\"clickableTr\\\" [class.activeTr]=\\\"((selectedAttribute != undefined) && (selectedAttribute.name == attribute.name))\\\" (click)=\\\"editCheckerForAttribute(attribute)\\\">\\r\\n                        <td>\\r\\n                                  <span\\r\\n                                          class=\\\"glyphicon glyphicon-remove-circle btn btn-xs btn-danger\\\"\\r\\n                                          (click)=\\\"removeCheckerForAttribute(attribute)\\\"\\r\\n                                          aria-hidden=\\\"true\\\">\\r\\n                                  </span>\\r\\n                        </td>\\r\\n                        <th scope=\\\"row\\\">{{attribute.name}}</th>\\r\\n                        <td>\\r\\n                                <span class=\\\"input-group-addon\\\"  *ngIf=\\\"activeWatcher.checkerExists(attribute.name)\\\">\\r\\n                                      <span class=\\\"glyphicon glyphicon-ok glyph-icon-appended\\\" aria-hidden=\\\"true\\\"></span>\\r\\n                                 </span>\\r\\n                        </td>\\r\\n                        <td>\\r\\n                          {{activeWatcher.checkerTypeForAttributeName(attribute.name)}}\\r\\n                        </td>\\r\\n                      </tr>\\r\\n                      </tbody>\\r\\n                    </table>\\r\\n                  </div>\\r\\n\\r\\n                  <div id=\\\"checkerPTable\\\" class=\\\"row\\\" style=\\\"margin-top: 30px;\\\">\\r\\n                    <div>\\r\\n                      <ptable [entity]=\\\"activeChecker\\\"></ptable>\\r\\n                    </div>\\r\\n                  </div>\\r\\n\\r\\n                  <div id=\\\"checkerType\\\" class=\\\"row\\\" style=\\\"margin-top: 100px;\\\">\\r\\n                    <div class=\\\"item form-group\\\">\\r\\n                      <label\\r\\n                              class=\\\"control-label col-md-3 col-sm-3 col-xs-12\\\"\\r\\n                              for=\\\"checkerTypeSelect\\\"\\r\\n                              style=\\\"margin-top: 7px;\\\">\\r\\n                        Set type for attribute checker <span class=\\\"required\\\">*</span>\\r\\n                      </label>\\r\\n                      <div class=\\\"col-md-6 col-sm-6 col-xs-12\\\">\\r\\n                        <select class=\\\"form-control\\\" [(ngModel)]=\\\"activeChecker.language\\\" id=\\\"checkerTypeSelect\\\" (ngModelChange)=\\\"selectCheckerType($event)\\\">\\r\\n                          <option *ngFor=\\\"let type of checkersType\\\" [ngValue]=\\\"type.id\\\">{{type.description}}</option>\\r\\n                        </select>\\r\\n                      </div>\\r\\n                    </div>\\r\\n                  </div>\\r\\n\\r\\n\\r\\n                  <div id=\\\"checkerBody\\\" class=\\\"row\\\" style=\\\"margin-top: 5px;\\\">\\r\\n                    <div *ngIf=\\\"activeChecker?.language != 'ColoredAttributeChecker'\\\" style=\\\"margin-top: 20px;\\\">\\r\\n\\r\\n                      <div class=\\\"item form-group\\\" style=\\\"margin-bottom: 15px;\\\">\\r\\n                        <label\\r\\n                                class=\\\"control-label col-md-3 col-sm-3 col-xs-12\\\"\\r\\n                                style=\\\"margin-top: 7px;\\\">\\r\\n                          Load script from external URL <span class=\\\"required\\\">*</span>\\r\\n                        </label>\\r\\n\\r\\n                        <div class=\\\"col-md-6 col-sm-6 col-xs-12\\\" >\\r\\n                          <ui-switch\\r\\n                                  [(ngModel)]=\\\"activeChecker.isURL\\\"\\r\\n                                  [size]=\\\"'small'\\\">\\r\\n                          </ui-switch>\\r\\n                        </div>\\r\\n                      </div>\\r\\n\\r\\n                      <div *ngIf=\\\"activeChecker?.isURL\\\">\\r\\n                        <div class=\\\"item form-group\\\">\\r\\n                          <label\\r\\n                                  class=\\\"control-label col-md-3 col-sm-3 col-xs-12\\\"\\r\\n                                  for=\\\"urlForChecker\\\"\\r\\n                                  style=\\\"margin-top: 7px;\\\">\\r\\n                            Url for script loading <span class=\\\"required\\\">*</span>\\r\\n                          </label>\\r\\n                          <div class=\\\"col-md-6 col-sm-6 col-xs-12\\\">\\r\\n                            <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"urlForChecker\\\" placeholder=\\\"Input url for script to be loaded from\\\" [(ngModel)]=\\\"activeChecker.script\\\"/>\\r\\n                          </div>\\r\\n                        </div>\\r\\n                      </div>\\r\\n                      <div *ngIf=\\\"!activeChecker?.isURL\\\">\\r\\n                        <div class=\\\"item form-group\\\">\\r\\n                          <label\\r\\n                                  class=\\\"control-label col-md-3 col-sm-3 col-xs-12\\\"\\r\\n                                  for=\\\"scriptBodyForChecker\\\"\\r\\n                                  style=\\\"margin-top: 7px;\\\">\\r\\n                            Script body for the checker <span class=\\\"required\\\">*</span>\\r\\n                          </label>\\r\\n                          <div class=\\\"col-md-6 col-sm-6 col-xs-12\\\">\\r\\n                            <textarea id=\\\"scriptBodyForChecker\\\" rows=\\\"5\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"activeChecker.script\\\"></textarea>\\r\\n                          </div>\\r\\n                        </div>\\r\\n                      </div>\\r\\n                    </div>\\r\\n\\r\\n                    <div *ngIf=\\\"activeChecker?.language == 'ColoredAttributeChecker'\\\">\\r\\n                      <div class=\\\"panel-group group-accordeon\\\" id=\\\"accordionChecker\\\" role=\\\"tablist\\\" aria-multiselectable=\\\"true\\\">\\r\\n                        <div class=\\\"panel panel-default\\\" >\\r\\n                          <div class=\\\"panel-heading\\\" role=\\\"tab\\\" id=\\\"headingOne\\\">\\r\\n                            <h4 class=\\\"panel-title\\\">\\r\\n                              <a role=\\\"button\\\" data-toggle=\\\"collapse\\\" data-parent=\\\"#accordionChecker\\\" href=\\\"#collapseGreen\\\" aria-expanded=\\\"true\\\" aria-controls=\\\"collapseGreen\\\">\\r\\n                                <img src=\\\"assets/img/green-circle.png\\\" class=\\\"img-inline\\\"> Green condition\\r\\n                              </a>\\r\\n                            </h4>\\r\\n                          </div>\\r\\n                          <div id=\\\"collapseGreen\\\" class=\\\"panel-collapse collapse in\\\" role=\\\"tabpanel\\\" aria-labelledby=\\\"headingOne\\\">\\r\\n                            <div class=\\\"panel-body\\\">\\r\\n                              <coloredCondition [entity]=\\\"activeChecker.object.green\\\" (notify)=\\\"onGreenNotify($event)\\\"></coloredCondition>\\r\\n                            </div>\\r\\n                          </div>\\r\\n                        </div>\\r\\n                        <div class=\\\"panel panel-default\\\">\\r\\n                          <div class=\\\"panel-heading\\\" role=\\\"tab\\\" id=\\\"headingTwo\\\">\\r\\n                            <h4 class=\\\"panel-title\\\">\\r\\n                              <a class=\\\"collapsed\\\" role=\\\"button\\\" data-toggle=\\\"collapse\\\" data-parent=\\\"#accordionChecker\\\" href=\\\"#collapseYellow\\\" aria-expanded=\\\"false\\\" aria-controls=\\\"collapseYellow\\\">\\r\\n                                <img src=\\\"assets/img/yellow-circle.png\\\" class=\\\"img-inline\\\"> Yellow condition\\r\\n                              </a>\\r\\n                            </h4>\\r\\n                          </div>\\r\\n                          <div id=\\\"collapseYellow\\\" class=\\\"panel-collapse collapse\\\" role=\\\"tabpanel\\\" aria-labelledby=\\\"headingTwo\\\">\\r\\n                            <div class=\\\"panel-body\\\">\\r\\n                              <coloredCondition [entity]=\\\"activeChecker.object.yellow\\\" (notify)=\\\"onYellowNotify($event)\\\"></coloredCondition>\\r\\n                            </div>\\r\\n                          </div>\\r\\n                        </div>\\r\\n                      </div>\\r\\n                    </div>\\r\\n\\r\\n                    <div class=\\\"col-md-2\\\" style=\\\"float:right;\\\">\\r\\n                      <button class=\\\"btn btn-primary\\\" data-dismiss=\\\"modal\\\" (click)=\\\"saveCurrentChecker()\\\">Save checker</button>\\r\\n                    </div>\\r\\n                  </div>\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n\\r\\n    <!-- Modal for edit policies for activeWatcher -->\\r\\n    <div class=\\\"modal fade\\\" id=\\\"editPolicyModal\\\" role=\\\"dialog\\\" aria-labelledby=\\\"editPolicyLabel\\\" *ngIf=\\\"activeWatcher != undefined\\\">\\r\\n      <div class=\\\"modal-dialog modal-xlg modal-lg\\\" role=\\\"document\\\">\\r\\n        <div class=\\\"modal-content\\\">\\r\\n          <div class=\\\"modal-header\\\">\\r\\n            <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\" aria-label=\\\"Close\\\"><span aria-hidden=\\\"true\\\">&times;</span></button>\\r\\n            <h4 class=\\\"modal-title leftAlign\\\" id=\\\"editPolicyLabel\\\">Edit scaling policies</h4>\\r\\n            <br/>\\r\\n            <div class=\\\"modal-body\\\">\\r\\n              <div id=\\\"smartwizardForPolicies\\\" style=\\\"height: 95%\\\">\\r\\n                <ul>\\r\\n                  <li>\\r\\n                    <a [attr.href]=\\\"'#policyTable'\\\">\\r\\n                      Policy selection<br />\\r\\n                      <small>Select or add a policy</small>\\r\\n                    </a>\\r\\n                  </li>\\r\\n                  <li>\\r\\n                    <a [attr.href]=\\\"'#policyType'\\\">\\r\\n                      Type<br />\\r\\n                      <small>Select type of policy</small>\\r\\n                    </a>\\r\\n                  </li>\\r\\n                  <li>\\r\\n                    <a [attr.href]=\\\"'#policyPTable'\\\">\\r\\n                      Parameters<br />\\r\\n                      <small>Set parameters</small>\\r\\n                    </a>\\r\\n                  </li>\\r\\n                  <li>\\r\\n                    <a [attr.href]=\\\"'#policyBody'\\\">\\r\\n                      Policy's logic<br />\\r\\n                      <small>How the policy works</small>\\r\\n                    </a>\\r\\n                  </li>\\r\\n                </ul>\\r\\n\\r\\n                <div style=\\\"height:100%\\\">\\r\\n\\r\\n                  <div id=\\\"policyTable\\\" class=\\\"row\\\" style=\\\"margin-top: 5px;\\\">\\r\\n                    <table class=\\\"table table-hover table-bordered\\\">\\r\\n                      <thead class=\\\"thead-inverse\\\">\\r\\n                      <tr>\\r\\n                        <th>Actions</th>\\r\\n                        <th>Name</th>\\r\\n                        <th>Type</th>\\r\\n                        <th>Weight</th>\\r\\n                      </tr>\\r\\n                      </thead>\\r\\n                      <tbody>\\r\\n                      <tr *ngFor=\\\"let entry of activeWatcher.scalingPolicies | keys\\\" class=\\\"clickableTr\\\" [class.activeTr]=\\\"isPolicyActive(entry.key)\\\" (click)=\\\"editPolicy(entry.key, entry.value)\\\">\\r\\n                        <td>\\r\\n                                  <span\\r\\n                                          class=\\\"glyphicon glyphicon-remove-circle btn btn-xs btn-danger\\\"\\r\\n                                          (click)=\\\"removePolicy(entry.key)\\\"\\r\\n                                          aria-hidden=\\\"true\\\">\\r\\n                                  </span>\\r\\n                        </td>\\r\\n                        <th scope=\\\"row\\\">{{entry.key}}</th>\\r\\n                        <td>\\r\\n                          {{entry.value.getPolicyType()}}\\r\\n                        </td>\\r\\n                        <td>\\r\\n                          {{entry.value.getPolicyWeight()}}\\r\\n                        </td>\\r\\n                      </tr>\\r\\n                      </tbody>\\r\\n                    </table>\\r\\n                    <button class=\\\"btn btn-primary btn-xs\\\" (click)=\\\"addNewPolicy()\\\">\\r\\n                      Add new policy\\r\\n                    </button>\\r\\n                  </div>\\r\\n\\r\\n                  <div id=\\\"policyType\\\" class=\\\"row\\\" style=\\\"margin-top: 100px;\\\">\\r\\n                    <div class=\\\"item form-group\\\">\\r\\n                      <label\\r\\n                              class=\\\"control-label col-md-3 col-sm-3 col-xs-12\\\"\\r\\n                              for=\\\"policyTypeSelect\\\"\\r\\n                              style=\\\"margin-top: 7px;\\\">\\r\\n                        Set type for policy <span class=\\\"required\\\">*</span>\\r\\n                      </label>\\r\\n                      <div class=\\\"col-md-6 col-sm-6 col-xs-12\\\">\\r\\n                        <select class=\\\"form-control\\\" [(ngModel)]=\\\"activePolicy.language\\\" id=\\\"policyTypeSelect\\\" (ngModelChange)=\\\"selectPolicyType($event)\\\">\\r\\n                          <option *ngFor=\\\"let type of policyTypes\\\" [ngValue]=\\\"type.id\\\">{{type.description}}</option>\\r\\n                        </select>\\r\\n                      </div>\\r\\n                    </div>\\r\\n                  </div>\\r\\n\\r\\n                  <div id=\\\"policyPTable\\\" class=\\\"row\\\" style=\\\"margin-top: 30px;\\\">\\r\\n                    <div>\\r\\n                      <ptable [entity]=\\\"activePolicy\\\"></ptable>\\r\\n                    </div>\\r\\n                  </div>\\r\\n\\r\\n                  <div id=\\\"policyBody\\\" class=\\\"row\\\" style=\\\"margin-top: 5px;\\\">\\r\\n                    <div *ngIf=\\\"activePolicy?.language == 'Groovy'\\\" style=\\\"margin-top: 20px;\\\">\\r\\n\\r\\n                      <div class=\\\"item form-group\\\" style=\\\"margin-bottom: 15px;\\\">\\r\\n                        <label\\r\\n                                class=\\\"control-label col-md-3 col-sm-3 col-xs-12\\\"\\r\\n                                style=\\\"margin-top: 7px;\\\">\\r\\n                          Load script from external URL <span class=\\\"required\\\">*</span>\\r\\n                        </label>\\r\\n\\r\\n                        <div class=\\\"col-md-6 col-sm-6 col-xs-12\\\" >\\r\\n                          <ui-switch\\r\\n                                  [(ngModel)]=\\\"activePolicy.isURL\\\"\\r\\n                                  [size]=\\\"'small'\\\">\\r\\n                          </ui-switch>\\r\\n                        </div>\\r\\n                      </div>\\r\\n\\r\\n                      <div *ngIf=\\\"activePolicy?.isURL\\\">\\r\\n                        <div class=\\\"item form-group\\\">\\r\\n                          <label\\r\\n                                  class=\\\"control-label col-md-3 col-sm-3 col-xs-12\\\"\\r\\n                                  for=\\\"urlForPolicy\\\"\\r\\n                                  style=\\\"margin-top: 7px;\\\">\\r\\n                            Url for script loading <span class=\\\"required\\\">*</span>\\r\\n                          </label>\\r\\n                          <div class=\\\"col-md-6 col-sm-6 col-xs-12\\\">\\r\\n                            <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"urlForPolicy\\\" placeholder=\\\"Input url for script to be loaded from\\\" [(ngModel)]=\\\"activePolicy.script\\\"/>\\r\\n                          </div>\\r\\n                        </div>\\r\\n                      </div>\\r\\n                      <div *ngIf=\\\"!activePolicy?.isURL\\\">\\r\\n                        <div class=\\\"item form-group\\\">\\r\\n                          <label\\r\\n                                  class=\\\"control-label col-md-3 col-sm-3 col-xs-12\\\"\\r\\n                                  for=\\\"scriptBodyForPolicy\\\"\\r\\n                                  style=\\\"margin-top: 7px;\\\">\\r\\n                            Script body for the policy <span class=\\\"required\\\">*</span>\\r\\n                          </label>\\r\\n                          <div class=\\\"col-md-6 col-sm-6 col-xs-12\\\">\\r\\n                            <textarea id=\\\"scriptBodyForPolicy\\\" rows=\\\"5\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"activePolicy.script\\\"></textarea>\\r\\n                          </div>\\r\\n                        </div>\\r\\n                      </div>\\r\\n                    </div>\\r\\n\\r\\n                    <div *ngIf=\\\"activePolicy?.language == 'HealthStatusBased'\\\">\\r\\n\\r\\n                      <div class=\\\"form-group row\\\">\\r\\n                        <label for=\\\"healthStatusTypeSelection\\\" class=\\\"col-md-2 col-form-label\\\">Level</label>\\r\\n                        <div class=\\\"col-md-10\\\">\\r\\n                          <select class=\\\"form-control\\\" [(ngModel)]=\\\"activePolicy.policyObject.level\\\" id=\\\"healthStatusTypeSelection\\\">\\r\\n                            <option  *ngFor=\\\"let level of healthStatusLevels\\\" [ngValue]=\\\"level\\\">{{level}}</option>\\r\\n                          </select>\\r\\n                        </div>\\r\\n                      </div>\\r\\n\\r\\n                      <div class=\\\"form-group row\\\">\\r\\n                        <label for=\\\"voteWeightHSBPolicy\\\" class=\\\"col-md-2 col-form-label\\\">Vote weight</label>\\r\\n                        <div class=\\\"col-md-10\\\">\\r\\n                          <input class=\\\"form-control\\\" type=\\\"number\\\"  min=\\\"0\\\" [(ngModel)]=\\\"activePolicy.policyObject.voteWeight\\\" id=\\\"voteWeightHSBPolicy\\\">\\r\\n                        </div>\\r\\n                      </div>\\r\\n\\r\\n                      <div class=\\\"form-group row\\\">\\r\\n                        <label for=\\\"observationTimeHSBPolicy\\\" class=\\\"col-md-2 col-form-label\\\">Observation time (ms)</label>\\r\\n                        <div class=\\\"col-md-10\\\">\\r\\n                          <input class=\\\"form-control\\\" type=\\\"number\\\" min=\\\"0\\\" [(ngModel)]=\\\"activePolicy.policyObject.observationTime\\\" id=\\\"observationTimeHSBPolicy\\\">\\r\\n                        </div>\\r\\n                      </div>\\r\\n\\r\\n                      <div class=\\\"form-group row\\\">\\r\\n                        <label class=\\\"col-md-2 col-form-label\\\">Incremental weight</label>\\r\\n                        <div class=\\\"col-md-10\\\">\\r\\n                          <ui-switch\\r\\n                                  [(ngModel)]=\\\"activePolicy.policyObject.incrementalWeight\\\"\\r\\n                                  [size]=\\\"'small'\\\">\\r\\n                          </ui-switch>\\r\\n                        </div>\\r\\n                      </div>\\r\\n\\r\\n                    </div>\\r\\n\\r\\n                    <div *ngIf=\\\"activePolicy?.language == 'MetricBased'\\\">\\r\\n\\r\\n                      <div class=\\\"form-group row\\\">\\r\\n                        <label for=\\\"operationalRangePolicy\\\" class=\\\"col-md-2 col-form-label\\\">Operational range</label>\\r\\n                        <div class=\\\"col-md-9\\\">\\r\\n                          <input class=\\\"form-control\\\" disabled type=\\\"text\\\" min=\\\"0\\\" [attr.value]=\\\"activePolicy.policyObject.operationalRange.toString()\\\" id=\\\"operationalRangePolicy\\\">\\r\\n                        </div>\\r\\n                        <div class=\\\"col-md-1\\\">\\r\\n                          <button class=\\\"btn btn-primary\\\" (click)=\\\"toggleOperationalRangeDialog()\\\">{{ operationalRangeVisible ? 'Hide' : 'Edit' }}</button>\\r\\n                        </div>\\r\\n                      </div>\\r\\n\\r\\n                      <div class=\\\"form-group row\\\" *ngIf=\\\"operationalRangeVisible\\\">\\r\\n                        <label for=\\\"operationalRangePolicy\\\" class=\\\"col-md-2 col-form-label\\\">Operational settings</label>\\r\\n                        <div class=\\\"col-md-10\\\">\\r\\n                          <div class=\\\"row\\\">\\r\\n                            <br/><br/>\\r\\n                          </div>\\r\\n                          <div class=\\\"row\\\">\\r\\n                            <label class=\\\"col-md-3\\\">Lower bound infinite</label>\\r\\n                            <div class=\\\"col-md-9\\\">\\r\\n                              <ui-switch\\r\\n                                      [(ngModel)]=\\\"activePolicy.policyObject.operationalRange.isBeginInfinite\\\"\\r\\n                                      [size]=\\\"'small'\\\">\\r\\n                              </ui-switch>\\r\\n                            </div>\\r\\n                          </div>\\r\\n\\r\\n                          <div class=\\\"row\\\" *ngIf=\\\"!activePolicy.policyObject.operationalRange.isBeginInfinite\\\">\\r\\n                            <label class=\\\"col-md-3\\\">Lower bound value</label>\\r\\n                            <div class=\\\"col-md-4\\\">\\r\\n                              <input type=\\\"number\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"activePolicy.policyObject.operationalRange.begin\\\"/>\\r\\n                            </div>\\r\\n                            <label class=\\\"col-md-1\\\">including</label>\\r\\n                            <div class=\\\"col-md-4\\\">\\r\\n                              <ui-switch\\r\\n                                      [(ngModel)]=\\\"activePolicy.policyObject.operationalRange.isBeginIncluding\\\"\\r\\n                                      [size]=\\\"'small'\\\">\\r\\n                              </ui-switch>\\r\\n                            </div>\\r\\n                          </div>\\r\\n\\r\\n                          <div class=\\\"row\\\">\\r\\n                            <label class=\\\"col-md-3\\\">Upper bound infinite</label>\\r\\n                            <div class=\\\"col-md-9\\\">\\r\\n                              <ui-switch\\r\\n                                      [(ngModel)]=\\\"activePolicy.policyObject.operationalRange.isEndInfinite\\\"\\r\\n                                      [size]=\\\"'small'\\\">\\r\\n                              </ui-switch>\\r\\n                            </div>\\r\\n                          </div>\\r\\n\\r\\n                          <div class=\\\"row\\\" *ngIf=\\\"!activePolicy.policyObject.operationalRange.isEndInfinite\\\">\\r\\n                            <label class=\\\"col-md-3\\\">Upper bound value</label>\\r\\n                            <div class=\\\"col-md-4\\\">\\r\\n                              <input type=\\\"number\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"activePolicy.policyObject.operationalRange.end\\\"/>\\r\\n                            </div>\\r\\n                            <label class=\\\"col-md-1\\\">including</label>\\r\\n                            <div class=\\\"col-md-4\\\">\\r\\n                              <ui-switch\\r\\n                                      [(ngModel)]=\\\"activePolicy.policyObject.operationalRange.isEndIncluding\\\"\\r\\n                                      [size]=\\\"'small'\\\">\\r\\n                              </ui-switch>\\r\\n                            </div>\\r\\n                          </div>\\r\\n\\r\\n                        </div>\\r\\n                      </div>\\r\\n\\r\\n                      <hr/>\\r\\n\\r\\n                      <div class=\\\"form-group row\\\">\\r\\n                        <label for=\\\"metricAttributeSelection\\\" class=\\\"col-md-2 col-form-label\\\">Attribute</label>\\r\\n                        <div class=\\\"col-md-10\\\">\\r\\n                          <select class=\\\"form-control\\\" [(ngModel)]=\\\"activePolicy.policyObject.attributeName\\\" id=\\\"metricAttributeSelection\\\">\\r\\n                              <option  *ngFor=\\\"let attribute of attributes\\\" [ngValue]=\\\"attribute.name\\\">{{attribute.name}}</option>\\r\\n                          </select>\\r\\n                        </div>\\r\\n                      </div>\\r\\n\\r\\n                      <div class=\\\"form-group row\\\">\\r\\n                        <label for=\\\"metricAggregationSelection\\\" class=\\\"col-md-2 col-form-label\\\">Aggregation</label>\\r\\n                        <div class=\\\"col-md-10\\\">\\r\\n                          <select class=\\\"form-control\\\" [(ngModel)]=\\\"activePolicy.policyObject.aggregation\\\" id=\\\"metricAggregationSelection\\\">\\r\\n                            <option  *ngFor=\\\"let aggregation of aggregations\\\" [ngValue]=\\\"aggregation\\\">{{aggregation}}</option>\\r\\n                          </select>\\r\\n                        </div>\\r\\n                      </div>\\r\\n\\r\\n                      <div class=\\\"form-group row\\\">\\r\\n                        <label for=\\\"analysisDepthPolicy\\\" class=\\\"col-md-2 col-form-label\\\">Analysis depth (ms)</label>\\r\\n                        <div class=\\\"col-md-10\\\">\\r\\n                          <input class=\\\"form-control\\\" type=\\\"number\\\" min=\\\"0\\\" [(ngModel)]=\\\"activePolicy.policyObject.analysisDepth\\\" id=\\\"analysisDepthPolicy\\\">\\r\\n                        </div>\\r\\n                      </div>\\r\\n\\r\\n                      <div class=\\\"form-group row\\\">\\r\\n                        <label for=\\\"voteWeightAttrPolicy\\\" class=\\\"col-md-2 col-form-label\\\">Vote weight</label>\\r\\n                        <div class=\\\"col-md-10\\\">\\r\\n                          <input class=\\\"form-control\\\" type=\\\"number\\\"  min=\\\"0\\\" [(ngModel)]=\\\"activePolicy.policyObject.voteWeight\\\" id=\\\"voteWeightAttrPolicy\\\">\\r\\n                        </div>\\r\\n                      </div>\\r\\n\\r\\n                      <div class=\\\"form-group row\\\">\\r\\n                        <label for=\\\"observationTimeAttrPolicy\\\" class=\\\"col-md-2 col-form-label\\\">Observation time (ms)</label>\\r\\n                        <div class=\\\"col-md-10\\\">\\r\\n                          <input class=\\\"form-control\\\" type=\\\"number\\\" min=\\\"0\\\" [(ngModel)]=\\\"activePolicy.policyObject.observationTime\\\" id=\\\"observationTimeAttrPolicy\\\">\\r\\n                        </div>\\r\\n                      </div>\\r\\n\\r\\n                      <div class=\\\"form-group row\\\">\\r\\n                        <label class=\\\"col-md-2 col-form-label\\\">Incremental weight</label>\\r\\n                        <div class=\\\"col-md-10\\\">\\r\\n                          <ui-switch\\r\\n                                  [(ngModel)]=\\\"activePolicy.policyObject.incrementalWeight\\\"\\r\\n                                  [size]=\\\"'small'\\\">\\r\\n                          </ui-switch>\\r\\n                        </div>\\r\\n                      </div>\\r\\n\\r\\n                    </div>\\r\\n\\r\\n                    <div class=\\\"col-md-2\\\" style=\\\"float:right;\\\">\\r\\n                      <button class=\\\"btn btn-primary\\\" data-dismiss=\\\"modal\\\" (click)=\\\"saveCurrentPolicy()\\\">Save policy</button>\\r\\n                    </div>\\r\\n                  </div>\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"row\\\" style=\\\"margin-top: 30px\\\">\\r\\n      <panel [header]=\\\"'Supervisor settings'\\\" [column]=\\\"'7'\\\" *ngIf=\\\"activeWatcher != undefined\\\">\\r\\n\\r\\n        <div class=\\\"form-group row\\\">\\r\\n          <label for=\\\"watcherTypeSelection\\\" class=\\\"col-md-2 col-form-label\\\">Type</label>\\r\\n          <div class=\\\"col-md-10\\\">\\r\\n            <select class=\\\"form-control\\\" [(ngModel)]=\\\"activeWatcher.type\\\" id=\\\"watcherTypeSelection\\\">\\r\\n              <option  *ngFor=\\\"let supervisor of availableSupervisors\\\" [ngValue]=\\\"supervisor.type\\\">{{supervisor.type}}</option>\\r\\n            </select>\\r\\n          </div>\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"form-group row\\\">\\r\\n          <label for=\\\"connectionStringTmpl\\\" class=\\\"col-md-2 col-form-label\\\">Connection string template</label>\\r\\n          <div class=\\\"col-md-10\\\">\\r\\n            <input class=\\\"form-control\\\" type=\\\"text\\\" [(ngModel)]=\\\"activeWatcher.connectionStringTemplate\\\" id=\\\"connectionStringTmpl\\\">\\r\\n          </div>\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"form-group row\\\" *ngIf=\\\"activeWatcher.autoScaling\\\">\\r\\n          <label for=\\\"scalingSizeInput\\\" class=\\\"col-md-2 col-form-label\\\">Scaling size</label>\\r\\n          <div class=\\\"col-md-10\\\">\\r\\n            <input class=\\\"form-control\\\" type=\\\"number\\\" min=\\\"0\\\" [attr.max]=\\\"activeWatcher.maxClusterSize\\\" [(ngModel)]=\\\"activeWatcher.scalingSize\\\" id=\\\"scalingSizeInput\\\">\\r\\n          </div>\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"form-group row\\\" *ngIf=\\\"activeWatcher.autoScaling\\\">\\r\\n          <label for=\\\"minClusterSizeInput\\\" class=\\\"col-md-2 col-form-label\\\">Minimum cluster size</label>\\r\\n          <div class=\\\"col-md-10\\\">\\r\\n            <input class=\\\"form-control\\\" type=\\\"number\\\" min=\\\"0\\\" [(ngModel)]=\\\"activeWatcher.minClusterSize\\\" id=\\\"minClusterSizeInput\\\">\\r\\n          </div>\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"form-group row\\\" *ngIf=\\\"activeWatcher.autoScaling\\\">\\r\\n          <label for=\\\"maxClusterSizeInput\\\" class=\\\"col-md-2 col-form-label\\\">Maximum cluster size</label>\\r\\n          <div class=\\\"col-md-10\\\">\\r\\n            <input class=\\\"form-control\\\" type=\\\"number\\\" [attr.min]=\\\"activeWatcher.minClusterSize\\\" [(ngModel)]=\\\"activeWatcher.maxClusterSize\\\" id=\\\"maxClusterSizeInput\\\">\\r\\n          </div>\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"form-group row\\\" *ngIf=\\\"activeWatcher.autoScaling\\\">\\r\\n          <label for=\\\"cooldownTimeInput\\\" class=\\\"col-md-2 col-form-label\\\">Cooldown time (ms)</label>\\r\\n          <div class=\\\"col-md-10\\\">\\r\\n            <input class=\\\"form-control\\\" type=\\\"number\\\" [(ngModel)]=\\\"activeWatcher.cooldownTime\\\" id=\\\"cooldownTimeInput\\\">\\r\\n          </div>\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"form-group row\\\">\\r\\n          <label class=\\\"col-md-2 col-form-label\\\">Autoscaling</label>\\r\\n          <div class=\\\"col-md-10\\\">\\r\\n            <ui-switch\\r\\n                    [(ngModel)]=\\\"activeWatcher.autoScaling\\\"\\r\\n                    [size]=\\\"'small'\\\">\\r\\n            </ui-switch>\\r\\n          </div>\\r\\n        </div>\\r\\n      </panel>\\r\\n\\r\\n      <panel [header]=\\\"getPanelHeader()\\\" [column]=\\\"'5'\\\" *ngIf=\\\"activeWatcher != undefined\\\">\\r\\n\\r\\n        <div class=\\\"row row-margin-bottom-sm\\\">\\r\\n          <label class=\\\"control-label col-md-3 col-sm-3 col-xs-12\\\" for=\\\"componentSelection\\\" style=\\\"margin-top:10px;\\\">\\r\\n              Select group <span class=\\\"required\\\">*</span>\\r\\n          </label>\\r\\n          <div class=\\\"col-md-9 col-sm-9 col-xs-12\\\">\\r\\n            <select class=\\\"form-control\\\" [(ngModel)]=\\\"selectedComponent\\\" id=\\\"componentSelection\\\" (ngModelChange)=\\\"selectCurrentComponent($event)\\\">\\r\\n              <option  *ngFor=\\\"let component of components\\\" [ngValue]=\\\"component\\\">{{component}}</option>\\r\\n            </select>\\r\\n          </div>\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"row row-margin-bottom-sm\\\" *ngIf=\\\"!(attributes && attributes.length > 0)\\\">\\r\\n          <h5>Selected group does not contain attributes - please select another component or set some attributes</h5>\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"row row-margin-bottom-sm\\\">\\r\\n          <label class=\\\"control-label col-md-3 col-sm-3 col-xs-12\\\" style=\\\"margin-top:10px;\\\">\\r\\n            Trigger\\r\\n          </label>\\r\\n          <div class=\\\"col-md-4 col-sm-4 col-xs-12\\\">\\r\\n            <button class=\\\"btn btn-primary\\\"\\r\\n                    (click)=\\\"initTriggerModal()\\\"\\r\\n                    aria-hidden=\\\"true\\\"> Edit trigger\\r\\n            </button>\\r\\n          </div>\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"row row-margin-bottom-sm\\\">\\r\\n          <label class=\\\"control-label col-md-3 col-sm-3 col-xs-12\\\" style=\\\"margin-top:10px;\\\">\\r\\n            Checkers\\r\\n          </label>\\r\\n          <div class=\\\"col-md-4 col-sm-4 col-xs-12\\\">\\r\\n            <button class=\\\"btn btn-primary\\\"\\r\\n                    [disabled]=\\\"!(attributes && attributes.length > 0)\\\"\\r\\n                    (click)=\\\"initCheckersModal()\\\"\\r\\n                    aria-hidden=\\\"true\\\"> Edit checkers\\r\\n            </button>\\r\\n          </div>\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"row row-margin-bottom-sm\\\">\\r\\n          <label class=\\\"control-label col-md-3 col-sm-3 col-xs-12\\\" style=\\\"margin-top:10px;\\\">\\r\\n            Policies\\r\\n          </label>\\r\\n          <div class=\\\"col-md-4 col-sm-4 col-xs-12\\\">\\r\\n            <button class=\\\"btn btn-primary\\\"\\r\\n                    (click)=\\\"initPoliciesModal()\\\"\\r\\n                    aria-hidden=\\\"true\\\"> Edit policies\\r\\n            </button>\\r\\n          </div>\\r\\n        </div>\\r\\n      </panel>\\r\\n\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"row\\\" style=\\\"margin-top: 10px\\\">\\r\\n      <panel [header]=\\\"'Supervisor parameters'\\\" [column]=\\\"'12'\\\" *ngIf=\\\"activeWatcher != undefined\\\">\\r\\n        <ptable [entity]=\\\"activeWatcher\\\"></ptable>\\r\\n      </panel>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"row\\\" style=\\\"margin-top: 20px; float:right;\\\" *ngIf=\\\"activeWatcher != undefined\\\">\\r\\n      <hr/>\\r\\n      <div>\\r\\n        <button class=\\\"btn btn-primary\\\" (click)=\\\"saveActiveWatcher()\\\">Save</button>\\r\\n        <button class=\\\"btn\\\" (click)=\\\"cleanSelection()\\\">Cancel/clean</button>\\r\\n      </div>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"row\\\" style=\\\"margin-top: 10px\\\" *ngIf=\\\"activeWatcher == undefined\\\">\\r\\n      <panel [header]=\\\"'List of supervisors'\\\" [column]=\\\"'12'\\\">\\r\\n        <table class=\\\"table table-hover table-bordered\\\">\\r\\n          <thead class=\\\"thead-inverse\\\">\\r\\n          <tr>\\r\\n            <th style=\\\"width:90px;\\\">Actions</th>\\r\\n            <th>Name</th>\\r\\n            <th>Type</th>\\r\\n            <th>Autoscaling</th>\\r\\n            <th>Scaling size</th>\\r\\n            <th>Cooldown time</th>\\r\\n            <th>Min/max cluster size</th>\\r\\n            <th>Checkers</th>\\r\\n            <th>Trigger</th>\\r\\n            <th>Scaling policy</th>\\r\\n          </tr>\\r\\n          </thead>\\r\\n          <tbody>\\r\\n          <tr *ngFor=\\\"let watcher of watchers\\\" [class.active-tr]=\\\"isWatcherActive(watcher)\\\">\\r\\n            <td>\\r\\n              <span\\r\\n                  class=\\\"glyphicon glyphicon-remove-circle btn btn-xs btn-danger\\\"\\r\\n                  (click)=\\\"removeWatcher(watcher)\\\"\\r\\n                  aria-hidden=\\\"true\\\">\\r\\n              </span>\\r\\n              <span\\r\\n                  class=\\\"glyphicon glyphicon-pencil btn btn-xs btn-primary\\\"\\r\\n                  (click)=\\\"editWatcher(watcher)\\\"\\r\\n                  aria-hidden=\\\"true\\\">\\r\\n              </span>\\r\\n            </td>\\r\\n            <th scope=\\\"row\\\">{{watcher.name}}</th>\\r\\n            <th scope=\\\"row\\\">{{watcher.type}}</th>\\r\\n            <th scope=\\\"row\\\">{{watcher.autoScaling}}</th>\\r\\n            <th scope=\\\"row\\\">{{watcher.scalingSize}}</th>\\r\\n            <th scope=\\\"row\\\">{{watcher.cooldownTime}}</th>\\r\\n            <th scope=\\\"row\\\">{{watcher.minClusterSize}}/{{watcher.maxClusterSize}}</th>\\r\\n            <td>\\r\\n              <checkers [entity]=\\\"watcher.attributeCheckers\\\"></checkers>\\r\\n            </td>\\r\\n            <td>\\r\\n              <trigger [entity]=\\\"watcher.trigger\\\"></trigger>\\r\\n            </td>\\r\\n            <td>\\r\\n              <policies [entity]=\\\"watcher.scalingPolicies\\\"></policies>\\r\\n            </td>\\r\\n          </tr>\\r\\n          <tr>\\r\\n            <td></td>\\r\\n            <td></td>\\r\\n            <td></td>\\r\\n            <td></td>\\r\\n            <td></td>\\r\\n            <td></td>\\r\\n            <td></td>\\r\\n            <td></td>\\r\\n            <td></td>\\r\\n            <td>\\r\\n              <button\\r\\n                      style=\\\"float:right;\\\"\\r\\n                      class=\\\"btn btn-primary btn-sm\\\"\\r\\n                      (click)=\\\"addNewWatcher()\\\">+ New watcher</button>\\r\\n            </td>\\r\\n          </tr>\\r\\n          </tbody>\\r\\n        </table>\\r\\n\\r\\n      </panel>\\r\\n    </div>\\r\\n\\r\\n\\r\\n  </div>\\r\\n</div>\\r\\n\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/watchers/templates/main.html\n// module id = ./src/app/watchers/templates/main.html\n// module chunks = 1","module.exports = \"<div class=\\\"right_col\\\" role=\\\"main\\\" style=\\\"min-height: 949px;\\\">\\r\\n  <div class=\\\"\\\">\\r\\n    <div class=\\\"page-title\\\">\\r\\n      <div class=\\\"title_left\\\">\\r\\n        <h3>Provisioning settings</h3>\\r\\n      </div>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"clearfix\\\"></div>\\r\\n\\r\\n    <div class=\\\"row\\\" style=\\\"margin-top: 10px\\\">\\r\\n\\r\\n      <panel [header]=\\\"'Provisioning table'\\\" [column]=\\\"'12'\\\">\\r\\n        <p>Hello there!</p>\\r\\n      </panel>\\r\\n     </div>\\r\\n  </div>\\r\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/watchers/templates/prov.html\n// module id = ./src/app/watchers/templates/prov.html\n// module chunks = 1","module.exports = \"<div class=\\\"right_col\\\" role=\\\"main\\\" style=\\\"min-height: 949px;\\\">\\r\\n  <div class=\\\"\\\">\\r\\n    <div class=\\\"page-title\\\">\\r\\n      <div class=\\\"title_left\\\">\\r\\n        <h3>Resource groups statuses</h3>\\r\\n      </div>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"clearfix\\\"></div>\\r\\n\\r\\n    <div class=\\\"row\\\" style=\\\"margin-top: 90px\\\">\\r\\n\\r\\n      <panel [header]=\\\"'Statuses of groups'\\\" [column]=\\\"'12'\\\" *ngIf=\\\"statuses && statuses.length > 0\\\">\\r\\n\\r\\n        <a *ngFor=\\\"let status of statuses\\\"\\r\\n           class=\\\"grid-item-link pointerElement\\\"\\r\\n           (click)=\\\"showDetails(status)\\\">\\r\\n\\r\\n          <div\\r\\n                   [class.componentError]=\\\"status.code != 0\\\"\\r\\n                   [class.componentOk]=\\\"status.code == 0\\\"\\r\\n                   class=\\\"grid-item\\\"\\r\\n                   [tooltip]=\\\"status.details()\\\">\\r\\n            <h5 class=\\\"name\\\">{{status.name}}</h5>\\r\\n            <p class=\\\"symbol\\\">{{status.resourceName}}</p>\\r\\n            <p class=\\\"weight\\\" *ngIf=\\\"status.code != 0\\\">{{status.getShortDescription()}}</p>\\r\\n          </div>\\r\\n        </a>\\r\\n      </panel>\\r\\n     </div>\\r\\n  </div>\\r\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/watchers/templates/statuses.html\n// module id = ./src/app/watchers/templates/statuses.html\n// module chunks = 1","module.exports = \"<router-outlet></router-outlet>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/watchers/templates/template.html\n// module id = ./src/app/watchers/templates/template.html\n// module chunks = 1","import { Component, OnInit, ViewContainerRef } from '@angular/core';\r\nimport { ApiClient, REST } from '../services/app.restClient';\r\nimport { Response } from '@angular/http';\r\nimport { HealthStatus } from '../services/model/healthstatus/health.status';\r\n\r\nimport 'rxjs/add/operator/publishLast';\r\n\r\nimport { Overlay } from \"angular2-modal\";\r\nimport { Modal } from 'angular2-modal/plugins/bootstrap/index';\r\nimport {StatusFactory} from \"../services/model/healthstatus/factory\";\r\n\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  template: require('./templates/statuses.html'),\r\n  styles: [ require('./templates/css/statuses.css') ]\r\n})\r\nexport class WatcherDashboard implements OnInit {\r\n\r\n    private http:ApiClient;\r\n    timerId:any = undefined;\r\n    statuses:HealthStatus[] = [];\r\n\r\n    constructor(apiClient: ApiClient, private modal: Modal,  overlay: Overlay, vcRef: ViewContainerRef) {\r\n        this.http = apiClient;\r\n        overlay.defaultViewContainer = vcRef;\r\n   }\r\n\r\n   ngOnInit():void {}\r\n\r\n   ngAfterViewInit():void {\r\n        var _thisReference = this;\r\n        // load the list of watchers\r\n         this.timerId = setInterval(function(){\r\n              _thisReference.http.get(REST.SUPERVISORS_STATUS)\r\n                 .map((res:Response) => res.json())\r\n                 .subscribe((data) => {\r\n                    _thisReference.statuses = StatusFactory.parseAllStatuses(data);\r\n                 });\r\n         }, 2000);\r\n   }\r\n\r\n    ngOnDestroy() {\r\n        clearInterval(this.timerId);\r\n    }\r\n\r\n    showDetails(status:HealthStatus):void {\r\n        this.modal.alert()\r\n           .size('lg')\r\n           .title(\"Details for health status\")\r\n           .body(status.htmlDetails())\r\n           .isBlocking(false)\r\n           .keyboard(27)\r\n           .open()\r\n    }\r\n\r\n}\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/watchers/watchers.dashboard.ts","import { NgModule }      from '@angular/core';\r\nimport { CommonModule }  from '@angular/common';\r\nimport { ApiClient }     from '../services/app.restClient';\r\nimport { TooltipModule } from 'ng2-tooltip';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { HttpModule } from '@angular/http';\r\nimport { RouterModule } from '@angular/router';\r\nimport { ModalModule } from 'angular2-modal';\r\nimport {\r\n  VexModalModule,\r\n  providers\r\n} from 'angular2-modal/plugins/vex';\r\nimport { CommonSnampUtilsModule } from '../app.module';\r\n\r\nimport { TemplateComponent } from './watchers.template';\r\nimport { MainComponent } from './watchers.view';\r\nimport { WatcherDashboard } from './watchers.dashboard';\r\n\r\nimport { CheckersComponent } from './components/checkers.component';\r\nimport { TriggerComponent } from './components/trigger.component';\r\nimport { ColoredCondition } from './components/condition.block';\r\n\r\nimport { KeysPipe } from './watchers.pipes';\r\nimport { WatcherProvisioning } from \"./watchers.prov\";\r\nimport { PTable } from \"./components/ptable.component\";\r\nimport { PoliciesComponent } from \"./components/policies.component\";\r\n\r\nconst PROVIDERS:any =  [\r\n  ApiClient,\r\n  providers\r\n];\r\n\r\n@NgModule({\r\n   imports: [\r\n      CommonModule,\r\n      TooltipModule,\r\n      FormsModule,\r\n      ModalModule.forRoot(),\r\n      VexModalModule,\r\n      HttpModule,\r\n      CommonSnampUtilsModule,\r\n      RouterModule.forChild([{\r\n            path: '', component: TemplateComponent, children: [\r\n                { path: '', component: MainComponent },\r\n                { path: 'dashboard', component: WatcherDashboard },\r\n                { path: 'prov', component: WatcherProvisioning }\r\n            ]\r\n      }])\r\n    ],\r\n    declarations: [\r\n        TemplateComponent,\r\n        MainComponent,\r\n        WatcherDashboard,\r\n        WatcherProvisioning,\r\n        CheckersComponent,\r\n        TriggerComponent,\r\n        PoliciesComponent,\r\n        ColoredCondition,\r\n        PTable,\r\n        KeysPipe\r\n    ],\r\n    providers:    PROVIDERS\r\n})\r\nexport class WatchersModule {}\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/watchers/watchers.modules.ts","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({name: 'keys'})\r\nexport class KeysPipe implements PipeTransform {\r\n  transform(value, args:string[]) : any {\r\n    let keys = [];\r\n    for (let key in value) {\r\n      keys.push({key: key, value: value[key]});\r\n    }\r\n    return keys;\r\n  }\r\n}\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/watchers/watchers.pipes.ts","import { Component, OnInit, ViewContainerRef } from '@angular/core';\r\nimport { ApiClient, REST } from '../services/app.restClient';\r\nimport { Response } from '@angular/http';\r\nimport { HealthStatus } from '../services/model/healthstatus/health.status';\r\n\r\nimport 'rxjs/add/operator/publishLast';\r\n\r\nimport { Overlay } from \"angular2-modal\";\r\nimport { Modal } from 'angular2-modal/plugins/bootstrap/index';\r\nimport {StatusFactory} from \"../services/model/healthstatus/factory\";\r\n\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  template: require('./templates/prov.html'),\r\n  styles: [ require('./templates/css/prov.css') ]\r\n})\r\nexport class WatcherProvisioning implements OnInit {\r\n\r\n    private http:ApiClient;\r\n\r\n    constructor(apiClient: ApiClient, private modal: Modal,  overlay: Overlay, vcRef: ViewContainerRef) {\r\n        this.http = apiClient;\r\n        overlay.defaultViewContainer = vcRef;\r\n   }\r\n\r\n   ngOnInit():void {\r\n        console.log(\"Hello from WatcherProvisioning\");\r\n   }\r\n\r\n}\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/watchers/watchers.prov.ts","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  moduleId: module.id,\r\n  template: require('./templates/template.html'),\r\n})\r\nexport class TemplateComponent {}\r\n\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/watchers/watchers.template.ts","import { ChangeDetectorRef, Component, OnInit, ViewContainerRef } from '@angular/core';\r\nimport { ApiClient, REST } from '../services/app.restClient';\r\nimport { Response } from '@angular/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { Factory } from './model/factory';\r\nimport { Watcher } from './model/watcher';\r\nimport { ScriptletDataObject } from './model/scriptlet.data.object';\r\nimport { ColoredAttributePredicate } from './model/colored.predicate';\r\nimport { ColoredAttributeChecker } from './model/colored.checker';\r\nimport { AttributeInformation } from '../charts/model/attribute';\r\nimport { Overlay } from \"angular2-modal\";\r\nimport { VEXBuiltInThemes, Modal } from 'angular2-modal/plugins/vex';\r\n\r\nimport 'rxjs/add/operator/publishLast';\r\nimport 'smartwizard';\r\nimport { HealthStatusBasedScalingPolicy } from \"./model/policy/health.status.based.scaling.policy\";\r\nimport { AttributeBasedScalingPolicy } from \"./model/policy/attribute.based.scaling.policy\";\r\nimport { isNullOrUndefined } from \"util\";\r\n\r\n@Component({\r\n    moduleId: module.id,\r\n    template: require('./templates/main.html'),\r\n    styles: [require('./templates/css/main.css')]\r\n})\r\nexport class MainComponent implements OnInit {\r\n\r\n    private components: string[] = [];\r\n    private watchers: Watcher[] = [];\r\n    private activeWatcher: Watcher = undefined;\r\n    private isNewEntity: boolean = true;\r\n\r\n    private selectedComponent: string = undefined;\r\n    private triggerInitialized: boolean = false;\r\n    private checkersInitialized: boolean = false;\r\n    private policiesInitialized: boolean = false;\r\n\r\n    private attributes: AttributeInformation[] = [];\r\n    private selectedAttribute: AttributeInformation = undefined;\r\n\r\n    private activeChecker: ScriptletDataObject = new ScriptletDataObject({});\r\n\r\n    private activePolicy: ScriptletDataObject = new ScriptletDataObject({});\r\n    private activePolicyName:string = \"\";\r\n\r\n    private checkersType: EntityWithDescription[] = EntityWithDescription.generateCheckersTypes();\r\n    private policyTypes: EntityWithDescription[] = EntityWithDescription.generatePoliciesTypes();\r\n\r\n    private triggerLanguages: string[] = [\"Groovy\"/*, \"JavaScript\"*/];\r\n\r\n    private availableSupervisors :any[] = [];\r\n\r\n    private healthStatusLevels:string[] = [\"LOW\", \"MODERATE\", \"SUBSTANTIAL\", \"SEVERE\", \"CRITICAL\"];\r\n    private aggregations:string[] = [\"MAX\", \"MIN\", \"MEAN\", \"MEDIAN\", \"PERCENTILE_90\", \"PERCENTILE_95\", \"PERCENTILE_97\", \"SUM\"];\r\n\r\n    private defaultGroovyCheckerScript:string = \"\";\r\n    private defaultGroovyTriggerScript:string = \"\";\r\n    private defaultGroovyPolicyScript:string = \"\";\r\n\r\n    private operationalRangeVisible:boolean = false;\r\n\r\n    constructor(private http: ApiClient, private modal: Modal, overlay: Overlay, vcRef: ViewContainerRef, private cd: ChangeDetectorRef) {\r\n        overlay.defaultViewContainer = vcRef;\r\n    }\r\n\r\n    toggleOperationalRangeDialog():void {\r\n        this.operationalRangeVisible = !this.operationalRangeVisible;\r\n    }\r\n\r\n    saveCurrentTrigger(): void {\r\n        console.log(\"Trigger has been saved: \", this.activeWatcher);\r\n    }\r\n\r\n    saveCurrentChecker(): void {\r\n        this.activeWatcher.attributeCheckers[this.selectedAttribute.name] = this.activeChecker;\r\n        console.log(\"Checker has been saved\", this.activeWatcher);\r\n    }\r\n\r\n    getMainHeader():string {\r\n        return isNullOrUndefined(this.activeWatcher) ? \"Setup supervisors\" : \"Setup \" + this.activeWatcher.name + \" supervisor\";\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        // load the list of watchers\r\n        this.http.get(REST.SUPERVISORS_CONFIG)\r\n            .map((res: Response) => res.json())\r\n            .subscribe((data) => {\r\n                this.watchers = Factory.watchersArrayFromJSON(data);\r\n                console.log(\"All the watchers list: \", this.watchers);\r\n            });\r\n\r\n        // find all the components\r\n        this.http.get(REST.GROUPS_WEB_API)\r\n            .map((res: Response) => {\r\n                return <string[]>res.json()\r\n            })\r\n            .subscribe((data) => {\r\n                this.components = data;\r\n            });\r\n\r\n        // fill available supervisors list\r\n        this.http.get(REST.AVAILABLE_SUPERVISORS_LIST)\r\n            .map((res: Response) => res.json())\r\n            .subscribe(data => {\r\n                console.log(\"Available supervisors list is: \", data);\r\n                this.availableSupervisors = data;\r\n            });\r\n\r\n        this.http.get(REST.GROOVY_PATH + \"/AttributeChecker.groovy\")\r\n            .map((res:Response) => res.text())\r\n            .subscribe(data => {\r\n                this.defaultGroovyCheckerScript = data;\r\n                this.activeChecker.script = data;\r\n            });\r\n\r\n        this.http.get(REST.GROOVY_PATH + \"/HealthTrigger.groovy\")\r\n            .map((res:Response) => res.text())\r\n            .subscribe(data => {\r\n                this.defaultGroovyTriggerScript = data;\r\n            });\r\n\r\n        this.http.get(REST.GROOVY_PATH + \"/ScalingPolicy.groovy\")\r\n            .map((res:Response) => res.text())\r\n            .subscribe(data => {\r\n                this.defaultGroovyPolicyScript = data;\r\n                this.activePolicy.script = data;\r\n            });\r\n    }\r\n\r\n    ngAfterViewInit(): void {}\r\n\r\n    public initTriggerModal(): void {\r\n        // clean the data if the component was already initialized\r\n        if (this.triggerInitialized) {\r\n            // reset wizard\r\n            $(this.getTriggerWizardId()).off(\"showStep\");\r\n            $(this.getTriggerWizardId()).smartWizard(\"reset\");\r\n        }\r\n        this.initTriggerWizard();\r\n        // open the modal\r\n        $(\"#editTriggerModal\").modal(\"show\");\r\n        // and next time user adds the chart - we will reinit all the dialog\r\n        this.triggerInitialized = true;\r\n    }\r\n\r\n    public initCheckersModal(): void {\r\n        // clean the data if the component was already initialized\r\n        if (this.checkersInitialized) {\r\n            // reset wizard\r\n            $(this.getCheckersWizardId()).off(\"showStep\");\r\n            $(this.getCheckersWizardId()).smartWizard(\"reset\");\r\n        }\r\n        this.initCheckersWizard();\r\n        // open the modal\r\n        $(\"#editCheckerModal\").modal(\"show\");\r\n        // and next time user adds the chart - we will reinit all the dialog\r\n        this.checkersInitialized = true;\r\n    }\r\n\r\n    public initPoliciesModal(): void {\r\n        // clean the data if the component was already initialized\r\n        if (this.policiesInitialized) {\r\n            // reset wizard\r\n            $(this.getPoliciesWizardId()).off(\"showStep\");\r\n            $(this.getPoliciesWizardId()).smartWizard(\"reset\");\r\n        }\r\n        this.initPoliciesWizard();\r\n        // open the modal\r\n        $(\"#editPolicyModal\").modal(\"show\");\r\n        // and next time user adds the chart - we will reinit all the dialog\r\n        this.policiesInitialized = true;\r\n    }\r\n\r\n    private selectCurrentComponent(component: string): void {\r\n        this.selectedComponent = component;\r\n        this.loadAttributesOnComponentSelected();\r\n        this.activeWatcher.name = component;\r\n        this.activeWatcher.trigger = new ScriptletDataObject({});\r\n        this.activeWatcher.trigger.script = this.defaultGroovyTriggerScript;\r\n        this.activeWatcher.attributeCheckers = {};\r\n        this.activeWatcher.scalingPolicies = {};\r\n    }\r\n\r\n    isTriggerAvailable(): boolean {\r\n        return (this.activeWatcher != undefined && this.activeWatcher.trigger != undefined);\r\n    }\r\n\r\n    isCheckersAvailable(): boolean {\r\n        return (this.activeWatcher != undefined\r\n            && this.activeWatcher.attributeCheckers != undefined\r\n            && !$.isEmptyObject(this.activeWatcher.attributeCheckers)\r\n        );\r\n    }\r\n\r\n    public removeCheckerForAttribute(attr: AttributeInformation): void {\r\n        delete this.activeWatcher.attributeCheckers[attr.name];\r\n    }\r\n\r\n    public editCheckerForAttribute(attr: AttributeInformation): void {\r\n        if (!this.activeWatcher.checkerExists(attr.name)) {\r\n            this.activeWatcher.attributeCheckers[attr.name] = new ScriptletDataObject({});\r\n            this.activeWatcher.attributeCheckers[attr.name].script = this.defaultGroovyCheckerScript;\r\n        }\r\n        this.activeChecker = this.activeWatcher.attributeCheckers[attr.name];\r\n        this.selectedAttribute = attr;\r\n    }\r\n\r\n    private loadAttributesOnComponentSelected(): void {\r\n        console.log(\"Looking for attributes for group: \", this.selectedComponent);\r\n        this.http.get(REST.CHART_METRICS_BY_COMPONENT(this.selectedComponent))\r\n            .map((res: Response) => {\r\n                let _data: any = res.json();\r\n                let _values: AttributeInformation[] = [];\r\n                for (let i in _data) {\r\n                    _values.push(new AttributeInformation(_data[i]));\r\n                }\r\n                return _values;\r\n            }).catch((res: Response) => Observable.of([])).cache()\r\n            .subscribe((data) => {\r\n                this.attributes = data;\r\n                console.log(\"attributes: \", data);\r\n            });\r\n    }\r\n\r\n    public selectCheckerType(type: string): void {\r\n        if (type == \"ColoredAttributeChecker\") {\r\n            this.activeChecker.object = new ColoredAttributeChecker();\r\n        } else {\r\n            this.activeChecker.object = undefined;\r\n            this.activeChecker.script = this.defaultGroovyCheckerScript;\r\n        }\r\n    }\r\n\r\n    public cleanSelection(): void {\r\n        this.activeWatcher = undefined;\r\n        this.isNewEntity = true;\r\n    }\r\n\r\n    public removeWatcher(watcher: Watcher): void {\r\n        this.modal.confirm()\r\n            .className(<VEXBuiltInThemes>'default')\r\n            .message('Watcher is going to be removed. Proceed?')\r\n            .open()\r\n            .then((resultPromise) => {\r\n                return (<Promise<boolean>>resultPromise.result)\r\n                    .then((response) => {\r\n                        this.http.delete(REST.SUPERVISOR_BY_NAME(watcher.name))\r\n                            .map((res: Response) => res.text())\r\n                            .subscribe(data => {\r\n                                console.log(\"watcher has been removed: \", data);\r\n                                for (let i = 0; i < this.watchers.length; i++) {\r\n                                    if (this.watchers[i].name == watcher.name) {\r\n                                        this.watchers.splice(i, 1);\r\n                                        break;\r\n                                    }\r\n                                }\r\n                                this.cd.detectChanges();\r\n                            });\r\n                        return response;\r\n                    })\r\n                    .catch(() => {\r\n                        console.log(\"user preferred to decline watcher removing\");\r\n                    });\r\n            });\r\n    }\r\n\r\n    public editWatcher(watcher: Watcher): void {\r\n        this.activeWatcher = $.extend(true, {}, watcher);\r\n        this.isNewEntity = false;\r\n        this.selectedComponent = watcher.name;\r\n        this.loadAttributesOnComponentSelected();\r\n    }\r\n\r\n    public getPanelHeader(): string {\r\n        return this.isNewEntity ? \"Add new watcher\" : (\"Edit watcher \" + this.activeWatcher.name);\r\n    }\r\n\r\n    private getTriggerWizardId(): string {\r\n        return \"#smartwizardForTrigger\";\r\n    }\r\n\r\n    private getCheckersWizardId(): string {\r\n        return \"#smartwizardForCheckers\";\r\n    }\r\n\r\n    private getPoliciesWizardId(): string {\r\n        return \"#smartwizardForPolicies\";\r\n    }\r\n\r\n    private initTriggerWizard(): void {\r\n        $(this.getTriggerWizardId()).smartWizard({\r\n            theme: 'arrows',\r\n            useURLhash: false,\r\n            showStepURLhash: false,\r\n            transitionEffect: 'fade'\r\n        });\r\n\r\n        $(this.getTriggerWizardId()).on(\"showStep\", function (e, anchorObject, stepNumber, stepDirection) {\r\n            console.log(stepNumber);\r\n        });\r\n    }\r\n\r\n    private initCheckersWizard(): void {\r\n        this.activeChecker = new ScriptletDataObject({});\r\n        $(this.getCheckersWizardId()).smartWizard({\r\n            theme: 'arrows',\r\n            useURLhash: false,\r\n            showStepURLhash: false,\r\n            transitionEffect: 'fade'\r\n        });\r\n\r\n        $(this.getCheckersWizardId()).on(\"showStep\", function (e, anchorObject, stepNumber, stepDirection) {\r\n            console.log(stepNumber);\r\n        });\r\n    }\r\n\r\n    private initPoliciesWizard(): void {\r\n        this.activePolicy = new ScriptletDataObject({});\r\n        this.activePolicyName = \"\";\r\n        this.activePolicy.script = this.defaultGroovyPolicyScript;\r\n        this.operationalRangeVisible = false;\r\n        $(this.getPoliciesWizardId()).smartWizard({\r\n            theme: 'arrows',\r\n            useURLhash: false,\r\n            showStepURLhash: false,\r\n            transitionEffect: 'fade'\r\n        });\r\n\r\n        $(this.getPoliciesWizardId()).on(\"showStep\", function (e, anchorObject, stepNumber, stepDirection) {\r\n            console.log(stepNumber);\r\n        });\r\n    }\r\n\r\n    public addNewWatcher(): void {\r\n        this.activeWatcher = new Watcher(undefined, {});\r\n        this.activeWatcher.trigger.script = this.defaultGroovyTriggerScript;\r\n        this.selectedComponent = \"\";\r\n    }\r\n\r\n    public onGreenNotify(event: ColoredAttributePredicate): void {\r\n        this.activeChecker.object.green = event;\r\n        console.log(\"Saved green condition: \", event);\r\n    }\r\n\r\n    public onYellowNotify(event: ColoredAttributePredicate): void {\r\n        this.activeChecker.object.yellow = event;\r\n        console.log(\"Saved yellow condition: \", event);\r\n    }\r\n\r\n    public saveActiveWatcher(): void {\r\n        console.log(\"Saving selected watcher: \", this.activeWatcher, \", json is: \", this.activeWatcher.toJSON());\r\n        this.http.put(REST.SUPERVISOR_BY_NAME(this.activeWatcher.name), this.activeWatcher.toJSON())\r\n            .map((res: Response) => res.text())\r\n            .subscribe(data => {\r\n                console.log(\"watcher has been saved: \", data);\r\n                for (let i = 0; i < this.watchers.length; i++) {\r\n                    if (this.watchers[i].name == this.activeWatcher.name) {\r\n                        this.watchers[i] = this.activeWatcher;\r\n                    }\r\n                }\r\n                this.cleanSelection();\r\n            });\r\n    }\r\n\r\n    public isWatcherActive(_watcher:Watcher):boolean {\r\n        return this.activeWatcher != null && this.activeWatcher.name == _watcher.name;\r\n    }\r\n\r\n\r\n    public isPolicyActive(policyKey:string):boolean {\r\n        return this.activePolicy != undefined && this.activePolicyName != undefined && this.activePolicyName == policyKey;\r\n    }\r\n\r\n    public editPolicy(policyKey:string, policyValue:ScriptletDataObject):void {\r\n        this.activePolicyName = policyKey;\r\n        this.activePolicy = policyValue;\r\n    }\r\n\r\n    public removePolicy(policyKey:string):void {\r\n        delete this.activeWatcher.scalingPolicies[policyKey];\r\n        let newMap:{ [key:string]:ScriptletDataObject; } = {};\r\n        for (let key in this.activeWatcher.scalingPolicies) {\r\n            newMap[key] = this.activeWatcher.scalingPolicies[key];\r\n        }\r\n        this.activeWatcher.scalingPolicies = newMap;\r\n    }\r\n\r\n    public addNewPolicy():void {\r\n        this.modal.prompt()\r\n            .className(<VEXBuiltInThemes>'default')\r\n            .message('New policy')\r\n            .placeholder('Please set the name for a new policy')\r\n            .open()\r\n            .then(dialog => dialog.result)\r\n            .then(result => {\r\n                this.activeWatcher.scalingPolicies[result] = new ScriptletDataObject({});\r\n                this.activeWatcher.scalingPolicies[result].script = this.defaultGroovyPolicyScript;\r\n                let newMap:{ [key:string]:ScriptletDataObject; } = {};\r\n                for (let key in this.activeWatcher.scalingPolicies) {\r\n                    newMap[key] = this.activeWatcher.scalingPolicies[key];\r\n                }\r\n                this.activeWatcher.scalingPolicies = newMap;\r\n                this.activePolicy = this.activeWatcher.scalingPolicies[result];\r\n                this.activePolicyName = result;\r\n                this.cd.markForCheck();\r\n            })\r\n            .catch(() => {});\r\n    }\r\n\r\n    public selectPolicyType(type:string):void {\r\n        if (type == \"HealthStatusBased\") {\r\n            this.activePolicy.policyObject = new HealthStatusBasedScalingPolicy();\r\n        } else if (type == \"MetricBased\") {\r\n            this.activePolicy.policyObject = new AttributeBasedScalingPolicy();\r\n        } else {\r\n            this.activeChecker.policyObject = undefined;\r\n            this.activePolicy.script = this.defaultGroovyPolicyScript;\r\n        }\r\n    }\r\n\r\n    public saveCurrentPolicy():void {\r\n        this.activeWatcher.scalingPolicies[this.activePolicyName] = this.activePolicy;\r\n        console.log(\"Policy has been saved\");\r\n    }\r\n\r\n}\r\n\r\nexport class EntityWithDescription {\r\n    id: string;\r\n    description: string;\r\n\r\n    constructor(id: string, description: string) {\r\n        this.id = id;\r\n        this.description = description;\r\n    }\r\n\r\n    public static generateCheckersTypes(): EntityWithDescription[] {\r\n        let _value: EntityWithDescription[] = [];\r\n        _value.push(new EntityWithDescription(\"Groovy\", \"Groovy checker\"));\r\n        //_value.push(new EntityWithDescription(\"JavaScript\", \"Javascript checker\"));\r\n        _value.push(new EntityWithDescription(\"ColoredAttributeChecker\", \"Green and yellow conditions based checker\"));\r\n        return _value;\r\n    }\r\n\r\n\r\n    public static generatePoliciesTypes(): EntityWithDescription[] {\r\n        let _value: EntityWithDescription[] = [];\r\n        _value.push(new EntityWithDescription(\"Groovy\", \"Groovy policy\"));\r\n        _value.push(new EntityWithDescription(\"HealthStatusBased\", \"Health status based scaling policy\"));\r\n        _value.push(new EntityWithDescription(\"MetricBased\", \"Attribute based scaling policy\"));\r\n        return _value;\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// node_modules/angular2-template-loader!./~/string-replace-loader?{\"search\":\"(System|SystemJS)(.*[/n/r]/s*/.|/.)import/((.+)/)\",\"replace\":\"$1.import($3).then(mod => (mod.__esModule && mod.default) ? mod.default : mod)\",\"flags\":\"g\"}!./src/app/watchers/watchers.view.ts"],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;ACPA;AAWA;AAAA;AACA;AACA;AACA;AAFA;AAAA;;AAAA;AACA;AAAA;;AAAA;AARA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAIA;AAAA;AAHA;;;;;;;;;;ACXA;AACA;AAEA;AACA;AACA;AAOA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AA4CA;AA1CA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAlDA;AAAA;;AAAA;AACA;AAAA;;AAAA;AAPA;AAAA;AACA;AACA;AACA;AACA;;AAAA;AAsDA;;AAAA;AArDA;AAuDA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAzCA;;;;;;;;;;ACnEA;AAGA;AACA;AAQA;AAAA;AACA;AACA;AAQA;AANA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;;AAAA;AACA;AAAA;;AAAA;AARA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAWA;AAAA;AAVA;;;;;;;;;;ACZA;AACA;AACA;AACA;AAQA;AAIA;AAAA;AAAA;AAAA;AAEA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AA3BA;AAAA;;AAAA;AACA;AAAA;;AAAA;AARA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AA+BA;;AAAA;AA9BA;;;;;;;;ACXA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;;;ACAA;AACA;AACA;AAQA;AAAA;AACA;AACA;AAMA;AAJA;AACA;AACA;AACA;AANA;AAAA;;AAAA;AACA;AAAA;;AAAA;AARA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAAA;AASA;;AAAA;AARA;;;;;;;;;;ACRA;AAAA;AACA;AACA;AAQA;AANA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAVA;;;;;;;;;;ACFA;AAAA;AAOA;AANA;AACA;AACA;AAIA;AAAA;AAPA;;;;;;;;;;ACAA;AAEA;AAAA;AAAA;AAAA;AACA;AAaA;AAVA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAdA;;;;;;;;;;ACFA;AAIA;AADA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AA9DA;AAgEA;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AA5BA;AA8BA;AACA;AAAA;AAOA;AANA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAPA;;;;;;;;;;AC/FA;AACA;AACA;AAEA;AAAA;AA4DA;AA1DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AA5DA;;;;;;;;;;;ACJA;AAEA;AAAA;AAAA;AAAA;AACA;AAuCA;AAnCA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAxCA;;;;;;;;;;ACFA;AAAA;AAcA;AAZA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAdA;;;;;;;;;;ACAA;AACA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAKA;AAAA;AACA;AACA;AAEA;AACA;AACA;;;AAJA;AAMA;AAAA;AACA;AACA;AAEA;AACA;AACA;;;AAJA;AAMA;AAAA;AACA;AACA;AAEA;AACA;AACA;;;AAJA;AAMA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AA3CA;;;;;;;;;;ACHA;AACA;AACA;AAEA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AACA;;;AAJA;AAMA;AAAA;AACA;AACA;AAEA;AACA;AACA;;;AAJA;AAMA;AAAA;AACA;AACA;AAEA;AACA;AACA;;;AAJA;AAMA;AAAA;AACA;AACA;AAEA;AACA;AACA;;;AAJA;AAMA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AApEA;;;;;;;;;;ACJA;AACA;AAEA;AAAA;AAIA;AACA;AACA;AACA;AAGA;AAAA;AACA;AACA;AAEA;AACA;AACA;;;AAJA;AAMA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAGA;AAAA;AAjCA;;;;;;;;;;ACHA;AAEA;AAeA;AAVA;AACA;AAEA;AACA;AAOA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AACA;;;AAJA;AAMA;AAAA;AACA;AACA;AAEA;AACA;AACA;;;AAJA;AAMA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAnFA;AACA;AACA;AAkFA;AAAA;AA/FA;;;;;;;;;;ACFA;AAEA;AAAA;AAAA;AAAA;AACA;AAsBA;AAhBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAvBA;;;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAQA;AACA;AAHA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAxJA;;;;;;;;;;ACdA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAgCA;AA9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AA3CA;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACRA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;;;ACAA;AACA;AAIA;AAEA;AACA;AACA;AAQA;AAMA;AAAA;AAHA;AACA;AAGA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA1CA;AAAA;AACA;AACA;AACA;AACA;;AAAA;AAwCA;;AAAA;AAvCA;;;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAiCA;AAAA;AAAA;AA/BA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAAA;AACA;AAAA;AAAA;;;;;;;;;;AC/DA;AAGA;AAAA;AAQA;AAPA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;;AAAA;AASA;AAAA;AARA;;;;;;;;;;ACHA;AACA;AAIA;AAEA;AACA;AASA;AAIA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAhBA;AAAA;AACA;AACA;AACA;AACA;;AAAA;AAcA;;AAAA;AAbA;;;;;;;;;;ACjBA;AAMA;AAAA;AAAA;AAJA;AAAA;AACA;AACA;AACA;;AAAA;AACA;AAAA;AAAA;;;;;;;;;;ACNA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAOA;AAoCA;AAAA;AAAA;AAAA;AAlnZA;AAAA;AACA;AACA;AACA;AACA;;AAAA;AAiZA;;AAAA;AAhZA;AAkZA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAzBA;;;;;;","sourceRoot":""}