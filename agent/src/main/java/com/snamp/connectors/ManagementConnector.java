package com.snamp.connectors;

import com.snamp.*;

import java.util.*;
import java.util.concurrent.*;

/**
 * Represents management connector that exposes management attributes of the remote provider.
 * @author Roman Sakno
 * @since 1.0
 * @version 1.0
 */
@Lifecycle(InstanceLifecycle.NORMAL)
public interface ManagementConnector extends AutoCloseable, Aggregator, AttributeSupport {


    /**
     * Executes remote action.
     * @param actionName The name of the action,
     * @param args The invocation arguments.
     * @param timeout The Invocation timeout.
     * @return The invocation result.
     */
    public Object doAction(final String actionName, final Arguments args, final TimeSpan timeout) throws UnsupportedOperationException, TimeoutException;

    /**
     * Enables event listening for the specified category of events.
     * <p>
     *     categoryId can be used for enabling notifications for the same category
     *     but with different options.
     * </p>
     * @param listId An identifier of the subscription list.
     * @param category The name of the category to listen.
     * @param options Event discovery options.
     * @return The metadata of the event to listen; or {@literal null}, if the specified category is not supported.
     */
    public NotificationMetadata enableNotifications(final String listId, final String category, final Map<String, String> options);

    /**
     * Disables event listening for the specified category of events.
     * <p>
     *     This method removes all listeners associated with the specified subscription list.
     * </p>
     * @param listId The identifier of the subscription list.
     * @return {@literal true}, if notifications for the specified category is previously enabled; otherwise, {@literal false}.
     */
    public boolean disableNotifications(final String listId);

    /**
     * Gets the notification metadata by its category.
     * @param listId The identifier of the subscription list.
     * @return The metadata of the specified notification category; or {@literal null}, if notifications
     * for the specified category is not enabled by {@link #enableNotifications(String, String, java.util.Map)} method.
     */
    public NotificationMetadata getNotificationInfo(final String listId);

    /**
     * Attaches the notification listener.
     * @param listId The identifier of the subscription list.
     * @param listener The notification listener.
     * @return An identifier of the notification listener generated by this connector.
     * @throws UnsupportedOperationException Notifications are not supported.
     */
    public Object subscribe(final String listId, final NotificationListener listener) throws UnsupportedOperationException;

    /**
     * Removes the notification listener.
     * @param listenerId An identifier previously returned by {@link #subscribe(String, NotificationListener)}.
     * @return {@literal true} if listener is removed successfully; otherwise, {@literal false}.
     */
    public boolean unsubscribe(final Object listenerId) throws UnsupportedOperationException;
}
