package com.itworks.snamp.adapters.rest;

import com.itworks.snamp.ExceptionPlaceholder;
import com.itworks.snamp.ExceptionalCallable;
import com.itworks.snamp.adapters.AbstractResourceAdapter;
import com.itworks.snamp.internal.Utils;
import org.eclipse.jetty.jaas.JAASLoginService;
import org.eclipse.jetty.jaas.spi.LdapLoginModule;
import org.eclipse.jetty.server.UserIdentity;
import org.eclipse.jetty.websocket.server.WebSocketServerFactory;

import javax.ws.rs.WebApplicationException;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.SecurityContext;
import java.util.Arrays;
import java.util.logging.Logger;

/**
 * @author Roman Sakno
 * @version 1.0
 * @since 1.0
 */
final class RestAdapterHelpers {
    public static final String ADAPTER_NAME = "REST";
    private RestAdapterHelpers(){

    }

    public static Logger getLogger(){
        return AbstractResourceAdapter.getLogger(ADAPTER_NAME);
    }

    /**
     * Represents monitor role that can receive notifications and read attributes.
     */
    public static final String MONITOR_ROLE = "monitor";

    /**
     * Represents maintainer role that can overwrite attributes.
     */
    public static final String MAINTAINER_ROLE = "maintainer";

    private static final class OsgiCompliantJaasLoginService extends JAASLoginService{
        private final ClassLoader osgiClassLoader;

        private OsgiCompliantJaasLoginService(final ClassLoader osgiClassLoader){
            this.osgiClassLoader = osgiClassLoader;
        }

        @Override
        public UserIdentity login(final String username, final Object credentials) {
            return Utils.withContextClassLoader(osgiClassLoader, new ExceptionalCallable<UserIdentity, ExceptionPlaceholder>() {
                @Override
                public UserIdentity call() {
                    return OsgiCompliantJaasLoginService.super.login(username, credentials);
                }
            });
        }
    }

    public static JAASLoginService createJaasLoginServiceForOsgi(final ClassLoader osgiClassLoader) {
        return new OsgiCompliantJaasLoginService(osgiClassLoader);
    }

    //this method is not used by this bundle but required for correct Import-Package
    //header generated by maven-bundle-plugin. This plugin adds org.eclipse.jetty.jaas.spi.*
    //package that is required by LoginContext factory.
    @SuppressWarnings("UnusedDeclaration")
    public static String convertCredentialJettyToLdap(final String encryptedPassword){
        return LdapLoginModule.convertCredentialLdapToJetty(encryptedPassword);
    }

    public static void checkRoles(final SecurityContext context, final String... roles) throws WebApplicationException {
        if(context == null) return;
        for(final String r: roles)
            if(context.isUserInRole(r)) return;
        throw new WebApplicationException(new SecurityException(String.format("User %s is not in %s roles", context.getUserPrincipal().getName(), Arrays.toString(roles))), Response.Status.FORBIDDEN);
    }

    public static void maintainerRequired(final SecurityContext context){
        checkRoles(context, MAINTAINER_ROLE);
    }

    public static void wellKnownRoleRequired(final SecurityContext context){
        checkRoles(context, MAINTAINER_ROLE, MONITOR_ROLE);
    }

    //org.eclipse.jetty.websocket.server package should be imported explicitly, therefore
    //this stub method required for maven-bundle-plugin
    @SuppressWarnings("UnusedDeclaration")
    public static Object getActiveUpgradeContext(){
        return WebSocketServerFactory.getActiveUpgradeContext();
    }
}
